<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小米路由器BE7000的Docker权限不足问题解决</title>
      <link href="/xiaomiBE7000-dockerup.html"/>
      <url>/xiaomiBE7000-dockerup.html</url>
      
        <content type="html"><![CDATA[<p>Error response from daemon: authorization denied by plugin opa-docker-authz: request rejected by administrative policy。<br>小米路由器BE7000，docker run 权限提升问题解决方案。</p><p>手上有一台MiWiFi For Xiaomi路由器BE7000 稳定版。这个路由器硬件配置还不错，而且支持Docker。刚好从网上看到有解锁SSH的教程。(SSH教程，在恩山找就行)<br>于是在开启SSH之后，尝试跑几个docker容器，结果遇到了这个错误：Error response from daemon: authorization denied by plugin opa-docker-authz: request rejected by administrative policy。</p><p>原来这个路由器默认的docker初始化加入了opa权限插件。这个插件opa-docker-authz 是一个使用 Open Policy Agent (OPA) 实现的 Docker 容器授权插件，用于对 Docker 守护进程的 API 请求进行访问控制。它允许管理员定义细粒度的访问控制策略，以决定哪些操作可以执行，哪些不可以。</p><p>首先我们找到·初始化的配置信息，关闭这个插件即可。文件在 <strong>&#x2F;etc&#x2F;config&#x2F;mi_docker</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 查看文件</span><br><span class="line"><span class="built_in">cat</span> /etc/config/mi_docker</span><br><span class="line"></span><br><span class="line">// 编辑文件</span><br><span class="line">vi /etc/config/mi_docker</span><br></pre></td></tr></table></figure><p>把文件中这一行 list authorization_plugins ‘opa-docker-authz’<br>将引号中的内容删掉，只保留引号就可以了<br>list authorization_plugins ‘’</p><p><img src="/img/article/20241209201126.png"></p><p>然后重启路由器就可以了</p><p>这样docker权限提升就完成了！</p>]]></content>
      
      
      <categories>
          
          <category> 生活琐事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare ddns通过API更新动态IP域名解析</title>
      <link href="/cloudflare-ddns.html"/>
      <url>/cloudflare-ddns.html</url>
      
        <content type="html"><![CDATA[<p>Cloudflare的DDNS功能使用，通过Linux定时任务配合shell脚本，完成动态IP的域名解析。适用于家庭网络公网IP不固定的情况。</p><h1 id="创建一个API密钥"><a href="#创建一个API密钥" class="headerlink" title="创建一个API密钥"></a>创建一个API密钥</h1><p>登录Cloudflare之后 -&gt; 点击页面右上角的个人中心 -&gt; 进入My Profile -&gt; 进入API token<br>也可以直接访问链接：<a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a></p><p>创建一个Token，选择模板Edit zone DNS<br><img src="/img/article/20241104140608.png"><br><img src="/img/article/20241104141241.png"></p><blockquote><p>点击 提交确认之后，复制token并保存起来. (<strong>注意这个Token只会展示这一次，忘记了就只能重新创建一个Token</strong>)</p></blockquote><h1 id="编写脚本，验证流程"><a href="#编写脚本，验证流程" class="headerlink" title="编写脚本，验证流程"></a>编写脚本，验证流程</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Cloudflare API令牌</span></span><br><span class="line">API_TOKEN=<span class="string">&quot;填token&quot;</span></span><br><span class="line"><span class="comment"># Cloudflare Zone ID</span></span><br><span class="line">ZONE_ID=<span class="string">&quot;填Zone ID&quot;</span></span><br><span class="line"><span class="comment"># DNS记录ID（需要更新的记录ID）</span></span><br><span class="line">RECORD_ID=<span class="string">&quot;填DNS记录ID&quot;</span></span><br><span class="line"><span class="comment"># 需要更新的域名，subdomain.example.com</span></span><br><span class="line">RECORD_NAME=<span class="string">&quot;填域名&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前公网IP</span></span><br><span class="line">CURRENT_IP=$(curl -s http://ipv4.icanhazip.com)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前公网IP: <span class="variable">$CURRENT_IP</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取现有的DNS记录IP</span></span><br><span class="line">DNS_RECORD_RESPONSE=$(curl -s -X GET <span class="string">&quot;https://api.cloudflare.com/client/v4/zones/<span class="variable">$&#123;ZONE_ID&#125;</span>/dns_records/<span class="variable">$&#123;RECORD_ID&#125;</span>&quot;</span> \</span><br><span class="line">     -H <span class="string">&quot;Authorization: Bearer <span class="variable">$&#123;API_TOKEN&#125;</span>&quot;</span> \</span><br><span class="line">     -H <span class="string">&quot;Content-Type: application/json&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取现有DNS记录的IP地址</span></span><br><span class="line">DNS_RECORD_IP=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$DNS_RECORD_RESPONSE</span>&quot;</span> | sed -n <span class="string">&#x27;s/.*&quot;content&quot;:&quot;\([^&quot;]*\)&quot;.*/\1/p&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;提取到的DNS记录IP: <span class="variable">$DNS_RECORD_IP</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查IP是否需要更新</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$CURRENT_IP</span>&quot;</span> == <span class="string">&quot;<span class="variable">$DNS_RECORD_IP</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;IP地址未改变，无需更新&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;IP地址已改变，开始更新DNS记录&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新DNS记录</span></span><br><span class="line">    RESPONSE=$(curl -s -X PUT <span class="string">&quot;https://api.cloudflare.com/client/v4/zones/<span class="variable">$&#123;ZONE_ID&#125;</span>/dns_records/<span class="variable">$&#123;RECORD_ID&#125;</span>&quot;</span> \</span><br><span class="line">         -H <span class="string">&quot;Authorization: Bearer <span class="variable">$&#123;API_TOKEN&#125;</span>&quot;</span> \</span><br><span class="line">         -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">         --data <span class="string">&quot;&#123;\&quot;type\&quot;:\&quot;A\&quot;,\&quot;name\&quot;:\&quot;<span class="variable">$&#123;RECORD_NAME&#125;</span>\&quot;,\&quot;content\&quot;:\&quot;<span class="variable">$&#123;CURRENT_IP&#125;</span>\&quot;,\&quot;ttl\&quot;:120,\&quot;proxied\&quot;:false&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查更新结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$RESPONSE</span>&quot;</span> | grep -q <span class="string">&quot;\&quot;success\&quot;:true&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;DNS记录已成功更新为新IP: <span class="variable">$&#123;CURRENT_IP&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;更新DNS记录失败：<span class="variable">$RESPONSE</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>首先在控制台新增一条对应的域名DNS解析记录，用于后续API动态修改。<br><img src="/img/article/20241104144310.png"></p><p>解释一下脚本中的几个变量：</p><ol><li>API_TOKEN：就是上面创建的token</li><li>ZONE_ID：在控制台websites列表页面-进入你的域名页面-在右侧可以看到API Zone ID</li><li>RECORD_ID：就是你需要更新的那一条解析记录的ID，可以用下面的API接口查看<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&quot;https://api.cloudflare.com/client/v4/zones/你的ZONE_ID/dns_records?type=A&amp;name=你的解析域名&quot;</span> \</span><br><span class="line">     -H <span class="string">&quot;Authorization: Bearer 你的API_TOKEN&quot;</span> \</span><br><span class="line">     -H <span class="string">&quot;Content-Type: application/json&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 返回的响应结果如下，第一个id字段，就是这条域名解析记录的ID</span><br><span class="line">&#123;&quot;result&quot;:[&#123;&quot;id&quot;:&quot;3995e7cd0ee84056abe3e0c2d191cf62&quot;,&quot;zone_id&quot;:&quot;04dbfb40755d415ba7c2f40f562e357e&quot;,&quot;zone_name&quot;:&quot;dollcode.cn&quot;,&quot;name&quot;:&quot;blog.dollcode.cn&quot;,&quot;type&quot;:&quot;A&quot;,&quot;content&quot;:&quot;114.114.114.114&quot;,&quot;proxiable&quot;:true,&quot;proxied&quot;:false,&quot;ttl&quot;:120,&quot;settings&quot;:&#123;&#125;..............</span><br></pre></td></tr></table></figure></li><li>RECORD_NAME：填自己的域名就行了</li></ol><p>根据实际情况替换变量为自己的，然后保存脚本。命名为<code>cfddns.sh</code>，然后执行如下命令验证效果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋予可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /opt/ddns/cfddns.sh</span><br><span class="line"><span class="comment"># 执行验证</span></span><br><span class="line">/opt/ddns/cfddns.sh</span><br></pre></td></tr></table></figure><p>就可以看到对应的日志信息了！</p><h1 id="注册为定时任务"><a href="#注册为定时任务" class="headerlink" title="注册为定时任务"></a>注册为定时任务</h1><p>接下来就是注册定时任务，每十分钟执行一次，完成自动动态更新解析</p><p>使用 cron 定时执行该脚本。编辑 cron 配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>添加如下内容，使其每10分钟执行一次：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/10 * * * * /opt/ddns/cfddns.sh &gt;&gt; /opt/ddns/ddnsupdate.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>wq保存退出</p><p>注意目录替换为实际路径。并检查&#x2F;opt&#x2F;ddns&#x2F;ddnsupdate.log 中的日志输出即可！</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新版FRP内网穿透搭建使用</title>
      <link href="/linux-newfrp.html"/>
      <url>/linux-newfrp.html</url>
      
        <content type="html"><![CDATA[<p>新版的配置文件有比较大的改动，这里记录一下安装部署过程，官网文档在这里 <a href="https://gofrp.org/zh-cn/docs/setup">https://gofrp.org/zh-cn/docs/setup</a><br>下载安装地址 <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a><br>当前最新版0.60.0</p><h1 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h1><p>首先是服务端，需要在一台公网机器上部署。<br>这里我们自己下载 选择自己机器对应平台的压缩包 我这里选<a href="https://github.com/fatedier/frp/releases/download/v0.60.0/frp_0.60.0_linux_amd64.tar.gz">https://github.com/fatedier/frp/releases/download/v0.60.0/frp_0.60.0_linux_amd64.tar.gz</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 下载</span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.60.0/frp_0.60.0_linux_amd64.tar.gz</span><br><span class="line">// 解压</span><br><span class="line">tar zxvf frp_0.60.0_linux_amd64.tar.gz</span><br><span class="line">// 进入目录</span><br><span class="line"><span class="built_in">cd</span> frp_0.60.0_linux_amd64</span><br><span class="line">// 设置可执行权限</span><br><span class="line"><span class="built_in">chmod</span> +x frps</span><br></pre></td></tr></table></figure><p>可以看到目录下有两对执行文件和配置文件， 分别对应客户端(frpc)和服务端(frps)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LICENSE</span><br><span class="line">frpc</span><br><span class="line">frpc.toml </span><br><span class="line">frps      </span><br><span class="line">frps.toml</span><br></pre></td></tr></table></figure><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p><code>vim frps.toml</code>  加入如下配置</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端监听端口(需要开放安全组端口)</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 服务端监听HTTP端口(需要开放安全组端口)</span></span><br><span class="line"><span class="attr">vhostHTTPPort</span> = <span class="number">8080</span></span><br><span class="line"><span class="comment"># 鉴权方式为token</span></span><br><span class="line"><span class="attr">auth.method</span> = <span class="string">&quot;token&quot;</span></span><br><span class="line"><span class="comment"># 设置Token，(安全重要) 建议设置复杂一点，对应客户端需要设置一样才能鉴权通过</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="comment"># 日志文件最多保留天数，默认为 3 天。</span></span><br><span class="line"><span class="attr">log.maxDays</span> = <span class="number">7</span></span><br><span class="line"><span class="comment"># 日志级别，可选值为 trace, debug, info, warn, error，默认级别为 info</span></span><br><span class="line"><span class="attr">log.level</span> = <span class="string">&quot;info&quot;</span></span><br><span class="line"><span class="comment"># 日志输出文件路径 (根据自己的实际目录填写)</span></span><br><span class="line"><span class="attr">log.to</span> = <span class="string">&quot;/home/blog/frp_0.60.0_linux_amd64/info.log&quot;</span></span><br></pre></td></tr></table></figure><h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p><strong>加入如下内容(注意替换自己的实际路径)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description = frp server</span><br><span class="line">After = network.target syslog.target</span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type = simple</span><br><span class="line"># 启动frps的命令，需修改为您的frps的安装路径</span><br><span class="line">ExecStart = /home/blog/frp_0.60.0_linux_amd64/frps -c /home/blog/frp_0.60.0_linux_amd64/frps.toml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 启动FRP服务并设置开机自启</span><br><span class="line">systemctl enable --now frps</span><br><span class="line">// 查看运行状态</span><br><span class="line">systemctl status frps</span><br></pre></td></tr></table></figure><p>** 看到如下日志就服务端启动就OK了 **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">● frps.service - frp server</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/frps.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2024-09-09 11:37:27 CST; 5h 9min ago</span><br><span class="line"> Main PID: 2677050 (frps)</span><br><span class="line">    Tasks: 5</span><br><span class="line">   Memory: 13.0M</span><br><span class="line">   CGroup: /system.slice/frps.service</span><br><span class="line">           └─2677050 /home/blog/frp_0.60.0_linux_amd64/frps -c /home/blog/frp_0.60.0_linux_amd64/frps.toml</span><br></pre></td></tr></table></figure><h1 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h1><blockquote><p>下载的还是同一个压缩包，这些步骤就不重复说明了。<br>我这里连安装目录也都放的和服务机器一致。 解压之后，赋予客户端可执行权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置可执行权限</span><br><span class="line"><span class="built_in">chmod</span> +x frpc</span><br></pre></td></tr></table></figure><h2 id="编辑配置文件-1"><a href="#编辑配置文件-1" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p>编辑客户端配置文件<br><code>vim frpc.toml</code>  有如下几种配置场景。可以直接看官网文档！挺详细的 <a href="https://gofrp.org/zh-cn/docs/examples/">https://gofrp.org/zh-cn/docs/examples/</a></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填服务端机器的公网IP</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;x.x.x.x&quot;</span></span><br><span class="line"><span class="comment"># 和服务端保持一致</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 和服务端保持一致</span></span><br><span class="line"><span class="attr">vhostHTTPPort</span> = <span class="number">8080</span></span><br><span class="line"><span class="comment"># 鉴权方式为token</span></span><br><span class="line"><span class="attr">auth.method</span> = <span class="string">&quot;token&quot;</span></span><br><span class="line"><span class="comment"># TOKEN 客户端需要设置和服务端一样才能鉴权通过</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="comment"># 日志文件最多保留天数，默认为 3 天。</span></span><br><span class="line"><span class="attr">log.maxDays</span> = <span class="number">7</span></span><br><span class="line"><span class="comment"># 日志级别，可选值为 trace, debug, info, warn, error，默认级别为 info</span></span><br><span class="line"><span class="attr">log.level</span> = <span class="string">&quot;info&quot;</span></span><br><span class="line"><span class="comment"># 日志输出文件路径 (根据自己的实际目录填写)</span></span><br><span class="line"><span class="attr">log.to</span> = <span class="string">&quot;/home/blog/frp_0.60.0_linux_amd64/info.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 公众号调试代理 </span></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;mp-web&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;http&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">customDomains</span> = [<span class="string">&quot;temptest.blog.dollcode.cn&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH登录代理</span></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;ssh&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure><h2 id="设置开机自启-1"><a href="#设置开机自启-1" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><blockquote><p>方法和在服务端机器操作一模一样，仅仅需要修改 frps 为 frpc 即可</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/frpc.service</span><br></pre></td></tr></table></figure><p><strong>加入如下内容(注意替换自己的实际路径)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description = frp server</span><br><span class="line">After = network.target syslog.target</span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type = simple</span><br><span class="line"># 启动frps的命令，需修改为您的frps的安装路径</span><br><span class="line">ExecStart = /home/blog/frp_0.60.0_linux_amd64/frpc -c /home/blog/frp_0.60.0_linux_amd64/frpc.toml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 启动FRP服务并设置开机自启</span><br><span class="line">systemctl enable --now frpc</span><br><span class="line">// 查看运行状态</span><br><span class="line">systemctl status frpc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建gitlab-runner利用CICD部署Springboot微服务到K8s集群</title>
      <link href="/docker-gitlab-runner.html"/>
      <url>/docker-gitlab-runner.html</url>
      
        <content type="html"><![CDATA[<p>在DevOps工作流中，CICD持续集成持续部署是重要的一环。GitLab CI&#x2F;CD 是 GitLab 的一部分，因此不需要单独安装。<br>如果你已经在使用 GitLab 进行代码管理，GitLab CI&#x2F;CD 无缝集成，直接在同一个平台上管理代码、审查合并请求、自动化测试和部署。<br>这种集成度简化了开发流程，使用起来非常方便。</p><blockquote><p>前提条件：已经在使用Gitlab做代码管理、机器已安装Docker环境<br>目标：Docker搭建gitlab-runner，用gitgitlab-ci.yml脚本、Maven打包Springboot微服务、上传到Docker镜像仓库、远程部署到K8s集群</p></blockquote><h1 id="docker安装gitlab-runner"><a href="#docker安装gitlab-runner" class="headerlink" title="docker安装gitlab-runner"></a>docker安装gitlab-runner</h1><p>在Gitlab中Runner可以注册到 项目（Project）、群组（Group） 或 所有项目（All projects），这里注册到最大的，所有项目和组都可以用这个Runner<br><img src="/img/article/20240819105213.png"></p><p>还需要查看当前在用的Gitlab的安装版本，选择一致的版本。避免gitlab-runner版本跨度过大导致出现问题。</p><p><strong>1.先注册生成得到一个配置文件config.toml</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 注意替换成自己的版本号，然后回车，开始注册runner到gitlab流程</span><br><span class="line">docker run --<span class="built_in">rm</span> -it -v $(<span class="built_in">pwd</span>)/runner-config:/etc/gitlab-runner gitlab/gitlab-runner:v16.11.3 register</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 第一步：输入gitlab的访问地址即可</span><br><span class="line">Enter the GitLab instance URL (<span class="keyword">for</span> example, https://gitlab.com/):</span><br><span class="line">http://192.168.168.168:8888</span><br><span class="line"></span><br><span class="line">// 第二步：输入 从gitlab管理页面上的复制token</span><br><span class="line">Enter the registration token:</span><br><span class="line">pAovXYzGHsy5EWF7zKiU</span><br><span class="line"></span><br><span class="line">// 第三步：输入runner名称 比如：docker-microservice-runner</span><br><span class="line">Enter a description <span class="keyword">for</span> the runner:</span><br><span class="line">[94030fed2ba3]: docker-microservice-runner</span><br><span class="line"></span><br><span class="line">// 第四步：输入Tag 比如：blog</span><br><span class="line">Enter tags <span class="keyword">for</span> the runner (comma-separated):</span><br><span class="line">blog</span><br><span class="line"></span><br><span class="line">// 第五步：输入说明备注 直接回车跳过</span><br><span class="line">Enter optional maintenance note <span class="keyword">for</span> the runner:</span><br><span class="line"></span><br><span class="line">WARNING: Support <span class="keyword">for</span> registration tokens and runner parameters <span class="keyword">in</span> the <span class="string">&#x27;register&#x27;</span> <span class="built_in">command</span> has been deprecated <span class="keyword">in</span> GitLab Runner 16.11 and will be replaced with support <span class="keyword">for</span> authentication tokens. For more information, see https://gitlab.com/gitlab-org/gitlab/-/issues/380872</span><br><span class="line">Registering runner... succeeded                     runner=pAovXYzG</span><br><span class="line"></span><br><span class="line">// 第六步：这个时候可以看到上面日志已经注册完成，选择执行器 docker</span><br><span class="line">Enter an executor: docker, parallels, virtualbox, docker+machine, docker-ssh+machine, instance, kubernetes, custom, docker-ssh, shell, ssh:</span><br><span class="line">docker</span><br><span class="line"></span><br><span class="line">// 第七步：选择默认基础镜像，这个镜像其实无所谓，因为我们在实际CICD中会指定镜像。这里就直接填 docker:24.0.2</span><br><span class="line">Enter the default Docker image (<span class="keyword">for</span> example, ruby:2.7):</span><br><span class="line">docker:24.0.2</span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">&#x27;s running already the config should be automatically reloaded!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Configuration (with the authentication token) was saved in &quot;/etc/gitlab-runner/config.toml&quot;</span></span><br></pre></td></tr></table></figure><p>现在我们得到了配置文件，还需要修改一项重要配置（重要）！！！</p><blockquote><p>因为我们使用Docker部署的Runner，也就是使用 Docker-in-Docker (DinD) 模式进行部署。<br>需要挂载&#x2F;var&#x2F;run&#x2F;docker.sock，以允许容器内的 Docker 引擎访问宿主机的 Docker。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 编辑配置文件 </span><br><span class="line">vim runner-config/config.toml</span><br><span class="line"></span><br><span class="line">// 修改volumes这一行，改为如下即可</span><br><span class="line">volumes = [<span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>, <span class="string">&quot;/cache&quot;</span>]</span><br></pre></td></tr></table></figure><p>保存之后，整个runner的配置文件就准备完成了！</p><p><strong>2.启动gitlab-runner</strong><br>配置文件OK之后，就可以启动Runner了，执行如下命令（注意所在目录需要跟上面保持一致）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gitlab-runner  \</span><br><span class="line">  -v $(<span class="built_in">pwd</span>)/runner-config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:v16.11.3</span><br></pre></td></tr></table></figure><p>启动之后，就可以在Gitlab上看到 Runner了。<br><img src="/img/article/20240819111552.png"></p><h1 id="构建JAVA微服务CICD"><a href="#构建JAVA微服务CICD" class="headerlink" title="构建JAVA微服务CICD"></a>构建JAVA微服务CICD</h1><p>整个流程：maven打包得到jar包 -&gt; Dockerfile构建镜像并上传仓库 -&gt; Kubectl部署到K8s集群<br>在这个过程中，牵扯到账号信息，为了安全方便可以配置成CICD变量。</p><h2 id="配置CICD变量"><a href="#配置CICD变量" class="headerlink" title="配置CICD变量"></a>配置CICD变量</h2><ul><li>DOCKER_REGISTRY  docker地址 比如:registry.cn-hangzhou.aliyuncs.com&#x2F;blog</li><li>DOCKER_REGISTRY_USER  docker登录名</li><li>DOCKER_REGISTRY_PASSWORD  docker密码</li><li>K8S_KUBECONFIG_TEST   k8s测试集群的config文件</li><li>K8S_KUBECONFIG_PROD   k8s生产集群的config文件</li><li>JAVA_MAVEN_SETTINGS   maven的setting.xml配置</li></ul><p><strong>注意K8sconfig变量类型为 File</strong> 文件内容就是集群的KubeConfig<br><img src="/img/article/20240819143506.png"><br><img src="/img/article/20240819145437.png"></p><p>Maven的setting.xml文件如下，需要替换成自己的私服即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="增加部署文件"><a href="#增加部署文件" class="headerlink" title="增加部署文件"></a>增加部署文件</h2><p>进入springboot项目仓库，创建 Dockerfile 、k8sdeploy_test.yaml 、k8sdeploy_prod.yaml<br>项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">项目名称</span><br><span class="line"> ├── src/main</span><br><span class="line"> │   └── java</span><br><span class="line"> │   └── resources</span><br><span class="line"> ├── pom.xml</span><br><span class="line"> ├── Dockerfile</span><br><span class="line"> ├── k8sdeploy_test.yaml</span><br><span class="line"> ├── k8sdeploy_prod.yaml</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> registry.cn-hangzhou.aliyuncs.com/blog/jre17</span><br><span class="line"><span class="keyword">MAINTAINER</span> dollcode</span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p>k8sdeploy_test.yaml 内容如下：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">APPLICATIONNAME</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">APPLICATIONNAME</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">APPLICATIONNAME</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">APPLICATIONNAME</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">APPLICATIONIMAGE</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPRING_PROFILES_ACTIVE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="string">APPLICATIONPORT</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">APPLICATIONNAME-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="string">APPLICATIONPORT</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">APPLICATIONPORT</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">APPLICATIONNAME</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><blockquote><p>k8sdeploy_prod.yaml 内容差不多 只是环境不一样，就不贴了。</p></blockquote><h2 id="编写CICD脚本"><a href="#编写CICD脚本" class="headerlink" title="编写CICD脚本"></a>编写CICD脚本</h2><p>依次点击 CICD -&gt; Editor 编辑脚本内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">maven_build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker_build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy_k8s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="comment"># 指定项目的端口和代码版本</span></span><br><span class="line">  <span class="attr">PROJECT_PORT:</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line">  <span class="attr">PROJECT_VERSION:</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line">  <span class="comment"># 指定maven-build配置路径</span></span><br><span class="line">  <span class="attr">MAVEN_CLI_OPTS:</span> <span class="string">&quot;-s /root/.m2/settings.xml&quot;</span></span><br><span class="line">  <span class="comment"># 定义docker镜像的tag命名</span></span><br><span class="line">  <span class="attr">REGISTRY_TAG:</span> <span class="string">&quot;ci-$CI_PIPELINE_ID&quot;</span></span><br><span class="line">  <span class="comment"># 定义docker镜像的命名  </span></span><br><span class="line">  <span class="attr">REGISTRY_APPNAME:</span> <span class="string">&quot;$DOCKER_REGISTRY/blog/$CI_PROJECT_NAME&quot;</span></span><br><span class="line">  <span class="comment"># 全局环境</span></span><br><span class="line">  <span class="attr">DEPLOY_ENV:</span> <span class="string">&quot;dev&quot;</span></span><br><span class="line">  <span class="comment"># K8s命名空间</span></span><br><span class="line">  <span class="attr">K8S_NAMESPACE:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前置脚本：设置不同分支使用不同的配置和镜像地址，部署到不同的K8s集群</span></span><br><span class="line"><span class="comment"># dev分支为测试环境部署：registry.cn-hangzhou.aliyuncs.com/blog_test/spring-service:ci-101</span></span><br><span class="line"><span class="comment"># dev分支为测试环境部署：registry.cn-hangzhou.aliyuncs.com/blog_prod/spring-service:ci-101</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">.m2/repository</span> <span class="string">~/.kube</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">&quot;$CI_COMMIT_BRANCH&quot;</span> <span class="string">==</span> <span class="string">&quot;dev&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">      <span class="string">export</span> <span class="string">DEPLOY_ENV=test;</span></span><br><span class="line">      <span class="string">mv</span> <span class="string">$K8S_KUBECONFIG_TEST</span>  <span class="string">$HOME/.kube/config;</span></span><br><span class="line">    <span class="string">elif</span> [ <span class="string">&quot;$CI_COMMIT_BRANCH&quot;</span> <span class="string">==</span> <span class="string">&quot;main&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">      <span class="string">export</span> <span class="string">DEPLOY_ENV=prod;</span></span><br><span class="line">      <span class="string">mv</span> <span class="string">$K8S_KUBECONFIG_PROD</span>  <span class="string">$HOME/.kube/config;</span></span><br><span class="line">    <span class="string">else</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;This branch is not configured for deployment.&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">exit</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line">    <span class="string">fi</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">export</span> <span class="string">REGISTRY_APPNAME=$DOCKER_REGISTRY/blog_$DEPLOY_ENV/$CI_PROJECT_NAME;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maven打包，注意image要改为自己项目JDK对应版本 如maven:3.8.6-jdk-11、 maven:3.8.6-jdk-8</span></span><br><span class="line"><span class="attr">mavenjar_job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">maven_build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.8.6-jdk-11</span></span><br><span class="line">  <span class="comment"># maven依赖做缓存</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">global-cache</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.m2/repository</span></span><br><span class="line">    <span class="attr">policy:</span> <span class="string">pull-push</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.m2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$JAVA_MAVEN_SETTINGS&quot;</span> <span class="string">&gt;</span> <span class="string">~/.m2/settings.xml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">$MAVEN_CLI_OPTS</span> <span class="string">clean</span> <span class="string">package</span> <span class="string">-DskipTests</span> <span class="string">-Dmaven.repo.local=.m2/repository</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">target/$CI_PROJECT_NAME-$PROJECT_VERSION.jar</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker镜像打包上传</span></span><br><span class="line"><span class="attr">container_job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">docker_build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:24.0.2</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="comment"># build镜像 并一个命名当前版本，一个命名latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--build-arg</span> <span class="string">JAR_FILE=&quot;target/$CI_PROJECT_NAME-$PROJECT_VERSION.jar&quot;</span> <span class="string">--tag</span> <span class="string">$REGISTRY_APPNAME:$REGISTRY_TAG</span> <span class="string">--tag</span> <span class="string">$REGISTRY_APPNAME:latest</span> <span class="string">.</span></span><br><span class="line">    <span class="comment"># 登录docker私服仓库</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">&quot;$DOCKER_REGISTRY_USER&quot;</span> <span class="string">-p</span> <span class="string">&quot;$DOCKER_REGISTRY_PASSWORD&quot;</span> <span class="string">$DOCKER_REGISTRY</span></span><br><span class="line">    <span class="comment"># 推送镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$REGISTRY_APPNAME:$REGISTRY_TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$REGISTRY_APPNAME:latest</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署K8S</span></span><br><span class="line"><span class="attr">deploy_job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy_k8s</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="comment"># 版本号要和K8s集群版本一致</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">bitnami/kubectl:1.28</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="comment"># 替换对应环境yaml中的项目端口、项目名称、项目镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">s/APPLICATIONPORT/$PROJECT_PORT/</span> <span class="string">k8sdeploy_$DEPLOY_ENV.yaml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">s/APPLICATIONNAME/$CI_PROJECT_NAME/</span> <span class="string">k8sdeploy_$DEPLOY_ENV.yaml</span></span><br><span class="line">    <span class="comment"># 因为镜像名称中包含特殊字符(/),所以使用%代替分隔符</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">s%APPLICATIONIMAGE%$REGISTRY_APPNAME:$REGISTRY_TAG%</span> <span class="string">k8sdeploy_$DEPLOY_ENV.yaml</span></span><br><span class="line">    <span class="comment"># 部署</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">k8sdeploy_$DEPLOY_ENV.yaml</span> <span class="string">--namespace</span> <span class="string">$K8S_NAMESPACE</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>提交代码 或者 手动触发 部署完成！！！<br><img src="/img/article/20240819162335.png"></p><h1 id="踩坑汇总"><a href="#踩坑汇总" class="headerlink" title="踩坑汇总"></a>踩坑汇总</h1><h2 id="Maven依赖缓存"><a href="#Maven依赖缓存" class="headerlink" title="Maven依赖缓存"></a>Maven依赖缓存</h2><p>如果没有设置依赖缓存，每一次都会重新拉取依赖jar。而Springboot的依赖是非常多的，每次拉取超级耗时。<br>这里有一个坑：<strong>gitlab CICD只能缓存项目工作空间下的目录。</strong>所以需要创建.m2&#x2F;repository 并且在maven build命令中指定目录</p><h2 id="bitnami-x2F-kubectl无法执行命令"><a href="#bitnami-x2F-kubectl无法执行命令" class="headerlink" title="bitnami&#x2F;kubectl无法执行命令"></a>bitnami&#x2F;kubectl无法执行命令</h2><p>在deploy_job执行中，日志报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Using docker image sha256:be85f4da59a1c49507de843111579c94b9adf3 for bitnami/kubectl:1.28 with digest bitnami/kubectl@sha256:9657fd84779759711e59a51f4993567562 ...</span><br><span class="line">E0816 09:35:39.752914       1 run.go:120] &quot;command failed&quot; err=&quot;unknown command \&quot;sh\&quot; for \&quot;kubectl\&quot;\n\nDid you mean this?\n\tset\n\tcp\n&quot;</span><br><span class="line">Cleaning up project directory and file based variables</span><br><span class="line">00:01</span><br><span class="line">ERROR: Job failed: exit code 1</span><br></pre></td></tr></table></figure><p>因为bitnami&#x2F;kubectl 镜像的默认入口点是 kubectl，因此执行 sh 命令时，它会认为这是一个 kubectl 的子命令，而不是一个 Shell 命令。<br>必须要显式覆盖镜像的入口点或命令，以便运行 sh。所以需要指定<code> entrypoint: [&quot;&quot;]</code></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Springboot </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ngrok内网穿透注册使用无需实名</title>
      <link href="/dashboard-ngrok.html"/>
      <url>/dashboard-ngrok.html</url>
      
        <content type="html"><![CDATA[<p>开箱即用的内网穿透的工具有很多很多，但是由于国内环境需要实名认证劝退了。发现dashboard.ngrok.com注册即用，带https。而且控制台体验特别好，简直是傻瓜式。引导做的太棒了！！！<br>所以这里简单记录一下，因为控制台的交互设计已经非常完善了。</p><h1 id="注册ngrok-com"><a href="#注册ngrok-com" class="headerlink" title="注册ngrok.com"></a>注册ngrok.com</h1><p>打开官网：<a href="https://dashboard.ngrok.com/">https://dashboard.ngrok.com</a> 用邮箱注册，然后邮件激活账号即可。</p><blockquote><p>最新情况： HTTP隧道可以直接用，TCP隧道需要绑卡</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You must add a credit or debit card before you can use TCP endpoints on a free account. </span><br><span class="line">We require a valid card as a way to combat abuse and keep the internet a safe place. </span><br><span class="line">This card will NOT be charged. Add a card to your account here: https://dashboard.ngrok.com/settings#id-verification</span><br></pre></td></tr></table></figure><h1 id="下载安装客户端"><a href="#下载安装客户端" class="headerlink" title="下载安装客户端"></a>下载安装客户端</h1><p>进入控制台之后，选择自己对应的平台客户端下载。这里以 Linux举例<br><img src="/img/article/20240808104856.png"><br><img src="/img/article/20240808105419.png"></p><p>将下载的客户端传输到机器上，解压并安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -xvzf ngrok-v3-stable-linux-amd64.tgz -C /usr/local/bin</span><br><span class="line"></span><br><span class="line">// 创建配置文件并授权token，命令直接在控制台复制即可，非常方便</span><br><span class="line">ngrok config add-authtoken xxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h1 id="直接启动穿透"><a href="#直接启动穿透" class="headerlink" title="直接启动穿透"></a>直接启动穿透</h1><p>可以直接使用客户端启动自己的穿透隧道，但是这样启动的域名是随机动态的。<br>每次都不一样，可以用下面的第二种方式生成一个固定的域名。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 启动http穿透80端口</span><br><span class="line">ngrok http http://localhost:80</span><br><span class="line">// 启动tcp穿透如ssh连接</span><br><span class="line">ngrok tcp 22</span><br></pre></td></tr></table></figure><h1 id="创建域名启动穿透"><a href="#创建域名启动穿透" class="headerlink" title="创建域名启动穿透"></a>创建域名启动穿透</h1><p>注意：免费用户只有一个域名额度！<br>创建一个Edges，选择自己的穿透类型 Web服务穿透选Http  SSH穿透选TCP。  并勾选生成域名<br><img src="/img/article/20240808111127.png"></p><p>再点击页面中的 -&gt; <strong>Start a Tunnel</strong> 蓝色按钮 -&gt; 会展示出启动命令，根据提示复制这个命令</p><h1 id="启动穿透隧道"><a href="#启动穿透隧道" class="headerlink" title="启动穿透隧道"></a>启动穿透隧道</h1><p>举例 WEB服务，启动一个nginx。端口80</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok tunnel --label edge=edghts_xxxxxxxx http://localhost:80</span><br></pre></td></tr></table></figure><p>执行之后会输出启动日志。浏览器访问控制台上的Endpoints域名，<br><img src="/img/article/20240808112624.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu设置grub密码实现加密开机启动</title>
      <link href="/ubuntu-grub-encrypt.html"/>
      <url>/ubuntu-grub-encrypt.html</url>
      
        <content type="html"><![CDATA[<p>先看效果，在机器开机进入引导时会先进入一个用户名密码验证界面，通过之后才会进入启动流程。并且如果想操作引导其他项，也必须输入密码。类似于密钥启动验证的效果！<br><img src="/img/article/20240807153041.png"></p><blockquote><p>假设我们设置用户名为：dollcode 密码为：123456</p></blockquote><h1 id="步骤-1：生成加密密码"><a href="#步骤-1：生成加密密码" class="headerlink" title="步骤 1：生成加密密码"></a>步骤 1：生成加密密码</h1><p><img src="/img/article/20240807150314.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> grub-mkpasswd-pbkdf2</span><br><span class="line">// 输入并二次确认密码后，会输出一个加密后的密码字符串，类似如下所示：</span><br><span class="line">PBKDF2 <span class="built_in">hash</span> of your password is grub.pbkdf2.sha512.10000.2932A1217B661566186EE6213A992F6296F947F44E2A52E01EC42B3C0DD079342363378E52A7C0307F78027595FDD9F72C4788E66B74F66D9B154957818CAE0D.FC379727A4D967F4F1C2A03B0284021E8F209253BA3380C6F9D04391C27FCB072DE367ADC64540B6EE809E261DF0EEB0EF0568CFA74FD383C77F2A05DD1EA50E</span><br></pre></td></tr></table></figure><p><em>复制这个字符串，只需要复制 <code>password is</code>后面的字符串密码，也就是从 grub 开始复制</em></p><h1 id="步骤-2：配置GRUB文件"><a href="#步骤-2：配置GRUB文件" class="headerlink" title="步骤 2：配置GRUB文件"></a>步骤 2：配置GRUB文件</h1><p>接下来，需要将生成的加密密码添加到 GRUB 配置文件中。设置用户名为：dollcode 密码为：123456<br><img src="/img/article/20240807152255.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1. 打开 /etc/grub.d/40_custom 文件进行编辑：</span><br><span class="line"><span class="built_in">sudo</span> vim /etc/grub.d/40_custom</span><br><span class="line">//2. 在文件尾部添加以下内容：设置用户和第一步的加密密码</span><br><span class="line"><span class="built_in">set</span> superusers=<span class="string">&quot;dollcode&quot;</span></span><br><span class="line">password_pbkdf2 dollcode grub.pbkdf2.sha512.10000.2932A1217B661566186EE6213A992F6296F947F44E2A52E01EC42B3C0DD079342363378E52A7C0307F78027595FDD9F72C4788E66B74F66D9B154957818CAE0D.FC379727A4D967F4F1C2A03B0284021E8F209253BA3380C6F9D04391C27FCB072DE367ADC64540B6EE809E261DF0EEB0EF0568CFA74FD383C77F2A05DD1EA50E</span><br></pre></td></tr></table></figure><p>保存并退出编辑器，然后更新 GRUB 配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure><p><img src="/img/article/20240807152654.png"></p><h1 id="步骤-3：重启系统并验证"><a href="#步骤-3：重启系统并验证" class="headerlink" title="步骤 3：重启系统并验证"></a>步骤 3：重启系统并验证</h1><p>只有输入配置的用户名和密码，才能进入引导系统。<br><img src="/img/article/20240807153041.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker自定义JDK17 JRE精简镜像</title>
      <link href="/jdk17-docker.html"/>
      <url>/jdk17-docker.html</url>
      
        <content type="html"><![CDATA[<p>由于官方的openJDK17镜像近500MB，属于太大，不利于微服务镜像打包部署。<br>所以自定义基于alpine 3.18 和 openjdk 17 制作JRE镜像，构建Springboot项目镜像(JRE是java运行环境，不包含开发工具所以小)。<br>先看结论，一共测试了三种方式。</p><blockquote><p>注意：只编译java SE平台的Jre环境在运行Springboot项目会有问题，精简过头也不行，少了依赖。<br>！！！推荐用jre17all，这是完整的JRE环境包，测试是完全没问题的。</p></blockquote><ul><li>jre17se 只构建了javaSE平台模块包的JRE环境的镜像</li><li>jre17all 构建了所有包模块的JRE环境的镜像</li><li>jre17   直接用adoptium下载的JRE来创建的镜像</li><li>openjdk  官方的镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker images</span><br><span class="line">jre17se          latest            cd9e997465f6        7 seconds ago      81MB</span><br><span class="line">jre17all         latest            8d7173e8cdd9        8 minutes ago      113MB</span><br><span class="line">jre17            latest            9c0b10d8c81d        1 hours ago        208MB</span><br><span class="line">openjdk          17                5f94f53bbced        2 hours ago        471MB</span><br></pre></td></tr></table></figure><blockquote><p>选型：</p></blockquote><ul><li>基础镜像apline 大小7MB</li><li>JDK17安装包有180MB，运行环境只需要JRE，所以这里直接从<a href="https://adoptium.net/">预编译OPENJDK</a>选 <a href="https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.9%2B9/OpenJDK17U-jre_x64_alpine-linux_hotspot_17.0.9_9.tar.gz">JRE下载</a></li></ul><h1 id="第一种直接使用已有的JRE创建镜像"><a href="#第一种直接使用已有的JRE创建镜像" class="headerlink" title="第一种直接使用已有的JRE创建镜像"></a>第一种直接使用已有的JRE创建镜像</h1><p>这里我做了测试，直接用adoptium构建好的JRE包，去做镜像的话，最后的大小居然有<code>200MB</code>。虽然比官方的OPENJDK的<code>470MB</code>要小一半。但是还不够精简。</p><blockquote><blockquote><blockquote><p>所以后面还是自已编译构建JRE包，可以直接跳到第二种方案查看&lt;&lt;&lt;</p></blockquote></blockquote></blockquote><p><img src="/img/article/20240802143757.png"><br>首先创建一个目录，将下载的Jre压缩包放入。如果网络访问github正常的话，也可以直接下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.9%2B9/OpenJDK17U-jre_x64_alpine-linux_hotspot_17.0.9_9.tar.gz</span><br></pre></td></tr></table></figure><p>创建Dockerfile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Alpine 3.18作为基础镜像</span></span><br><span class="line">FROM alpine:3.18</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制JDK压缩包到镜像中</span></span><br><span class="line">COPY OpenJDK17U-jre_x64_alpine-linux_hotspot_17.0.9_9.tar.gz /tmp/openjdk.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=/opt/jdk</span><br><span class="line">ENV PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新Alpine的软件源为阿里云</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;https://mirrors.aliyun.com/alpine/v3.18/main&quot;</span> &gt; /etc/apk/repositories \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;https://mirrors.aliyun.com/alpine/v3.18/community&quot;</span> &gt;&gt; /etc/apk/repositories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的软件包，包括时区设置和字体支持</span></span><br><span class="line">RUN apk add --no-cache fontconfig libretls ttf-dejavu tzdata \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf /var/cache/apk/* \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone \</span><br><span class="line">    &amp;&amp; <span class="built_in">ln</span> -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压JDK并清理无用文件</span></span><br><span class="line">RUN <span class="built_in">set</span> -eux; \</span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span>; \</span><br><span class="line">    tar --extract \</span><br><span class="line">        --file /tmp/openjdk.tar.gz \</span><br><span class="line">        --directory <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> \</span><br><span class="line">        --strip-components 1 \</span><br><span class="line">        --no-same-owner \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -f /tmp/openjdk.tar.gz \</span><br><span class="line">    &amp;&amp; find <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> -name <span class="string">&#x27;*.diz&#x27;</span> -delete \</span><br><span class="line">    &amp;&amp; find <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> -name <span class="string">&#x27;*.txt&#x27;</span> -delete \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span>/man \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span>/legal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理缓存和临时文件</span></span><br><span class="line">RUN <span class="built_in">rm</span> -rf /var/cache/apk/* \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf /tmp/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：打印Java版本信息</span></span><br><span class="line">CMD [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo &#x27;Java version:&#x27; &amp;&amp; java -version &amp;&amp; echo &#x27;Current date and time:&#x27; &amp;&amp; date&quot;</span>]</span><br></pre></td></tr></table></figure><p>执行build，并启动容器验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t jre17 .</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 执行会打印JAVA版本信息和时间信息</span><br><span class="line">docker run --<span class="built_in">rm</span> jre17</span><br></pre></td></tr></table></figure><p>这种方式构建的是最全的，但是感觉还是有点大，所以还是自定义吧！</p><h1 id="第二种自己构建JRE环境包"><a href="#第二种自己构建JRE环境包" class="headerlink" title="第二种自己构建JRE环境包"></a>第二种自己构建JRE环境包</h1><p>思路：首先用JDK包构建自定义的JRE环境包，再将JRE包制作到镜像里。需要采用Docker的多阶段构建，可以减少镜像大小。<br>老样子 <em>先下载对应Alpine平台的的包，放到同级目录。</em>如下：<br><img src="/img/article/20240802141717.png"><br>Dockerfile文件内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：使用基础镜像来下载和安装JDK</span></span><br><span class="line">FROM alpine:3.18 as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 JDK并复制本地压缩包</span></span><br><span class="line">ARG JDK_DIR=/usr/lib/jvm/java17</span><br><span class="line">COPY OpenJDK17U-jdk_x64_alpine-linux_hotspot_17.0.12_7.tar.gz ./jdk.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的工具，binutils 是使用 jlink 所需的工具</span></span><br><span class="line">RUN <span class="built_in">set</span> -eux; \</span><br><span class="line">    apk add --no-cache tar gzip binutils;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压 JDK</span></span><br><span class="line">RUN <span class="built_in">set</span> -eux; \</span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$&#123;JDK_DIR&#125;</span>; \</span><br><span class="line">    tar --extract \</span><br><span class="line">        --file jdk.tar.gz \</span><br><span class="line">        --directory <span class="variable">$&#123;JDK_DIR&#125;</span> \</span><br><span class="line">        --strip-components 1 \</span><br><span class="line">        --no-same-owner;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=<span class="variable">$&#123;JDK_DIR&#125;</span></span><br><span class="line">ENV PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 jlink 创建自定义JRE --add-modules这个参数传全部模块：ALL-MODULE-PATH 或者指定只包含JAVA SE平台下的模块：java.se</span></span><br><span class="line">RUN <span class="built_in">set</span> -eux; \</span><br><span class="line">    <span class="variable">$JAVA_HOME</span>/bin/jlink \</span><br><span class="line">         --module-path <span class="variable">$&#123;JAVA_HOME&#125;</span>/jmods \</span><br><span class="line">         --add-modules ALL-MODULE-PATH \</span><br><span class="line">         --strip-debug \</span><br><span class="line">         --no-man-pages \</span><br><span class="line">         --no-header-files \</span><br><span class="line">         --compress=2 \</span><br><span class="line">         --output /jre17;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：创建最终镜像</span></span><br><span class="line">FROM alpine:3.18</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 JDK 安装目录</span></span><br><span class="line">ARG JDK_HOME_DIR=/opt/java/jdk17</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制自定义 JRE 到新镜像</span></span><br><span class="line">COPY --from=builder /jre17 <span class="variable">$&#123;JDK_HOME_DIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=<span class="variable">$&#123;JDK_HOME_DIR&#125;</span></span><br><span class="line">ENV PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置其它环境变量</span></span><br><span class="line">ENV TZ=<span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">ENV LANG=C.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Alpine 的软件源为阿里云</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;https://mirrors.aliyun.com/alpine/v3.18/main&quot;</span> &gt; /etc/apk/repositories \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;https://mirrors.aliyun.com/alpine/v3.18/community&quot;</span> &gt;&gt; /etc/apk/repositories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的软件包，包括时区设置和字体支持</span></span><br><span class="line">RUN apk add --no-cache fontconfig libretls ttf-dejavu tzdata musl-locales musl-locales-lang ca-certificates p11-kit-trust \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf /var/cache/apk/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 Java 安装和显示当前时间 不需要可以删除这一行</span></span><br><span class="line">CMD [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo &#x27;Java version:&#x27; &amp;&amp; java -version &amp;&amp; echo &#x27;Current date and time:&#x27; &amp;&amp; date&quot;</span>]</span><br></pre></td></tr></table></figure><h1 id="部署并验证"><a href="#部署并验证" class="headerlink" title="部署并验证"></a>部署并验证</h1><p>执行build，并启动容器验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t jre17all .</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 执行会打印JAVA版本信息和时间信息</span><br><span class="line">docker run --<span class="built_in">rm</span> jre17all</span><br><span class="line">// 打标签 上传到私有镜像仓库</span><br><span class="line">docker tag jre17all registry.cn-hangzhou.aliyuncs.com/blog/jre17</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/blog/jre17</span><br></pre></td></tr></table></figure><p>然后拿一个Springboot微服务验证一下<br>修改微服务Dockerfile首行的基础镜像为自定义的JRE <code>from registry.cn-hangzhou.aliyuncs.com/blog/jre17</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/blog/jre17</span><br><span class="line">MAINTAINER dollcode</span><br><span class="line">ARG JAR_FILE</span><br><span class="line">COPY <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose一键部署yapi接口文档</title>
      <link href="/docker-yapi.html"/>
      <url>/docker-yapi.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/YMFE/yapi">yapi</a> 已经很久没人更新和维护，但界面和功能还是挺不错的，支持从Swagger快速导入更新接口，适合团队接口文档管理和存档。<br>官方并没有直接封装docker镜像，但是有一个二次开发的 <a href="https://github.com/yapi-pro/yapi">YAPIPro镜像</a>。<a href="https://hub.docker.com/r/yapipro/yapi">https://hub.docker.com/r/yapipro/yapi</a> 提供了部署文档，但是步骤有点多。于是动手自定义了docker-compose.yml实现快速部署。</p><h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p>机器已安装docker-compose</p><p>创建一个目录，接下来安装操作都在这个目录下操作。目录名称就叫 <code>yapi</code> 吧</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> yapi</span><br><span class="line"><span class="built_in">cd</span> yapi</span><br></pre></td></tr></table></figure><p>我们需要安装 <em>yapi</em> 和 <em>mongodb</em> 两个容器。并且需要提前创建mongodb的用户信息，并设置用户名和密码<br>所以需要准备一个脚本文件 <code>init-mongo.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db = db.<span class="title function_">getSiblingDB</span>(<span class="string">&#x27;yapi&#x27;</span>);</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">createUser</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;yapiblog&quot;</span>,</span><br><span class="line">  <span class="attr">pwd</span>: <span class="string">&quot;yapi666&quot;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [&#123; <span class="attr">role</span>: <span class="string">&quot;dbAdmin&quot;</span>, <span class="attr">db</span>: <span class="string">&quot;yapi&quot;</span> &#125;,&#123; <span class="attr">role</span>: <span class="string">&quot;readWrite&quot;</span>, <span class="attr">db</span>: <span class="string">&quot;yapi&quot;</span> &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>还需要准备yapi的配置文件 <code>config.json</code> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;adminAccount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexiaohei1024@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span><span class="number">120000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;db&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;servername&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mongodb&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;DATABASE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yapi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">27017</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yapiblog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yapi666&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;authSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mail&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smtp.gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">465</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexiaohei1024@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>准备之后的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yapi</span><br><span class="line"> ├── config.json</span><br><span class="line"> ├── docker-compose.yml</span><br><span class="line"> ├── init-mongo.js</span><br></pre></td></tr></table></figure><h1 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h1><p><strong>因为yapi流程需要先初始化数，再二次启动运行。所以yml中需要增加一个一次性容器用于初始化数据库</strong></p><p>docker-compose.yml 文件内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongodb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:5.0.14</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_DATABASE:</span> <span class="string">yapi</span></span><br><span class="line">      <span class="comment"># 设置ROOT用户和密码</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">yapipro</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">yapipro1024</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mongo-data:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--auth</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个容器只需要执行一次即可</span></span><br><span class="line">  <span class="attr">yapi-init:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yapipro/yapi:1.9.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yapi-init</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.json:/yapi/config.json</span></span><br><span class="line">    <span class="comment"># 设置延迟执行安装初始化</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 15 &amp;&amp; node server/install.js&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">yapi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yapipro/yapi:1.9.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yapi</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.json:/yapi/config.json</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 30 &amp;&amp; node server/app.js&quot;</span>]</span><br></pre></td></tr></table></figure><h1 id="启动验证"><a href="#启动验证" class="headerlink" title="启动验证"></a>启动验证</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>初始化管理员账号在上面的 config.json 配置中 <a href="mailto:&#x68;&#x65;&#x78;&#x69;&#97;&#111;&#104;&#x65;&#x69;&#x31;&#48;&#x32;&#x34;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#x68;&#x65;&#x78;&#x69;&#97;&#111;&#104;&#x65;&#x69;&#x31;&#48;&#x32;&#x34;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a>，初始密码是 yapi.pro，<br>可以登录后进入个人中心修改。  访问 IP:3000登录即可！</p><p>关于MongoDB版本选择：长时间运行且对稳定性要求高的生产环境：推荐使用 MongoDB 4.4.x 或 5.0.x，这些版本经过了大量验证，社区反馈也较好</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB-GPT本地部署体验讯飞星火大模型V3.5</title>
      <link href="/dbgpt-xunfeispark.html"/>
      <url>/dbgpt-xunfeispark.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>首先我们从 DB-GPT官网，可以得到的<a href="https://docs.dbgpt.site/docs/latest/quickstart">https://docs.dbgpt.site/docs/latest/quickstart</a><br>DB-GPT是一个开源的AI原生数据应用开发框架(AI Native Data App Development framework with AWEL(Agentic Workflow Expression Language) and Agents)。目的是构建大模型领域的基础设施，通过开发多模型管理(SMMF)、Text2SQL效果优化、RAG框架以及优化、Multi-Agents框架协作、AWEL(智能体工作流编排)等多种技术能力，让围绕数据库构建大模型应用更简单，更方便。<br>数据3.0 时代，基于模型、数据库，企业&#x2F;开发者可以用更少的代码搭建自己的专属应用</p><p>本次 我们通过代理模型方式，使用讯飞星火大模型3.5版本，来进行验证部署。</p><blockquote><p>需要提前将Miniconda环境安装</p></blockquote><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>首先根据官方文档说明，下载源码，并配置环境(python &gt;&#x3D; 3.10)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 拉取源码</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/eosphoros-ai/DB-GPT.git</span><br><span class="line">// 进入项目目录</span><br><span class="line"><span class="built_in">cd</span> DB-GPT</span><br></pre></td></tr></table></figure><p>创建环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 创建环境</span><br><span class="line">conda create -n dbgpt_env python=3.10</span><br><span class="line">// 激活环境</span><br><span class="line">conda activate dbgpt_env</span><br><span class="line">// 安装依赖</span><br><span class="line">pip install -e <span class="string">&quot;.[default]&quot;</span></span><br><span class="line">// 复制环境配置文件</span><br><span class="line"><span class="built_in">cp</span> .env.template  .<span class="built_in">env</span></span><br></pre></td></tr></table></figure><h1 id="文本向量模型配置"><a href="#文本向量模型配置" class="headerlink" title="文本向量模型配置"></a>文本向量模型配置</h1><p>在项目目录下，创建一个models文件夹，用来存放模型文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> models and <span class="built_in">cd</span> models</span><br></pre></td></tr></table></figure><blockquote><p>下载模型，国内访问不了<a href="https://huggingface.co/GanymedeNil/text2vec-large-chinese">https://huggingface.co/GanymedeNil/text2vec-large-chinese</a><br>可以替换为镜像站<a href="https://hf-mirror.com/GanymedeNil/text2vec-large-chinese">https://hf-mirror.com/GanymedeNil/text2vec-large-chinese</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://hf-mirror.com/GanymedeNil/text2vec-large-chinese</span><br></pre></td></tr></table></figure><h1 id="配置星火3-5模型"><a href="#配置星火3-5模型" class="headerlink" title="配置星火3.5模型"></a>配置星火3.5模型</h1><p>因为源码中没有3.5的API，需要手动修改一下代码，主要需要修改<code>/DB-GPT/dbgpt/model/proxy/llms/spark.py</code><br><strong>直接将3.1改为3.5即可使用</strong><br><img src="/img/article/20240419-115307.png"><br><img src="/img/article/20240419-115418.png"></p><p>然后在<code>.env</code>文件中 将以下星火相关的配置替换即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LLM_MODEL=spark_proxyllm</span><br><span class="line">XUNFEI_SPARK_API_VERSION=v3.5</span><br><span class="line">XUNFEI_SPARK_APPID=xx</span><br><span class="line">XUNFEI_SPARK_API_KEY=xxx</span><br><span class="line">XUNFEI_SPARK_API_SECRET=xxx</span><br></pre></td></tr></table></figure><h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dbgpt/app/dbgpt_server.py</span><br></pre></td></tr></table></figure><p><img src="/img/article/20240419-171912.png"><br>看到日志输出启动完成，打开浏览器访问<a href="http://localhost:5670/">http://localhost:5670</a><br><img src="/img/article/20240420-153402.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL UPSERT(insert on conflict do)和pgpass使用说明</title>
      <link href="/pgsql-insertup-new.html"/>
      <url>/pgsql-insertup-new.html</url>
      
        <content type="html"><![CDATA[<p>PostgreSQL INSERT INTO ON CONFLICT语法。UPSERT(insert on conflict do) 记录存在就更新，不存在就更新。<br>在某些业务场景中，需要把插入语句和更新组合到一起，一条SQL同时完成插入和更新逻辑。<br>这个时候就需要用到 <code>INSERT ON CONFLICT</code>语法特性了。可以实现根据主键或者唯一约束，来插入或指定条件更新。</p><h1 id="官方语法说明"><a href="#官方语法说明" class="headerlink" title="官方语法说明"></a>官方语法说明</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Command:     <span class="keyword">INSERT</span>  </span><br><span class="line">Description: <span class="keyword">create</span> <span class="keyword">new</span> <span class="keyword">rows</span> <span class="keyword">in</span> a <span class="keyword">table</span>  </span><br><span class="line">Syntax:  </span><br><span class="line">[ <span class="keyword">WITH</span> [ <span class="keyword">RECURSIVE</span> ] with_query [, ...] ]  </span><br><span class="line"><span class="keyword">INSERT INTO</span> table_name [ <span class="keyword">AS</span> alias ] [ ( column_name [, ...] ) ]  </span><br><span class="line">    &#123; <span class="keyword">DEFAULT</span> <span class="keyword">VALUES</span> <span class="operator">|</span> <span class="keyword">VALUES</span> ( &#123; expression <span class="operator">|</span> <span class="keyword">DEFAULT</span> &#125; [, ...] ) [, ...] <span class="operator">|</span> query &#125;  </span><br><span class="line">    [ <span class="keyword">ON</span> CONFLICT [ conflict_target ] conflict_action ]  </span><br><span class="line">    [ RETURNING <span class="operator">*</span> <span class="operator">|</span> output_expression [ [ <span class="keyword">AS</span> ] output_name ] [, ...] ]  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">where</span> conflict_target can be <span class="keyword">one</span> <span class="keyword">of</span>:  </span><br><span class="line">  </span><br><span class="line">    ( &#123; index_column_name <span class="operator">|</span> ( index_expression ) &#125; [ <span class="keyword">COLLATE</span> <span class="keyword">collation</span> ] [ opclass ] [, ...] ) [ <span class="keyword">WHERE</span> index_predicate ]  </span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">CONSTRAINT</span> constraint_name  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">and</span> conflict_action <span class="keyword">is</span> <span class="keyword">one</span> <span class="keyword">of</span>:  </span><br><span class="line">  </span><br><span class="line">    DO NOTHING  </span><br><span class="line">    DO <span class="keyword">UPDATE</span> <span class="keyword">SET</span> &#123; column_name <span class="operator">=</span> &#123; expression <span class="operator">|</span> <span class="keyword">DEFAULT</span> &#125; <span class="operator">|</span>  </span><br><span class="line">                    ( column_name [, ...] ) <span class="operator">=</span> ( &#123; expression <span class="operator">|</span> <span class="keyword">DEFAULT</span> &#125; [, ...] ) <span class="operator">|</span>  </span><br><span class="line">                    ( column_name [, ...] ) <span class="operator">=</span> ( sub<span class="operator">-</span><span class="keyword">SELECT</span> )  </span><br><span class="line">                  &#125; [, ...]  </span><br><span class="line">              [ <span class="keyword">WHERE</span> <span class="keyword">condition</span> ]  </span><br></pre></td></tr></table></figure><p>假如我们有这样一张日志表，要同时实现写入和更新。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> user_log_info (</span><br><span class="line">    log_id text <span class="keyword">NOT NULL</span>,</span><br><span class="line">    log_name text,</span><br><span class="line">    log_path text,</span><br><span class="line">    log_size <span class="type">bigint</span>,</span><br><span class="line">    log_time <span class="type">timestamp</span>,</span><br><span class="line">    create_time <span class="type">timestamp</span>,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (log_id,log_time)</span><br><span class="line">) </span><br></pre></td></tr></table></figure><h1 id="根据主键新增或更新"><a href="#根据主键新增或更新" class="headerlink" title="根据主键新增或更新"></a>根据主键新增或更新</h1><blockquote><p>符合写入日志时间比当前记录新，才执行写入更新</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> user_log_info</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;demo001&#x27;</span>, <span class="string">&#x27;open1&#x27;</span>, <span class="string">&#x27;/logs/a.log&#x27;</span>, <span class="number">30</span>, TO_TIMESTAMP( <span class="number">1713509590</span> ), <span class="built_in">LOCALTIMESTAMP</span> ) <span class="keyword">ON</span> CONFLICT ( log_id, log_time ) DO</span><br><span class="line"><span class="keyword">UPDATE</span> </span><br><span class="line"><span class="keyword">SET</span> log_name <span class="operator">=</span> EXCLUDED.log_name,</span><br><span class="line">log_path <span class="operator">=</span> EXCLUDED.log_path,</span><br><span class="line">log_size <span class="operator">=</span> EXCLUDED.log_size,</span><br><span class="line">log_time <span class="operator">=</span> EXCLUDED.log_time,</span><br><span class="line">create_time <span class="operator">=</span> EXCLUDED.create_time </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">EXCLUDED.log_time <span class="operator">&gt;</span> user_log_info.log_time</span><br></pre></td></tr></table></figure><h1 id="根据符合条件才更新"><a href="#根据符合条件才更新" class="headerlink" title="根据符合条件才更新"></a>根据符合条件才更新</h1><blockquote><p>举例：符合日志size大小，比之前大才会更新，SQL如下</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> user_log_info</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;demo001&#x27;</span>, <span class="string">&#x27;open1&#x27;</span>, <span class="string">&#x27;/logs/a.log&#x27;</span>, <span class="number">30</span>, TO_TIMESTAMP( <span class="number">1713509590</span> ), <span class="built_in">LOCALTIMESTAMP</span> ) <span class="keyword">ON</span> CONFLICT ( log_id, log_time ) DO</span><br><span class="line"><span class="keyword">UPDATE</span> </span><br><span class="line"><span class="keyword">SET</span> log_name <span class="operator">=</span> EXCLUDED.log_name,</span><br><span class="line">log_path <span class="operator">=</span> EXCLUDED.log_path,</span><br><span class="line">log_size <span class="operator">=</span> EXCLUDED.log_size,</span><br><span class="line">log_time <span class="operator">=</span> EXCLUDED.log_time,</span><br><span class="line">create_time <span class="operator">=</span> EXCLUDED.create_time </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">EXCLUDED.log_size <span class="operator">&gt;</span> user_log_info.log_size</span><br></pre></td></tr></table></figure><h1 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h1><p>相当于我们在写入数据时，可以像写查询一样 带上WHERE条件，实现符合条件才更新</p><h1 id="PGSQL定时任务实现"><a href="#PGSQL定时任务实现" class="headerlink" title="PGSQL定时任务实现"></a>PGSQL定时任务实现</h1><p>cron + pgpass<br>利用shell脚本 + Linux定时任务，去定时执行清理日志表</p><h2 id="首先配置命令行免密登录"><a href="#首先配置命令行免密登录" class="headerlink" title="首先配置命令行免密登录"></a>首先配置命令行免密登录</h2><p>根据Postgres的官方文档配置.pgpass。</p><blockquote><p>文件内容格式如下：127.0.0.1:5432:库名:用户:密码</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">登录服务器，在用户主目录中创建`.pgpass`文件配置</span><br><span class="line">vi .pgpass</span><br><span class="line">127.0.0.1:5432:demo_test:postgres:123456</span><br><span class="line"></span><br><span class="line">// 授权当前用户可见</span><br><span class="line"><span class="built_in">chmod</span> 600 .pgpass</span><br><span class="line"></span><br><span class="line">// 执行验证测试，查询连接用户数SQL</span><br><span class="line">/usr/pgsql-13/bin/psql -h 127.0.0.1 -p 5432 -d demo_test  -U postgres  -c <span class="string">&quot;select COUNT(*) from pg_stat_activity&quot;</span></span><br></pre></td></tr></table></figure><h2 id="编写shell脚本封装SQL"><a href="#编写shell脚本封装SQL" class="headerlink" title="编写shell脚本封装SQL"></a>编写shell脚本封装SQL</h2><p>vim pgcron.sh。文件内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行方法处理</span></span><br><span class="line"><span class="function"><span class="title">execpgsql</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">  starttime=`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M.%S&quot;</span>` </span><br><span class="line">  result=$(/usr/pgsql-13/bin/psql -h 127.0.0.1 -p 5432 -d demo_test  -U postgres  -c <span class="string">&quot;<span class="variable">$1</span>&quot;</span>)</span><br><span class="line">  endtime=`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M.%S&quot;</span>`</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;[开始执行:<span class="variable">$starttime</span>&quot;</span> <span class="string">&quot;执行结束:<span class="variable">$endtime</span>]&quot;</span> <span class="string">&quot;SQL:<span class="variable">$1</span>&quot;</span> <span class="string">&quot;结果:<span class="variable">$result</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定时删除表</span></span><br><span class="line">sql=<span class="string">&quot;DROP TABLE user_log_info&quot;</span></span><br><span class="line">execpgsql <span class="string">&quot;<span class="variable">$sql</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>再将这个脚本加入 crontab，并设定执行周期</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建PostgreSQL主从架构</title>
      <link href="/primary-or-secondary-postgresql.html"/>
      <url>/primary-or-secondary-postgresql.html</url>
      
        <content type="html"><![CDATA[<p>PostgreSQL是一个功能非常强大的、源代码开放的客户&#x2F;服务器关系型数据库管理系统（RDBMS），被业界誉为“先进的开源数据库”，支持NoSQL数据类型，主要面向企业复杂查询SQL的OLTP业务场景。<br>并且提供PostGIS地理信息引擎，也是我本次使用它的原因。经常在网上看到“PostgreSQL —— 世界上最流行的数据库”<br>这一次 从零开始 搭建PG主从架构，做读写分离。</p><h1 id="1-配置PostgreSQL下载源"><a href="#1-配置PostgreSQL下载源" class="headerlink" title="1. 配置PostgreSQL下载源"></a>1. 配置PostgreSQL下载源</h1><p>首先准备两台服务器，安装PostgreSQL主从。版本选择这块，选了中间版本<code>13</code> (详细版本是：13.12)。各版本信息可以在官网查看：<a href="https://www.postgresql.org/docs/">https://www.postgresql.org/docs/</a><br><img src="/img/article/20230923155410.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 首先下载PostgreSQL的RPM文件包</span><br><span class="line">wget --no-check-certificate https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line">// 安装RPM包</span><br><span class="line">rpm -ivh pgdg-redhat-repo-latest.noarch.rpm</span><br></pre></td></tr></table></figure><h1 id="2-安装PostgreSQL"><a href="#2-安装PostgreSQL" class="headerlink" title="2. 安装PostgreSQL"></a>2. 安装PostgreSQL</h1><p>根据自己业务需要，除了sever包之外，这里我还会多安装两个包。（如果不需要可以不装）</p><ul><li>postgresql13-server：数据库</li><li>postgresql13-contrib：自定义函数需要通过contrib模块进行扩展</li><li>pg_cron_13：PostgreSQL定时任务插件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">yum install postgresql13-server postgresql13-contrib pg_cron_13 -y</span><br></pre></td></tr></table></figure><h2 id="自定义数据存储目录"><a href="#自定义数据存储目录" class="headerlink" title="自定义数据存储目录"></a>自定义数据存储目录</h2><p>默认的存储目录是<code>/var/lib/pgsql/13/data</code>。可以修改为自定义</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/postgresql-13.service</span><br></pre></td></tr></table></figure><p><img src="/img/article/20230914102117.png"><br>修改默认的存储目录，然后重新加载一次服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="配置服务器postgres用户密码"><a href="#配置服务器postgres用户密码" class="headerlink" title="配置服务器postgres用户密码"></a>配置服务器postgres用户密码</h2><p>因为安装PG数据库之后 会自动创建postgres用户，可以设置一下密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置postgres用户密码，回车之后输入密码确认即可</span><br><span class="line">passwd postgres</span><br></pre></td></tr></table></figure><p><strong>至此 在两台机器上 都执行完成这些命令之后，准备工作就差不多完成了。</strong></p><h1 id="主库搭建"><a href="#主库搭建" class="headerlink" title="主库搭建"></a>主库搭建</h1><p>首先初始化数据库，并配置启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 初始化数据库</span><br><span class="line">/usr/pgsql-13/bin/postgresql-13-setup initdb</span><br><span class="line">// 启动</span><br><span class="line">systemctl start postgresql-13.service</span><br><span class="line">// 设置服务开机自启动</span><br><span class="line">systemctl <span class="built_in">enable</span> postgresql-13.service</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>配置文件有很多选项需要优化，优化放到最后说，搭建我们只需要注意三个配置即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 编辑postgresql.conf</span><br><span class="line">vim /var/lib/pgsql/13/data/postgresql.conf</span><br></pre></td></tr></table></figure><p>listen_addresses为*，max_connections调大到500，wal_level决定多少信息写入到 WAL中。默认值是replica</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses = &#x27;*&#x27;</span><br><span class="line">max_connections = 500</span><br><span class="line">wal_level = replica</span><br></pre></td></tr></table></figure><h2 id="创建主从复制账号"><a href="#创建主从复制账号" class="headerlink" title="创建主从复制账号"></a>创建主从复制账号</h2><p>登录到PG，并创建用于主从复制的账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 登录postgres用户</span><br><span class="line">su - postgres</span><br><span class="line"></span><br><span class="line">// 当显示-bash-4.2$时表示成功登录，然后输入以下命令进入PostgreSQL交互终端</span><br><span class="line">psql</span><br><span class="line"></span><br><span class="line">// 为用户postgres设置密码</span><br><span class="line">ALTER USER postgres WITH PASSWORD <span class="string">&#x27;admin123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">// 创建数据库账号slavereplica，并设置密码及登录权限和备份权限。</span><br><span class="line">CREATE ROLE slavereplica login replication encrypted password <span class="string">&#x27;slaver123&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在pg_hba.conf 中增加一行从库节点机器IP段。自己查看服务器IP和内网网段。方法配置trust表示直接信任</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/pgsql/13/data/pg_hba.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    replication     slavereplica    192.168.0.0/16           trust</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 全部配置完成之后重新启动</span><br><span class="line">systemctl restart postgresql-13.service</span><br></pre></td></tr></table></figure><p><strong>主库的配置就全部完成了，接下来是从库的操作了</strong></p><h1 id="从库搭建"><a href="#从库搭建" class="headerlink" title="从库搭建"></a>从库搭建</h1><p>从库的配置比较简单了，迁移主库数据就可以了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 初始化数据库</span><br><span class="line">/usr/pgsql-13/bin/postgresql-13-setup initdb</span><br><span class="line"></span><br><span class="line">// 从节点 清空data 目录</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/pgsql/13/date/*</span><br><span class="line"></span><br><span class="line">// 复制主节点data数据: IP为主库的机器IP</span><br><span class="line"><span class="built_in">sudo</span> -u postgres pg_basebackup -h 192.168.31.190 -p 5432 -U slavereplica -X stream -D /var/lib/pgsql/13/data -R -P</span><br></pre></td></tr></table></figure><blockquote><p>备份完成，会在数据库实例目录下自动生成standby.signal“信号”文件，并在postgresql.auto.conf文件写入了主库的连接信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 启动从库</span><br><span class="line">systemctl start postgresql-13.service</span><br><span class="line"></span><br><span class="line">// 验证是否为从节点，会得到t，即<span class="literal">true</span>，为从节点</span><br><span class="line"><span class="built_in">sudo</span> -u postgres /usr/pgsql-13/bin/psql -c <span class="string">&quot;select pg_is_in_recovery()&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pg_is_in_recovery </span><br><span class="line">-------------------</span><br><span class="line"> t</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>同时在主库机器执行以下命令 可以查看到集群状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -u postgres /usr/pgsql-13/bin/psql -c <span class="string">&quot;select * from pg_stat_replication&quot;</span></span><br></pre></td></tr></table></figure><h1 id="用户访问权限配置"><a href="#用户访问权限配置" class="headerlink" title="用户访问权限配置"></a>用户访问权限配置</h1><p>如果需要外网访问，需要配置权限。<br>编辑pg_hba.conf文件，新增一行 允许所有用户所有库所有IP访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    all             all             0.0.0.0/0               scram-sha-256</span><br></pre></td></tr></table></figure><blockquote><p><strong>这是最省事的方法，但是不太安全，建议是单个用户单个配置</strong></p></blockquote><ul><li>第一列：类型 （host固定）</li><li>第二列：数据库 （all表示所有数据库，可以单独设置库名）</li><li>第三列：用户  （all表示所有用户，可以单独设置用户）</li><li>第四列：IP-CIDR表达式  （0.0.0.0&#x2F;0表示不限制）</li><li>第五列：认证方式 （scram-sha-256&#x3D;密码认证；trust&#x3D;直接信任）</li></ul><h1 id="postgresql-conf配置优化"><a href="#postgresql-conf配置优化" class="headerlink" title="postgresql.conf配置优化"></a>postgresql.conf配置优化</h1><p>数据库的配置，需要根据服务器性能合理配置。这里推荐一个参考项目：填入机器配置，可以自动生成对于的数据库配置信息(可以参考)<br>项目地址：<a href="https://pgtune.leopard.in.ua/">https://pgtune.leopard.in.ua</a><br><img src="/img/article/20230923170550.png"></p><h2 id="配置信息说明"><a href="#配置信息说明" class="headerlink" title="配置信息说明"></a>配置信息说明</h2><p>持续完善中。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">max_connections = 1000# 最大连接数</span><br><span class="line">shared_buffers = 4GB# 建议的设置值为机器总内存大小的1/4</span><br><span class="line">effective_cache_size = 8GB # 缓存数据大小</span><br><span class="line"></span><br><span class="line">max_worker_processes = 8# 最大后台进程数</span><br></pre></td></tr></table></figure><h1 id="pgadmin管理端"><a href="#pgadmin管理端" class="headerlink" title="pgadmin管理端"></a>pgadmin管理端</h1><p>数据库管理工具这一块，可以使用pgadmin。用docker可以快速搭建好，这样就可以通过web端在游览器管理数据库了<br><a href="https://www.pgadmin.org/download/pgadmin-4-container/">https://www.pgadmin.org/download/pgadmin-4-container/</a></p><p>Docker命令如下：配置了管理员的登录邮箱和密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name <span class="string">&quot;pgadmin4&quot;</span> \</span><br><span class="line">-p 8080:80 \</span><br><span class="line">    -e <span class="string">&quot;PGADMIN_DEFAULT_EMAIL=admin@163.com&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;PGADMIN_DEFAULT_PASSWORD=admin123&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;PGADMIN_LISTEN_ADDRESS=0.0.0.0&quot;</span> \</span><br><span class="line">    -d dpage/pgadmin4</span><br></pre></td></tr></table></figure><p>启动成功之后，登录pgadmin并配置数据库的连接信息之后，就可以在WEB端对数据库进行监控和管理了。</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s搭建Flink集群并用StreamPark管理</title>
      <link href="/k8s-flink-cluster.html"/>
      <url>/k8s-flink-cluster.html</url>
      
        <content type="html"><![CDATA[<p>前面文章中，成功搭建了K8s集群。这篇文章就开始来搭建组件了！</p><p>实时即未来 Apache Flink被普遍认为是下一代大数据流计算引擎。官网地址：<a href="https://flink.apache.org/">https://flink.apache.org</a><br><strong>Apache StreamPark</strong>之前也叫做 <strong>Streamx</strong>。是Flink开发利器。官网地址：<a href="https://streampark.apache.org/">https://streampark.apache.org</a></p><p>所以本文内容：K8s搭建Flink集群并用StreamX管理。</p><h1 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h1><p>官方文档地址如下：</p><ul><li>K8s Flink : <a href="https://nightlies.apache.org/flink/flink-docs-stable/docs/deployment/resource-providers/native_kubernetes">https://nightlies.apache.org/flink/flink-docs-stable/docs/deployment/resource-providers/native_kubernetes</a></li><li>StreamX : <a href="https://streampark.apache.org/zh-CN/docs/user-guide/deployment">https://streampark.apache.org/zh-CN/docs/user-guide/deployment</a></li></ul><p>依托于 <strong>StreamX一站式管理</strong> 和 <strong>K8s强大的调度管理</strong>。Flink集群的搭建算是比较简单了，按照官方文档一步一步就可以完成搭建。</p><p>K8s Flink 有要求 <strong>Kubernetes &gt;&#x3D; 1.9</strong> 前面装的1.22是满足的。</p><h1 id="部署Flink集群"><a href="#部署Flink集群" class="headerlink" title="部署Flink集群"></a>部署Flink集群</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>首先登录k8smaster节点机器，检查<code>kubectl</code>是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><p>输出集群信息，证明kubectl连接正常即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Kubernetes control plane is running at https://192.168.31.190:6443</span><br><span class="line">CoreDNS is running at https://192.168.31.190:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br></pre></td></tr></table></figure><p>接下来Kubernetes RBAC配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建命名空间</span></span><br><span class="line">kubectl create namespace flink-cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Flink角色权限，指定命名空间，默认k8s账户</span></span><br><span class="line">kubectl create clusterrolebinding flink-role-binding-default --clusterrole=edit --serviceaccount=flink-cluster:default</span><br></pre></td></tr></table></figure><p>这样K8s这边准备工作就全部完成了，是不是很简单。那是因为把所有的创建和管理全部用StreamX去承载了。</p><p>如果不使用StreamX。那么也可以直接使用Flink官方文档上的配置进行Flink安装，但是那样是需要用命令方式提交任务和管理的，不太方便。</p><h2 id="安装StreamX"><a href="#安装StreamX" class="headerlink" title="安装StreamX"></a>安装StreamX</h2><p>StreamX就直接安装在K8smaster所在机器上了，但需要提前准备一些环境：</p><ul><li>JAVA 1.8+（需要安装在部署机器上）</li><li>MySQL 5.6+（安装在部署机器或者其他机器已经有MySQL也行）</li><li>Flink版本必须是1.12.x或以上版本, scala版本必须是2.11</li></ul><p>下载安装包地址：<a href="https://github.com/apache/incubator-streampark/releases/download/v1.2.3/streamx-console-service_2.11-1.2.3.tar.gz">https://github.com/apache/incubator-streampark/releases/download/v1.2.3/streamx-console-service_2.11-1.2.3.tar.gz</a></p><p>解压缩之后，cd进入该目录，可以看到目录结构如下<br><img src="/img/article/20230608170210.png"></p><p>需要修改目录<code>conf/application.yml</code>文件中的三处<br>(Mysql连接信息、本地存储位置、docker仓库的命名空间)<br><img src="/img/article/20230608171040.png"><br><img src="/img/article/20230608171219.png"></p><p>接下来，在Mysql创建一个数据库<code>streamx</code>。并找到目录<code>script/final.sql</code> 执行这个SQL脚本。完成表和数据导入。</p><p>启动streamx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/startup.sh</span><br></pre></td></tr></table></figure><p>会输出一连串启动日志，最后一行<code>[StreamX] StreamX start successful. pid: xxxx</code>。就证明启动成功了</p><p>游览器打开：IP:10000端口，访问，输入默认账号密码<strong>admin &#x2F; streamx</strong></p><h2 id="streamx配置"><a href="#streamx配置" class="headerlink" title="streamx配置"></a>streamx配置</h2><p>首先找到设置<br><img src="/img/article/20230608172451.png"></p><p>先配置系统设置，Flink搭建目前只需要配置 最下面的 <strong>Docker三项</strong></p><ul><li>Docker Register Address</li><li>Docker Register User</li><li>Docker Register Password</li></ul><p>再点击<code>Flink Home</code>配置，可以配置多个不同版本Flink</p><p>按照StreamX的环境要求，选择scala版本必须是2.11，大家可以自由选择版本，只需要改动地址中的版本号，即可进入对应版本文档</p><ul><li>1.17文档：<a href="https://nightlies.apache.org/flink/flink-docs-release-1.17/docs/deployment/resource-providers/native_kubernetes/">https://nightlies.apache.org/flink/flink-docs-release-1.17/docs/deployment/resource-providers/native_kubernetes/</a></li><li>1.13文档：<a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/deployment/resource-providers/native_kubernetes/">https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/deployment/resource-providers/native_kubernetes/</a></li></ul><p>所以我这里下载1.13.6。下载地址:<a href="https://archive.apache.org/dist/flink/flink-1.13.6/">https://archive.apache.org/dist/flink/flink-1.13.6/</a><br><img src="/img/article/20230608190934.png"><br>解压缩之后放到<code>/opt/flinkpackages</code>目录下。以后其他版本也放到这里</p><p>填入名称 和 目录位置 再点击提交即可<br><img src="/img/article/20230608191119.png"></p><p>接下来开始配置集群信息，先创建一个Session集群，这里先简单配置一下，验证整个流程是否通顺<br><img src="/img/article/20230608191326.png"><br><img src="/img/article/20230608191443.png"></p><p>启动完成之后，点击 <code>小眼睛</code> 按钮 直接跳转到Flink UI。</p><h1 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h1><p>点击 Application 按钮，看到有一个自带的Demo，点击编辑按钮<br><img src="/img/article/20230608192002.png"></p><h2 id="测试session模式部署任务"><a href="#测试session模式部署任务" class="headerlink" title="测试session模式部署任务"></a>测试session模式部署任务</h2><p>选择刚刚启动的Session-test集群，其他下面配置不用改，直接点提交<br><img src="/img/article/20230608192147.png"></p><p>然后 点击第二个按钮Launch Application，等待编译完成之后 &gt; 再次点击就是Start Application。会弹出启动配置窗口 &gt; 关闭savepoint。再点击应用。<br>等待启动成功变为Running状态，点击<code>小眼睛</code> 按钮查看详细，可以跳转到Flink UI。<br><img src="/img/article/20230608193055.png"><br>可以在Flink UIk看到在运行，这个Demo一会就跑完了。然后会自动伸缩TaskManagers<br><img src="/img/article/20230608193248.png"></p><p>至此，整个Flink Session部署的流程就跑通了！</p><h2 id="测试application模式部署任务"><a href="#测试application模式部署任务" class="headerlink" title="测试application模式部署任务"></a>测试application模式部署任务</h2><blockquote><p>这里面有一个前提条件，需要预先在每台节点机器上登录docker私有仓库</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker login命令用于登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库DockerHub（hub.docker.com）。</span></span><br><span class="line">docker login --username=用户名 镜像仓库地址</span><br></pre></td></tr></table></figure><p>还是用上面的Flink SQL Demo，再次编辑，模式选择<code>kubernetes application</code> 自定义clusterId：<code>test123</code>，然后点提交。<br><img src="/img/article/20230609101936.png"></p><p>接下来就是和session集群一样的操作，点击第二个按钮Launch。等待docker镜像bulid完成并上传到docke仓库。就可以再次点击启动了</p><p>等待启动成功变为Running状态，点击<code>小眼睛</code> 按钮查看详细，可以跳转到Flink UI 进行查看。</p><p>至此，整个Flink application部署的流程也跑通了！</p><p>也可以直接在K8s Dashboard 查看，等待jobmanager和taskmanager都为running。<br><img src="/img/article/20230609141229.png"></p><h1 id="Flink-任务资源配置"><a href="#Flink-任务资源配置" class="headerlink" title="Flink 任务资源配置"></a>Flink 任务资源配置</h1><blockquote><p><strong>接下来就是根据任务来合理配置不同的部署模式。合理利用资源。</strong></p></blockquote><p>高效利用资源，让K8s合理分配，可以从Flink官方文档中了解Flink的整个配置说明。<br>地址：<a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/deployment/config/#kubernetes">https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/deployment/config/#kubernetes</a></p><p>从文档中，我们可以看到所有配置项，可以直接在Streamx上直接对Flink集群进行配置 写在：“Dynamic Option” （一行一个配置，首位添加<code>-D</code>） 中 比如：<br><img src="/img/article/20230908110200.png"></p><ul><li>配置了一个TaskManger中有三个slot</li><li>配置了任务重启策略为固定间隔重启</li><li>配置了任务重启次数为10次</li><li>配置了K8s限制jobmangerCPU资源为0.5</li><li>配置了K8s限制taskmangerCPU资源为1</li></ul><p>这样在Flink集群启动时，就会按照配置加载，从Flink UI中也可以看到集群的详细配置<br><img src="/img/article/20230908110833.png"></p><h1 id="Flink镜像时区修改"><a href="#Flink镜像时区修改" class="headerlink" title="Flink镜像时区修改"></a>Flink镜像时区修改</h1><p>用Flink的官方镜像，时区不是东八区，从日志打印也可以看出来慢了8个小时。所以我们需要构建自定义镜像，修改时区为东八区<br>首先创建一个Dockerfile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM apache/flink:1.13.6-scala_2.11</span><br><span class="line">RUN <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt; /etc/timezone</span><br></pre></td></tr></table></figure><p>在Dockerfil同级目录，执行build命令(注意命令最后有一点)，打成自定义镜像。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t streamx/flink:1.13.6-scala_2.11 .</span><br></pre></td></tr></table></figure><p>再推送到私服</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push streamx/flink:1.13.6-scala_2.11</span><br></pre></td></tr></table></figure><p>接着修改集群设置中的镜像配置”Flink Base Docker Image”为新的自定义镜像，再次启动即可。</p><h1 id="Streamx中使用UDF函数"><a href="#Streamx中使用UDF函数" class="headerlink" title="Streamx中使用UDF函数"></a>Streamx中使用UDF函数</h1><p>在Flink SQL 中，会需要使用到自定义的UDF函数，来做一些复杂的计算。<br>首先我们创建一个Maven工程，Pom.xml引入基础的包，和业务需要的包即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Flink基础包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-table-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                               <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>cn.dollcode.TestCalc<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                               <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后创建自定义函数类，并继承Flink的ScalarFunction类，这里举例就简单实现拼接函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> <span class="keyword">extends</span> <span class="title class_">ScalarFunction</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eval</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Maven工程打成Jar包，在Streamx中创建Flink SQL任务，并在Dependency一栏 选择 Upload Jar。<br><img src="/img/article/20230908114815.png"></p><p>同时需要在SQL中添加 注册函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE TABLE</span> datagen (</span><br><span class="line">   f_sequence <span class="type">INT</span>,</span><br><span class="line">   f_random <span class="type">INT</span>,</span><br><span class="line">   f_random_str STRING,</span><br><span class="line">   ts <span class="keyword">AS</span> <span class="built_in">localtimestamp</span>,</span><br><span class="line">   WATERMARK <span class="keyword">FOR</span> ts <span class="keyword">AS</span> ts</span><br><span class="line"> ) <span class="keyword">WITH</span> (</span><br><span class="line">   <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;datagen&#x27;</span>,</span><br><span class="line">   <span class="comment">-- optional options --</span></span><br><span class="line">   <span class="string">&#x27;rows-per-second&#x27;</span><span class="operator">=</span><span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;fields.f_sequence.kind&#x27;</span><span class="operator">=</span><span class="string">&#x27;sequence&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;fields.f_sequence.start&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;fields.f_sequence.end&#x27;</span><span class="operator">=</span><span class="string">&#x27;500&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;fields.f_random.min&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;fields.f_random.max&#x27;</span><span class="operator">=</span><span class="string">&#x27;500&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;fields.f_random_str.length&#x27;</span><span class="operator">=</span><span class="string">&#x27;10&#x27;</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE TABLE</span> print_table (</span><br><span class="line">   f_sequence <span class="type">INT</span>,</span><br><span class="line">   f_random <span class="type">INT</span>,</span><br><span class="line">   f_random_str STRING</span><br><span class="line">   ) <span class="keyword">WITH</span> (</span><br><span class="line">   <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;print&#x27;</span></span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> TestCalc <span class="keyword">as</span> <span class="string">&#x27;cn.dollcode.TestCalc&#x27;</span>; <span class="comment">-- 注册函数，前面是定义函数名，后面是指定函数路径</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT INTO</span> print_table </span><br><span class="line">   <span class="keyword">select</span> </span><br><span class="line">f_sequence,</span><br><span class="line">f_random,</span><br><span class="line">TestCalc(f_random_str) <span class="comment">-- 使用函数</span></span><br><span class="line"><span class="keyword">from</span> datagen;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群管理面板dashboard部署</title>
      <link href="/k8s-dashboard.html"/>
      <url>/k8s-dashboard.html</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章中，已经完成了K8s集群的搭建，现在再加上一个可视化的webUI来进行管理和方便查看。<br>这里选择<strong>kubernetes&#x2F;dashboard</strong> 通过官方的配置可以一键部署。<br><img src="/img/article/20230602102753.png"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>访问下载页面： <a href="https://github.com/kubernetes/dashboard/releases">https://github.com/kubernetes/dashboard/releases</a><br>选择自己K8s集群的兼容版本，进行安装<br><img src="/img/article/20230602104458.png"></p><p>执行安装命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><p>查看启动状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n=kubernetes-dashboard -o wide</span><br></pre></td></tr></table></figure><p>都为Running状态就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE     IP            NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">dashboard-metrics-scraper-7c857855d9-r6wh7   1/1     Running   0          4m31s   10.98.90.18   k8snode1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard-658b66597c-6rrzs        1/1     Running   0          4m31s   10.98.90.17   k8snode1   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>官方说明上的API访问方式 需要本地配置config,并开启<code>kubectl proxy</code>，比较麻烦<br><img src="/img/article/20230602105240.png"></p><p>我们可以直接修改kubernetes-dashboard service的Type属性<br>将里面的type: ClusterIP改为type: NodePort</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit service kubernetes-dashboard -n=kubernetes-dashboard</span><br></pre></td></tr></table></figure><p><img src="/img/article/20230602110141.png"></p><p><code>:wq</code> 保存退出即可</p><p>等待更新完成之后，查看端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service kubernetes-dashboard -n=kubernetes-dashboard</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.99.117.158   &lt;none&gt;        443:32576/TCP   19s</span><br></pre></td></tr></table></figure><p>打开游览器 输入IP:32576，访问成功，但是会有https证书警告。</p><h1 id="重新生成证书"><a href="#重新生成证书" class="headerlink" title="重新生成证书"></a>重新生成证书</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Step 1: 新建目录：</span></span><br><span class="line"><span class="built_in">mkdir</span> key &amp;&amp; <span class="built_in">cd</span> key</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step 2: 生成 SSL 证书</span></span><br><span class="line">openssl genrsa -out dashboard.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step 3: 我这里写的自己的 node1 节点，因为我是通过 nodeport 访问的</span></span><br><span class="line">openssl req -new -out dashboard.csr -key dashboard.key -subj <span class="string">&#x27;/CN=192.168.31.190&#x27;</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> dashboard.csr -signkey dashboard.key -out dashboard.crt</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step 4: 删除原有的证书 secret</span></span><br><span class="line">kubectl delete secret kubernetes-dashboard-certs -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step 5: 创建新的证书 secret</span></span><br><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step 6: 查看 pod</span></span><br><span class="line">kubectl get pod -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">#Step 7: 重启 pod</span></span><br><span class="line">kubectl delete pod kubernetes-dashboard-7b5bf5d559-gn4ls  -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><h1 id="创建认证Token"><a href="#创建认证Token" class="headerlink" title="创建认证Token"></a>创建认证Token</h1><p><img src="/img/article/20230602140614.png"><br>创建用户配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;&gt;</span> <span class="string">admin-user.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>创建角色绑定关系配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;&gt;</span> <span class="string">admin-user.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>然后依次执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f admin-user.yaml</span><br><span class="line">kubectl create -f admin-user-role-binding.yaml</span><br></pre></td></tr></table></figure><h2 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h2><p>获取Token命令如下，执行之后会输出token。可以看到是JWT形式的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="token方式登录"><a href="#token方式登录" class="headerlink" title="token方式登录"></a>token方式登录</h1><p>将Token复制到控制台，登录即可。不过默认的过期时间是15分钟。太短了不太方便。可以在容器加入参数配置，指定过期时效（单位:秒）<br><code>- --token-ttl=864000</code> 我这里直接设置了10天（不过为了安全，不建议设置这么久）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit deployment kubernetes-dashboard -n=kubernetes-dashboard</span><br></pre></td></tr></table></figure><p><img src="/img/article/20230602154128.png"></p><p><img src="/img/article/20230602155135.png"><br>至此整个部署就完成了！！！</p><p>参考资源</p><ul><li><a href="https://developer.aliyun.com/article/856527">https://developer.aliyun.com/article/856527</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用kubeadm方式搭建K8s集群</title>
      <link href="/k8scluster-kubeadm.html"/>
      <url>/k8scluster-kubeadm.html</url>
      
        <content type="html"><![CDATA[<p>从零开始搭建K8s集群，一般网上的教程都会让大家提前准备三台机器，分别进行环境的安装。其实我们可以通过<code>VMware</code>虚拟机的<strong>克隆机制</strong>直接复制得到虚拟机。这样就只需要处理一台的环境即可。</p><h1 id="k8s环境安装并配置"><a href="#k8s环境安装并配置" class="headerlink" title="k8s环境安装并配置"></a>k8s环境安装并配置</h1><p><strong>VMware</strong>安装centos7之后， 用这台虚拟机用作master，安装并配置环境之后，再直接克隆出两个node即可</p><table><thead><tr><th>角色</th><th>IP</th><th>备注</th></tr></thead><tbody><tr><td>k8smaster</td><td>192.168.31.190</td><td>安装环境只做一次即可</td></tr><tr><td>k8snode1</td><td>192.168.31.191</td><td>克隆虚拟机，并改MAC地址、改hostname</td></tr><tr><td>k8snode2</td><td>192.168.31.192</td><td>克隆虚拟机，并改MAC地址、改hostname</td></tr></tbody></table><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="防火墙、selinux、swap"><a href="#防火墙、selinux、swap" class="headerlink" title="防火墙、selinux、swap"></a>防火墙、selinux、swap</h3><p>部署k8s，需要关闭防火墙、禁用selinux、swap</p><ul><li>关闭防火墙的原因（nftables后端兼容性问题，产生重复的防火墙规则）</li><li>禁用selinux的原因（关闭selinux以允许容器访问宿主机的文件系统）</li><li>禁用swap的原因（swap将部分内存数据存放到磁盘中，这样会使性能下降）</li></ul><p>依次执行下列命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁用开机自启</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭swap</span></span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名称为k8smaster</span></span><br><span class="line">hostnamectl set-hostname k8smaster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hosts</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.31.190 k8smaster</span></span><br><span class="line"><span class="string">192.168.31.191 k8snode1</span></span><br><span class="line"><span class="string">192.168.31.192 k8snode2</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将桥接的IPv4流量传递到iptables的链</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line">sysctl --system  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ntpdate</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line"><span class="comment"># 执行时间同步</span></span><br><span class="line">ntpdate time.windows.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部执行完成之后，重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加Docker阿里镜像源</span></span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker版本列表信息</span></span><br><span class="line">yum list docker-ce --showduplicates|grep <span class="string">&quot;^doc&quot;</span>|<span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本Docker</span></span><br><span class="line">yum -y install docker-ce-19.03.15-3.el7 docker-ce-cli-19.03.15-3.el7 containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置自己的阿里云镜像加速，同时配置Docker的cgroupdrvier和kubelet的cgroupdrver一致</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://xxxx.mirror.aliyuncs.com&quot;], &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker安装版本情况</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p><strong>显示如下输出，docker安装就完成了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           24.0.2</span><br><span class="line"> API version:       1.40 (downgraded from 1.43)</span><br><span class="line"> Go version:        go1.20.4</span><br><span class="line"> Git commit:        cb74dfc</span><br><span class="line"> Built:             Thu May 25 21:55:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.15</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       99e3ed8919</span><br><span class="line">  Built:            Sat Jan 30 03:16:33 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.21</span><br><span class="line">  GitCommit:        3dce8eb055cbb6872793272b4f20ed16117344f8</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.7</span><br><span class="line">  GitCommit:        v1.1.7-0-g860f061</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure><h2 id="配置K8s环境"><a href="#配置K8s环境" class="headerlink" title="配置K8s环境"></a>配置K8s环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加阿里云Kubernetes yum镜像源</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装kubelet、kubeadm、kubectl(注意版本要和k8s的版本一致)</span></span><br><span class="line">yum -y install kubelet-1.22.0 kubeadm-1.22.0 kubectl-1.22.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet的cgroupdrver与Docker一致</span></span><br><span class="line">vim /etc/sysconfig/kubelet</span><br><span class="line"><span class="comment"># 在属性后增加参数如下，然后:wq保存</span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h2><blockquote><p>kubeadm init执行的时候出现：unexpected kernel config: CONFIG_CGROUP_PIDS。这个问题需要升级Linux内核</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前默认启动内核</span></span><br><span class="line">grub2-editenv list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级内核命令，依次执行</span></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">yum --disablerepo=<span class="string">&quot;*&quot;</span> --enablerepo=<span class="string">&quot;elrepo-kernel&quot;</span> list available</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml</span><br><span class="line"><span class="built_in">cp</span> /etc/default/grub  /etc/default/grub_bak</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启完成之后，查看已安装内核列表</span></span><br><span class="line"><span class="built_in">cat</span> /boot/grub2/grub.cfg | grep -v rescue | grep ^menuentry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认启动内核</span></span><br><span class="line">grub2-set-default <span class="string">&#x27;CentOS Linux (6.3.5-1.el7.elrepo.x86_64) 7 (Core)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="克隆虚拟机机"><a href="#克隆虚拟机机" class="headerlink" title="克隆虚拟机机"></a>克隆虚拟机机</h1><p>首先关闭虚拟机 - 设置 - 克隆（克隆之后需要修改两处：1.MAC地址 2.HostName）<br><img src="/img/article/20230601135626.png"><br><img src="/img/article/20230601135745.png"><br>选择完整克隆<br><img src="/img/article/20230601135806.png"><br>命名为k8snode1</p><p>然后记得 <strong>在虚拟机的 网络适配器高级设置 中修改MAC地址</strong><br>打开虚拟机之后，修改hostname</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8snode1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>第三台也是一样的操作。</p><h1 id="master安装k8s"><a href="#master安装k8s" class="headerlink" title="master安装k8s"></a>master安装k8s</h1><p>用kubeadm init命令来安装，kubeadm的版本和kubernetes-version需要一致，如下都为1.22。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --apiserver-advertise-address=192.168.31.190 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.22.10 --service-cidr=10.96.0.0/12  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p>出现下面的日志就安装成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">You should now deploy a pod network to the cluster .</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork] .yamLu with one of the options listed at:</span><br><span class="line">https: / /kube rnetes. io/docs /concepts/cluster- administration/ addons I</span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line">kubeadm join 192.168.31.190:6443 --token 2luxh6.uhhj74j5oj6xfdtv \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:4f558182265bee13182b2480ba7180a867a5f3b93ab18c82c4a0d542a4c2poi1</span><br></pre></td></tr></table></figure><h2 id="配置kubectl工具"><a href="#配置kubectl工具" class="headerlink" title="配置kubectl工具"></a>配置kubectl工具</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>查看节点状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>能够看到，目前有一个master节点已经运行了，但是还处于未准备状态<br>下面我们还需要在Node节点执行其它的命令，将node1和node2加入到我们的master节点上</p><h2 id="node1加入集群"><a href="#node1加入集群" class="headerlink" title="node1加入集群"></a>node1加入集群</h2><p>复制 上面 master安装成功之后的输出的<code>kubeadm join</code>命令，默认的token有效期为24小时，当过期之后，该token就不能用了，这时可以使用如下的命令创建token</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个永不过期的token</span></span><br><span class="line">kubeadm token create --ttl 0</span><br></pre></td></tr></table></figure><p>将该token替换上面的join命令中的token</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.31.190:6443 --token 7auxee.exh5uov0uorusyl \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:4f558182265bee13182b2480ba7180a867a5f3b93ab18c82c4a0d542a4c2poi1</span><br></pre></td></tr></table></figure><h1 id="Master部署CNI网络插件"><a href="#Master部署CNI网络插件" class="headerlink" title="Master部署CNI网络插件"></a>Master部署CNI网络插件</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>如果网络访问不了，也可以先在自己电脑上下载完成之后，再传输到虚拟机上，执行<code>kubectl apply -f kube-flannel.yml</code></p><p>然后等待pod全部安装，进入running状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p><img src="/img/article/20230601143227.png"></p><p>这个时候，我们再次查看节点状态就都是Ready状态了<br><img src="/img/article/20230601143549.png"></p><h2 id="如果node节点还不是Ready状态"><a href="#如果node节点还不是Ready状态" class="headerlink" title="如果node节点还不是Ready状态"></a>如果node节点还不是Ready状态</h2><p>需要先删除节点，再重置<br>在master机器上删除node1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete node k8snode1</span><br></pre></td></tr></table></figure><p>然后在node1机器上执行重置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><p>再次join</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.31.190:6443 --token 7auxee.exh5uov0uorusyl \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:4f558182265bee13182b2480ba7180a867a5f3b93ab18c82c4a0d542a4c2poi1</span><br></pre></td></tr></table></figure><p>回到master机器上，再次查看node状态</p><h1 id="集群健康检查"><a href="#集群健康检查" class="headerlink" title="集群健康检查"></a>集群健康检查</h1><p>在master机器上执行健康检查状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class="line">scheduler            Healthy   ok                              </span><br><span class="line">controller-manager   Healthy   ok                              </span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;,&quot;reason&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure><p>如果出现状态出现 Unhealthy，就需要删掉配置中<code>- --port=0</code> 这一行<br>vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-controller-manager.yaml<br>vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-scheduler.yaml<br><img src="/img/article/20230601152813.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启kubelet服务</span></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>至此，整个搭建过程就完成了。</p><p>参考来源：</p><ul><li><a href="http://victorfengming.gitee.io/kubernetes/">http://victorfengming.gitee.io/kubernetes/</a></li><li><a href="https://www.cnblogs.com/xuweiweiwoaini/p/13884112.html">https://www.cnblogs.com/xuweiweiwoaini/p/13884112.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群晖7.0安装Transmission4.0挂PT(docker版)</title>
      <link href="/nas-transmission4.html"/>
      <url>/nas-transmission4.html</url>
      
        <content type="html"><![CDATA[<p>最近把NAS升级了一下，关于群晖7.0和docker安装Transmission4.0，这种最新版本的安装教程较少，同时Transmission4.0的配置和3.0是有很大区别的，汉化目录、WEB授权方式和路径都变了。所以在这里记录一下。</p><h2 id="群晖套件安装Docker"><a href="#群晖套件安装Docker" class="headerlink" title="群晖套件安装Docker"></a>群晖套件安装Docker</h2><p>这一步很简单，在套件中心，搜索Docker，安装即可</p><h2 id="下载Transmission镜像"><a href="#下载Transmission镜像" class="headerlink" title="下载Transmission镜像"></a>下载Transmission镜像</h2><p>选择第一个镜像下载，选择latest版本。从右上角可以点击跳转详细页面，能看到最新版就是4.0.2<br><img src="/img/article/20230324104435.png"><br><img src="/img/article/20230324104654.png"></p><h2 id="配置容器参数"><a href="#配置容器参数" class="headerlink" title="配置容器参数"></a>配置容器参数</h2><p>首先在docker目录下创建transmission文件夹。同时给予权限everyone<br><img src="/img/article/20230324114254.png"><br>然后在子目录下再创建三个目录 <code>downloads</code>，<code>config</code>，<code>watch</code> 分别挂载到容器的对应目录<br><img src="/img/article/20230324113326.png"></p><ul><li>&#x2F;downloads  ：下载目录</li><li>&#x2F;config     ：配置目录</li><li>&#x2F;watch      ：种子目录<br><img src="/img/article/20230324113650.png"></li></ul><h3 id="环境变量（重点）"><a href="#环境变量（重点）" class="headerlink" title="环境变量（重点）"></a>环境变量（重点）</h3><ul><li>TRANSMISSION_WEB_HOME ：自定义web页面目录</li><li>USER                  ：web页面的登录用户名</li><li>PASS                  ：web页面的登录密码<br><img src="/img/article/20230324144721.png"></li></ul><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p><img src="/img/article/20230324113720.png"></p><h3 id="汉化web页面"><a href="#汉化web页面" class="headerlink" title="汉化web页面"></a>汉化web页面</h3><p>transmission UI 汉化 GitHub项目地址：<a href="https://github.com/ronggang/transmission-web-control">https://github.com/ronggang/transmission-web-control</a><br>下载页面地址：<a href="https://github.com/ronggang/transmission-web-control/releases">https://github.com/ronggang/transmission-web-control/releases</a><br>下载ZIP包，解压得到src目录下的文件。<br><img src="/img/article/20230324115642.png"></p><p>然后在<code>config</code>目录下创建一个<code>web-control</code>目录。将刚刚解压出的整个放到目录下即可<br><img src="/img/article/20230324115859.png"></p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>启动容器之后，在游览器打开 IP:9091 端口进入web页面，输入 配置的用户名和密码即可。</p><p>可以看到系统信息4.0.2准确无误，功能也正常。<br><img src="/img/article/20230324150759.png"></p><p>大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qbittorrent内网穿透解决端口阻塞</title>
      <link href="/qbittorrent-nat.html"/>
      <url>/qbittorrent-nat.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提场景"><a href="#前提场景" class="headerlink" title="前提场景"></a>前提场景</h2><p>在qbittorrent没有公网IP，并且也开不了路由器端口转发的情况下，<strong>通过一台公网服务器中转</strong>，进行Socket5代理和内网穿透，解决qbittorrent端口阻塞问题。<br>主要用到以下软件：</p><ul><li><a href="https://github.com/fatedier/frp/releases">Frp内网穿透</a></li><li><a href="https://github.com/ginuerzh/gost/releases">gost代理</a></li></ul><h2 id="公网机器配置"><a href="#公网机器配置" class="headerlink" title="公网机器配置"></a>公网机器配置</h2><blockquote><p>公网机器 用来让内网中的qbittorrent客户端机器获取公网IP，同时转发客户端的端口流量。</p></blockquote><h3 id="启动gost"><a href="#启动gost" class="headerlink" title="启动gost"></a>启动gost</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./gost -L=qbadmin:123456@blog.dollcode.cn:8081</span><br><span class="line"></span><br><span class="line">//执行之后会输出如下日志就是正常成功了</span><br><span class="line">2022/12/01 03:11:45 route.go:694: auto://blog.dollcode.cn:8081 on xxx.xxx.xxx.xxx:8081</span><br></pre></td></tr></table></figure><blockquote><p>配置说明：</p><ul><li>代表开启一个Socket5代理</li><li>用户名是：qbadmin；密码是：123456</li><li>IP是：blog.dollcode.cn(可以用域名也可以用IP)</li><li>端口是：8081</li></ul></blockquote><h3 id="启动frps"><a href="#启动frps" class="headerlink" title="启动frps"></a>启动frps</h3><p>frp有两个包：frps是服务器端；frpc是客户端。这里我们配置frps的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 允许任意IP</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line"># udp端口</span><br><span class="line">bind_udp_port = 8080</span><br><span class="line"># tcp端口</span><br><span class="line">bind_port = 8080</span><br><span class="line"># 安全连接</span><br><span class="line">tls_only = true</span><br><span class="line"># 连接密钥</span><br><span class="line">token = dollcode</span><br><span class="line"># 日志文件路径</span><br><span class="line">log_file = ./frps.log</span><br><span class="line"># 日志级别</span><br><span class="line">log_level = info</span><br><span class="line"># 日志文件保存天数</span><br><span class="line">log_max_days = 3</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 执行启动命令</span><br><span class="line">./frps -c frps.conf</span><br><span class="line"></span><br><span class="line">// 查看启动日志，输出如下就是正常成功了</span><br><span class="line">2022/12/01 03:07:04 [I] [service.go:152] frps tcp listen on 0.0.0.0:8080</span><br><span class="line">2022/12/01 03:07:04 [I] [service.go:233] nat hole udp service listen on 0.0.0.0:8080</span><br><span class="line">2022/12/01 03:07:04 [I] [root.go:205] start frps success</span><br></pre></td></tr></table></figure><blockquote><p>上面指定的8080端口和8081端口，需要在服务器的防火墙中放开该端口</p></blockquote><h2 id="qbittorrent客户端机器配置"><a href="#qbittorrent客户端机器配置" class="headerlink" title="qbittorrent客户端机器配置"></a>qbittorrent客户端机器配置</h2><blockquote><p>内网客户端 用来qbittorrent下载</p></blockquote><h3 id="启动frpc"><a href="#启动frpc" class="headerlink" title="启动frpc"></a>启动frpc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 公网服务器的IP或域名</span><br><span class="line">server_addr = blog.dollcode.cn</span><br><span class="line"># 公网机器隧道端口</span><br><span class="line">server_port = 8080 </span><br><span class="line">tls_enable = true</span><br><span class="line">token = dollcode</span><br><span class="line"></span><br><span class="line"># 58736这个端口就是qbittorrent的连接端口</span><br><span class="line">[tcppt]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 58736</span><br><span class="line">remote_port = 58736</span><br><span class="line"></span><br><span class="line">[udppt]</span><br><span class="line">type = udp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 58736</span><br><span class="line">remote_port = 58736</span><br></pre></td></tr></table></figure><p><img src="/img/article/20221201112108.png"></p><p>启动之后可以看到连接成功的日志<br><img src="/img/article/20221201111614.png"></p><h3 id="配置qbittorrent代理"><a href="#配置qbittorrent代理" class="headerlink" title="配置qbittorrent代理"></a>配置qbittorrent代理</h3><p>填入服务器gost设置的配置即可<br><img src="/img/article/20221201113249.png"></p><p>退出软件重新进入，就可以看到绿灯亮了<br><img src="/img/article/20221201113536.png"></p><p>至此，整个内网穿透和Socket5代理就全部完成了。可以开始愉快的下载啦！！！</p><h3 id="超时问题解决"><a href="#超时问题解决" class="headerlink" title="超时问题解决"></a>超时问题解决</h3><p><img src="/img/article/20221201112138.png"><br><strong>如果qbittorrent日志中出现连接超时，一般就是服务器防火墙端口没开，或者账号密码输错了，记得检查一下哦！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 软连接link的使用</title>
      <link href="/linux-lnlink.html"/>
      <url>/linux-lnlink.html</url>
      
        <content type="html"><![CDATA[<p>当我们需要在不同的目录，用到相同的文件场景中：我们不需要在每一个需要的目录下都放一个相同的文件，我们只要在其它的目录下用<strong>ln命令链接（link）</strong>就可以，不必重复的占用磁盘空间。<br>软连接是linux中一个常用命令，它的功能是为某一个文件在另外一个位置建立一个同不的链接。</p><h2 id="创建软链"><a href="#创建软链" class="headerlink" title="创建软链"></a>创建软链</h2><blockquote><p>命令：ln -s [源文件] [目标文件]</p></blockquote><p>比如：将存放在<code>/home/books</code>目录下的书籍，软链到<code>/opt/shu</code>目录，实现在<code>/opt/shu</code>下也能使用查看书籍，也可以创建多个软链。如下：shu、shu1、shu2三个软链。<br><img src="https://s2.loli.net/2022/11/14/KEmWDhp4b9wuZP1.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@Blog:/home/books# <span class="built_in">ls</span></span><br><span class="line">三国.txt  水浒传.txt</span><br><span class="line">root@Blog:/home/books# <span class="built_in">ln</span> -s /home/books /opt/shu</span><br><span class="line">root@Blog:/home/books# <span class="built_in">cd</span> /opt/shu/</span><br><span class="line">root@Blog:/opt/shu# <span class="built_in">ls</span></span><br><span class="line">三国.txt  水浒传.txt</span><br><span class="line">root@Blog:/opt/shu# <span class="built_in">ln</span> -s /home/books /opt/shu1</span><br><span class="line">root@Blog:/opt/shu# <span class="built_in">ln</span> -s /home/books /opt/shu2</span><br><span class="line">root@Blog:/opt/shu# <span class="built_in">cd</span> /opt/shu1</span><br><span class="line">root@Blog:/opt/shu1# <span class="built_in">ls</span></span><br><span class="line">三国.txt  水浒传.txt</span><br><span class="line">root@Blog:/opt/shu1# <span class="built_in">cd</span> /opt/shu2</span><br><span class="line">root@Blog:/opt/shu2# <span class="built_in">ls</span></span><br><span class="line">三国.txt  水浒传.txt</span><br><span class="line">root@Blog:/opt/shu2#</span><br></pre></td></tr></table></figure><h2 id="删除软链"><a href="#删除软链" class="headerlink" title="删除软链"></a>删除软链</h2><blockquote><p>删除软链接与删除普通的文件是一样的，删除都是使用rm来进行操作。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 删除 /opt/shu2</span><br><span class="line"><span class="built_in">rm</span> -rf /opt/shu2</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/14/KgdfvJwQI7lRWtX.png"></p><h2 id="修改软链"><a href="#修改软链" class="headerlink" title="修改软链"></a>修改软链</h2><blockquote><p>命令：ln –snf [新的源文件或目录] [目标文件或目录]</p></blockquote><p>修改&#x2F;opt&#x2F;shu1，指向别的新目录。比如：原来是books目录 现在改为music</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /home/books /opt/shu1 //原来的软链指向</span><br><span class="line"><span class="built_in">ln</span> -snf /home/music /opt/shu1 //修改后的指向</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次FlinkSQL中Could not forward element to next operator异常</title>
      <link href="/flink-not-forward.html"/>
      <url>/flink-not-forward.html</url>
      
        <content type="html"><![CDATA[<p>在Flink SQL 开发过程中，遇到这样一个错误:Caused by: org.apache.flink.streaming.runtime.tasks.ExceptionInChainedOperatorException: Could not forward element to next operator</p><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.flink.streaming.runtime.tasks.ExceptionInChainedOperatorException: Could not forward element to next operator</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.ChainingOutput.pushToOperator(ChainingOutput.java:114) ~[flink-dist_2.11-1.13-vvr-4.0.13-1-SNAPSHOT.jar:1.13-vvr-4.0.13-1-SNAPSHOT]</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.ChainingOutput.collect(ChainingOutput.java:93) ~[flink-dist_2.11-1.13-vvr-4.0.13-1-SNAPSHOT.jar:1.13-vvr-4.0.13-1-SNAPSHOT]</span><br><span class="line">at org.apache.flink.streaming.runtime.tasks.ChainingOutput.collect(ChainingOutput.java:39) ~[flink-dist_2.11-1.13-vvr-4.0.13-1-SNAPSHOT.jar:1.13-vvr-4.0.13-1-SNAPSHOT]</span><br><span class="line">at org.apache.flink.streaming.api.operators.CountingOutput.collect(CountingOutput.java:50) ~[flink-dist_2.11-1.13-vvr-4.0.13-1-SNAPSHOT.jar:1.13-vvr-4.0.13-1-SNAPSHOT]</span><br><span class="line">at org.apache.flink.streaming.api.operators.CountingOutput.collect(CountingOutput.java:28) ~[flink-dist_2.11-1.13-vvr-4.0.13-1-SNAPSHOT.jar:1.13-vvr-4.0.13-1-SNAPSHOT]</span><br><span class="line">at StreamExecCalc$1653.processElement(Unknown Source) ~[?:?]</span><br></pre></td></tr></table></figure><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>从异常描述来看是：无法将元素转发给下一个算子。</p><p>根据含义可以初步定位问题在数据源端，检查源表SQL字段类型、大概率是<strong>字段类型不对</strong>或者有<strong>NULL数据</strong>导致的。</p><ul><li>（比如：<strong>数据源主键为INT，FlinkSQL中定义成了VARCHAR</strong>，就会报这个错）</li><li>（比如：F<strong>linkSQL中定义了字段不能为NULL，但其实数据源端有NULL数据</strong>，也会报这个错）</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>首先检查SQL中是否写错了数据源端的字段类型，保证两端的字段数据类型一致。</li><li>再对SQL中定义了NOT NULL的字段，在消费时需要判断NULL并赋个默认值。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflared内网穿透实现Windows远程桌面</title>
      <link href="/cloudflared-tunnel-rdp.html"/>
      <url>/cloudflared-tunnel-rdp.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>个人经常会有远程Windows的需要，没有找到中意的远程软件</li><li>用过向日葵，三天两头服务器奔溃，账户莫名登录不上，直接劝退。</li><li>TeamViewer就厉害了，识别到国内IP就是特供版，不验证手机号直接不让用，也劝退了。</li><li>Todesk就直接告辞了，你以为在白嫖它的服务，殊不知电脑的网络被它一直在白嫖</li><li>偶然看到Cloudflare Tunnel穿透，配合Freenom的免费域名，通过windows远程桌面就可以直接远程了</li></ul></blockquote><h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><ul><li>Cloudflare账号，注册地址：<a href="https://www.cloudflare.com/">https://www.cloudflare.com</a></li><li>自定义域名并托管到Cloudflare（使用Freenom免费域名）</li><li>下载 Cloudflare可执行文件 下载地址：<a href="https://github.com/cloudflare/cloudflared/releases">https://github.com/cloudflare/cloudflared/releases</a></li></ul><h2 id="被控端电脑配置"><a href="#被控端电脑配置" class="headerlink" title="被控端电脑配置"></a>被控端电脑配置</h2><p>将 下载好的可执行文件<code>(cloudflared-windows-amd64.exe)</code> 复制到 自己定义的目录 并改短名称为<code>(cloudflared.exe)</code>，方便操作</p><p>在当前目录打开 <strong>cmd</strong> 窗口，输入如下命令进行登录验证，会自动打开游览器进行登录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudflared.exe login</span><br></pre></td></tr></table></figure><p>登录完成之后会在 <code>C:\Users\%USERNAME%\.cloudflared</code> 目录下生成登录凭证<br><img src="https://s2.loli.net/2022/07/29/LHAf2Dth4FNSspi.png"></p><p>创建隧道，<NAME>随意自定义名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudflared.exe tunnel create &lt;NAME&gt;</span><br></pre></td></tr></table></figure><p>配置 DNS 记录（使用Freenom免费域名），<NAME>就是上一步创建的隧道名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudflared.exe tunnel route dns &lt;NAME&gt; diy.domain.cf</span><br></pre></td></tr></table></figure><p>配置完成之后，可以在控制台看到记录<br><img src="https://s2.loli.net/2022/07/29/efSZ7wPW1Ab8ic4.png"></p><p>在 <strong>cloudflared.exe</strong> 同级目录创建一个 <code>config.yaml</code> 文件，内容如下  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 隧道的 UUID, 就是登录凭证的json文件名称</span></span><br><span class="line"><span class="attr">tunnel:</span> <span class="string">xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx</span></span><br><span class="line"><span class="comment"># 鉴权文件的全路径，注意替换为自己的</span></span><br><span class="line"><span class="attr">credentials-file:</span> <span class="string">C:\Users\%USERNAME%\.cloudflared\xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx.json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="comment"># 你的freenom二级域名</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostname:</span> <span class="string">diy.domain.cf</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">rdp://localhost:3389</span></span><br><span class="line">  <span class="comment"># 默认错误404</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">http_status:404</span></span><br></pre></td></tr></table></figure><h2 id="验证连接情况"><a href="#验证连接情况" class="headerlink" title="验证连接情况"></a>验证连接情况</h2><h3 id="被控端"><a href="#被控端" class="headerlink" title="被控端"></a>被控端</h3><p>被控端输入如下命令，注意替换配置文件路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudflared.exe --config=D:\Config\config.yaml tunnel run</span><br></pre></td></tr></table></figure><h3 id="控制端"><a href="#控制端" class="headerlink" title="控制端"></a>控制端</h3><p>同样下载可执行文件，并在目录打开 <strong>cmd</strong>。输入如下命令，即可启动 <code>Start Websocket listener</code></p><ul><li>hostname 填写自定义的域名</li><li>url 填写映射的本地端口，如localhost:3000</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudflared.exe access rdp --hostname diy.domain.cf --url localhost:3000</span><br></pre></td></tr></table></figure><p>再打开 windows远程桌面 -&gt; 输入 <strong>localhost:3000</strong> 能连接的话就说明配置没问题了<br><img src="https://s2.loli.net/2022/07/29/HoM6qyXmxfOv1EK.png"></p><h2 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h2><p>被控端如果还需要手动执行命令，那不是脱裤子放屁。</p><p>肯定是需要注册成Windows服务，自动启动滴！</p><p>首先 <strong>以管理员身份打开</strong> <code>cmd</code>， 进入cloudflared.exe所在目录，执行如下命令，注册成服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloudflared.exe service install</span><br></pre></td></tr></table></figure><p>打开注册表(regedit.exe)，在 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services 找到 Cloudflared<br>将 ImagePath 修改为 <code>D:\Config\cloudflared.exe --config=D:\Config\config.yaml tunnel run</code> 注意替换自己路径<br><img src="https://s2.loli.net/2022/07/29/qWEk3jwrlDasH1T.png"></p><p>再打开Windows服务(services.msc)，找到 <code>cloudflared agent</code> 右键 重新启动。自启就配置完成啦！！！<br><img src="https://s2.loli.net/2022/07/30/tDxsMVAkgaljTK7.png"></p><p>建议配合笔者之前写的 <a href="https://blog.dollcode.cn/win-autoemail.html">Windows开机自动发送邮件</a> 食用更佳。</p>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置返回json或html</title>
      <link href="/nginx-return-type.html"/>
      <url>/nginx-return-type.html</url>
      
        <content type="html"><![CDATA[<p>最近刚好需要清理一些旧接口，不让外界访问。通过Nginx直接拦截接口，返回接口不可用信息。记录一下操作</p><h2 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h2><h3 id="default-type"><a href="#default-type" class="headerlink" title="default_type"></a>default_type</h3><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>application&#x2F;json</td><td>返回json格式</td></tr><tr><td>text&#x2F;html</td><td>返回text&#x2F;html格式</td></tr></tbody></table><h2 id="配置直接返回数据"><a href="#配置直接返回数据" class="headerlink" title="配置直接返回数据"></a>配置直接返回数据</h2><p>需要配置 <strong>default_type</strong>，不然游览器无法识别数据类型，会触发游览器下载</p><p><strong>格式</strong>：return HTTP状态码 数据内容</p><h3 id="配置返回JSON"><a href="#配置返回JSON" class="headerlink" title="配置返回JSON"></a>配置返回JSON</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location = /blog/choose &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">    return 200 &#x27;&#123;&quot;code&quot;: -1, &quot;msg&quot;: &quot;接口已升级，请重新配置&quot;&#125;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/article/k5WaFEBdHALjmn6.png"></p><h3 id="配置返回HTML"><a href="#配置返回HTML" class="headerlink" title="配置返回HTML"></a>配置返回HTML</h3><p>如果出现中文乱码，应该是Server没有配置字符集。增加 <code>charset utf-8;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  80</span><br><span class="line">  server_name  域名;</span><br><span class="line">  charset utf-8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location = /blog/choose &#123;</span><br><span class="line">    default_type text/html;</span><br><span class="line">    return 200 &#x27;&lt;h3&gt;接口已升级，请重新配置&lt;/h3&gt;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/article/1fzyakMOoXHdn6A.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10设置开机自启</title>
      <link href="/win-autostart.html"/>
      <url>/win-autostart.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Windows操作系统中，经常有场景需要开机时 <strong>自动启动某个软件</strong> 或者 <strong>执行一段脚本</strong></p><p>对于软件自身没有自启选项的。我们可以通过Windows自带的自启文件夹目录实现。<br>也可以通过<strong>windows任务计划程序</strong>实现。</p></blockquote><h2 id="前言，通过windows任务计划程序实现"><a href="#前言，通过windows任务计划程序实现" class="headerlink" title="前言，通过windows任务计划程序实现"></a>前言，通过windows任务计划程序实现</h2><p>详细请看之前的文章 &gt;&gt;&gt;<a href="https://blog.dollcode.cn/win-autoemail.html">Windows任务计划程序配置</a>&lt;&lt;&lt;<br><img src="https://s2.loli.net/2022/07/27/msFwp7ZYxLvONWa.png"></p><h2 id="第一步-进入自启目录"><a href="#第一步-进入自启目录" class="headerlink" title="第一步:进入自启目录"></a>第一步:进入自启目录</h2><p>目录：<code>C:\Users\xxx\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p><p>可以复制上面的地址到 文件资源管理器 打开<br><img src="https://s2.loli.net/2022/07/14/TAnPsRrOBYuzGUg.png"></p><p><strong>也可以通过快捷键 <code>win + R</code> 打开 运行窗口，并输入 <code>shell:startup</code> 回车。即可打开自启目录</strong><br><img src="https://s2.loli.net/2022/07/14/LbrpEcXmy96jxNi.png"></p><h2 id="第二步：放入软件快捷方式"><a href="#第二步：放入软件快捷方式" class="headerlink" title="第二步：放入软件快捷方式"></a>第二步：放入软件快捷方式</h2><p>以vscode软件为例，我们找到vscode软件的快捷方式(.lnk)，复制到自启目录下<br><img src="https://s2.loli.net/2022/07/14/oVXnjilrNxIkpHt.png"></p><p><strong>然后到 设置-应用-启动 就可以看到vscode已经被设置为开机自启了</strong><br><img src="https://s2.loli.net/2022/07/14/s4YChMTl3IA58dH.png"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>除了放入快捷方式，也可以直接放入exe文件（用快捷方式是为了避免占用C盘空间）</p><p>当然，也可以直接放 <strong>脚本文件</strong>，可以看看之前的文章 <a href="https://blog.dollcode.cn/win-autoemail.html">Windows开机自动发送邮件</a></p><blockquote><p>同时还可以在设置中管理所有的自启项。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Completablefuture动态任务使用</title>
      <link href="/completablefuture-demo.html"/>
      <url>/completablefuture-demo.html</url>
      
        <content type="html"><![CDATA[<p>场景如下：一个用户有N张不同银行卡，要求一个接口展示这N张卡的余额。如果各种银行查询余额API平均响应时间为2秒，假设用户有5张卡，就需要2*5&#x3D;10秒才能展示出来结果<br>改造为异步处理理论上就只需要2秒，实际情况中，Completablefuture改造之后，最慢的那个API响应即为整个结果的响应时间。但用户卡数量是动态的，所以异步任务也是动态。</p><span id="more"></span><h2 id="创建模拟查询代码"><a href="#创建模拟查询代码" class="headerlink" title="创建模拟查询代码"></a>创建模拟查询代码</h2><blockquote><p>假设四大行为A、B、C、D。其中A银行API响应为2秒、B银行API响应为3秒、C银行API响应为4秒、D银行API响应为5秒。余额统一设为100</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBankA</span> <span class="params">(String cardNo)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询A银行-2秒&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟API调用耗时</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBankB</span> <span class="params">(String cardNo)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询B银行-3秒&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟API调用耗时</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBankC</span> <span class="params">(String cardNo)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询C银行-4秒&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟API调用耗时</span></span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBankD</span> <span class="params">(String cardNo)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询D银行-5秒&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟API调用耗时</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建业务查询结果展示对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CardInfo</span> &#123;</span><br><span class="line">    <span class="comment">// 银行名称</span></span><br><span class="line">    <span class="keyword">private</span> String bank;</span><br><span class="line">    <span class="comment">// 银行卡号</span></span><br><span class="line">    <span class="keyword">private</span> String cardNo;</span><br><span class="line">    <span class="comment">// 余额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> money;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>统一银行余额查询方法，路由各银行查询API封装</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CardInfo <span class="title function_">queryCardInfo</span><span class="params">(String bank, String cardNo)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 四大行API路由</span></span><br><span class="line">    <span class="keyword">switch</span> (bank) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;A&quot;</span> :</span><br><span class="line">            money = getBankA(cardNo);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;B&quot;</span> :</span><br><span class="line">            money = getBankB(cardNo);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;C&quot;</span> :</span><br><span class="line">            money = getBankC(cardNo);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;D&quot;</span> :</span><br><span class="line">            money = getBankD(cardNo);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;未知银行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CardInfo</span>(bank, cardNo, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟同步调用情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟数据库，用户 - 卡号,银行</span></span><br><span class="line">    HashMap&lt;String, List&lt;String&gt;&gt; DB = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">    DB.put(<span class="string">&quot;张三&quot;</span>, Arrays.asList(<span class="string">&quot;1111,A&quot;</span>, <span class="string">&quot;2222,B&quot;</span>, <span class="string">&quot;3333,C&quot;</span>, <span class="string">&quot;4444,D&quot;</span>));</span><br><span class="line">    DB.put(<span class="string">&quot;李四&quot;</span>, Arrays.asList(<span class="string">&quot;11110,A&quot;</span>, <span class="string">&quot;22220,B&quot;</span>, <span class="string">&quot;33330,B&quot;</span>, <span class="string">&quot;44440,D&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先查询数据库获得用户卡号的归属银行</span></span><br><span class="line">    List&lt;String&gt; cardList = DB.get(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    List&lt;CardInfo&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String info : cardList) &#123;</span><br><span class="line">        String[] split = info.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">CardInfo</span> <span class="variable">cardInfo</span> <span class="operator">=</span> queryCardInfo(split[<span class="number">1</span>], split[<span class="number">0</span>]);</span><br><span class="line">        result.add(cardInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;展示结果集:&quot;</span> + JSONUtil.parse(result));</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时 &quot;</span> + time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到执行结果就是累加时间 14023 毫秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查询A银行-2秒</span><br><span class="line">查询B银行-3秒</span><br><span class="line">查询C银行-4秒</span><br><span class="line">查询D银行-5秒</span><br><span class="line">展示结果集:[&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;A&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;1111&quot;</span>&#125;,&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;B&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;2222&quot;</span>&#125;,&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;C&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;3333&quot;</span>&#125;,&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;D&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;4444&quot;</span>&#125;]</span><br><span class="line">耗时 14023</span><br></pre></td></tr></table></figure><h2 id="改造为使用Completablefuture"><a href="#改造为使用Completablefuture" class="headerlink" title="改造为使用Completablefuture"></a>改造为使用Completablefuture</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟数据库，用户 - 卡号,银行</span></span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; DB = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">        DB.put(<span class="string">&quot;张三&quot;</span>, Arrays.asList(<span class="string">&quot;1111,A&quot;</span>, <span class="string">&quot;2222,B&quot;</span>, <span class="string">&quot;3333,C&quot;</span>, <span class="string">&quot;4444,D&quot;</span>));</span><br><span class="line">        DB.put(<span class="string">&quot;李四&quot;</span>, Arrays.asList(<span class="string">&quot;11110,A&quot;</span>, <span class="string">&quot;22220,B&quot;</span>, <span class="string">&quot;33330,B&quot;</span>, <span class="string">&quot;44440,D&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先查询数据库获得用户卡号的归属银行</span></span><br><span class="line">        List&lt;String&gt; cardList = DB.get(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        List&lt;CardInfo&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 使用线程池 PS:当不传递Executor时，会使用ForkJoinPool中的共用线程池CommonPool（CommonPool的大小是CPU核数-1，如果是IO密集的应用，线程数可能成为瓶颈）</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 得到需要执行的任务列表</span></span><br><span class="line">        List&lt;CompletableFuture&lt;CardInfo&gt;&gt; futureList = cardList.stream().map(info -&gt; &#123;</span><br><span class="line">            String[] split = info.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; queryCardInfo(split[<span class="number">1</span>], split[<span class="number">0</span>]), threadPool);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// allOf 代表所有依赖的任务执行完成，才会结束</span></span><br><span class="line">        <span class="type">CompletableFuture</span> <span class="variable">allFuture</span> <span class="operator">=</span> CompletableFuture.allOf(futureList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[futureList.size()]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 任务都执行完成就将结果聚合返回</span></span><br><span class="line">        allFuture.thenAccept(o -&gt;</span><br><span class="line">            futureList.forEach(job -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result.add(job.get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">        allFuture.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;展示结果集:&quot;</span> + JSONUtil.parse(result));</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时 &quot;</span> + time);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到执行结果就是最慢的D银行的时间  5059毫秒。说明任务是同步进行的，结果集依赖所有任务执行完成，所以响应时间就是最慢的D银行API 5秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查询A银行-2秒</span><br><span class="line">查询B银行-3秒</span><br><span class="line">查询C银行-4秒</span><br><span class="line">查询D银行-5秒</span><br><span class="line">展示结果集:[&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;A&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;1111&quot;</span>&#125;,&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;B&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;2222&quot;</span>&#125;,&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;C&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;3333&quot;</span>&#125;,&#123;<span class="string">&quot;bank&quot;</span>:<span class="string">&quot;D&quot;</span>,<span class="string">&quot;money&quot;</span>:100,<span class="string">&quot;cardNo&quot;</span>:<span class="string">&quot;4444&quot;</span>&#125;]</span><br><span class="line">耗时 5059</span><br></pre></td></tr></table></figure><blockquote><p>OK，上面就是一个简单的Completablefuture使用Demo实践。下一篇再出一个Completablefuture使用原理<br>关于Completablefuture的文章，建议大家去看下 <a href="https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html">美团的技术博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL入门基础SQL</title>
      <link href="/mysql-started.html"/>
      <url>/mysql-started.html</url>
      
        <content type="html"><![CDATA[<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>以用户表举例，有如下表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `user_info` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="增（Create）"><a href="#增（Create）" class="headerlink" title="增（Create）"></a>增（Create）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新增一条记录用户名为 张三 年龄为 20</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> user_info (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="删（Delete）"><a href="#删（Delete）" class="headerlink" title="删（Delete）"></a>删（Delete）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据 主键ID删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 根据 用户名删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="查（Read）"><a href="#查（Read）" class="headerlink" title="查（Read）"></a>查（Read）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据 主键ID查询全部字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 根据 用户名查询全部字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 根据 主键ID 仅查询用户名和年龄字段</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 根据 用户名 仅查询年龄字段</span></span><br><span class="line"><span class="keyword">SELECT</span> age <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询年龄大于18岁的用户名</span></span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br><span class="line"><span class="comment">-- 范围查询-查询年龄在18岁到60之间的的用户信息</span></span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">18</span> <span class="keyword">AND</span> <span class="number">60</span>;</span><br><span class="line"><span class="comment">-- 模糊查询-查以 张 开头的用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `user_info` <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="改（Update）"><a href="#改（Update）" class="headerlink" title="改（Update）"></a>改（Update）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改 张三年龄为99</span></span><br><span class="line"><span class="keyword">UPDATE</span> `user_info` <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">99</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改 主键ID为1的用户名和年龄改为李四 60</span></span><br><span class="line"><span class="keyword">UPDATE</span> `user_info` <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>, age <span class="operator">=</span> <span class="number">60</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>A表 和 B表 通过某个字段关联查询（如name关联）</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>被用作关联查询的字段要建立索引</li><li>用小表驱动大表：将数据量小的表首先连接，再去连接数据量大的表</li></ul><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><p><strong>效果：</strong>左表(A表)的数据全部展示，右表(B表)满足连接条件的记录展示，不满足条件的记录则全是展示NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.name <span class="operator">=</span> B.name</span><br></pre></td></tr></table></figure><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><p><strong>效果：</strong>右表(B表)的数据全部展示，左表(A表)满足连接条件的记录展示，不满足条件的记录则全是展示NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.name <span class="operator">=</span> B.name</span><br></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p><strong>效果：</strong>左表(A表) 和 右表(B表) 同时满足条件记录的交集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.name <span class="operator">=</span> B.name</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><ul><li>将多条 SELECT语句结果 进行 拼接。每一条SELECT语句结果字段数必须严格一致</li><li>只要求SELECT结果字段一样，跟数据类型无关<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 两个SELECT结果集拼接效果</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> A.name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> B.age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>在一条SELECT语句中又包含了一条SELECT语句，即在某个查询结果集上再进行一个查询</p><h3 id="From子查询"><a href="#From子查询" class="headerlink" title="From子查询"></a>From子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将里面的查询结果定义别名为A，再用一条SELECT查询A</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> user_info) <span class="keyword">AS</span> A;</span><br></pre></td></tr></table></figure><h3 id="Where子查询"><a href="#Where子查询" class="headerlink" title="Where子查询"></a>Where子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将里面的查询结果集 作为外层查询的条件（内层查出年龄大于50的用户名，外层查包含这一批用户名的用户）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> name <span class="keyword">IN</span> (<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">50</span>)</span><br></pre></td></tr></table></figure><h3 id="Exists子查询"><a href="#Exists子查询" class="headerlink" title="Exists子查询"></a>Exists子查询</h3><p>Exists是否存在的意思，返回的结果只有0和1。Exists子查询用于判断满足某个条件才展示（跨库或多表情况下使用）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询用户信息，要求有某个用户年龄大于100，才展示记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> age <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>ALTER TABLE table_name ADD [UNIQUE|FULLTEXT|SPATIAL] [INDEX|KEY] [index_name] (col_name[length],…) [ASC|DESC]</p><h3 id="主键-聚集索引"><a href="#主键-聚集索引" class="headerlink" title="主键(聚集索引)"></a>主键(聚集索引)</h3><p>是一种特殊的唯一索引，一张表只能定义一个主键 primary key</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> user_info <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span>(id);</span><br></pre></td></tr></table></figure><h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><p>索引定义多个列 INDEX(columnA, columnB)<br>如果创建了一个联合索引(key1,key2,key3)，那么相当于创建了(key1)、(key1,key2)、(key1,key2,key3) 三个索引，这就是最左匹配原则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> user_info <span class="keyword">ADD</span> INDEX idx_name_age (name, age);</span><br></pre></td></tr></table></figure><h3 id="唯一索引-UNIQUE"><a href="#唯一索引-UNIQUE" class="headerlink" title="唯一索引(UNIQUE)"></a>唯一索引(UNIQUE)</h3><p>保证数据记录的唯一性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> user_info <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> idx_name(name);</span><br></pre></td></tr></table></figure><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>索引定义一个列 INDEX(columnA)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> user_info <span class="keyword">ADD</span> INDEX idx_age(age);</span><br></pre></td></tr></table></figure><h3 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引(FULLTEXT)"></a>全文索引(FULLTEXT)</h3><p>将整个字段内容分词，便于查到长文本中出现的某个词。<br>与LIKE相似，但只支持数据库引擎为MYISAM的数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> user_info <span class="keyword">ADD</span> FULLTEXT INDEX fulltext_name(name);</span><br><span class="line"><span class="comment">-- 全文索引的查询方式跟LIKE有所不同</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(name) AGAINST (<span class="string">&#x27;四&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows任务计划实现定时提醒弹窗</title>
      <link href="/windows-explain-todo.html"/>
      <url>/windows-explain-todo.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过windows任务计划程序实现定时提醒功能</p></blockquote><p>做为打工人的我们，一定要注重自己的身体健康。一天在办公室时间这么长，久坐对身体危害极大。</p><p>市场上有一些TODO软件可以做到提醒功能，但是过于臃肿。用windows计划任务 + 简单vbs弹窗。就满足我们的要求了，实现过程如下：</p><span id="more"></span><h2 id="第一步-编写弹窗代码vbs文件"><a href="#第一步-编写弹窗代码vbs文件" class="headerlink" title="第一步 编写弹窗代码vbs文件"></a>第一步 编写弹窗代码vbs文件</h2><p>打开记事本，填入一下内容。 保存为 <code>久坐提醒.vbs</code> 注意编码选 <strong>ANSI</strong>。</p><ul><li>第一个参数 弹窗内容</li><li>第二个参数 4096代表 置顶弹出</li><li>第三个参数 弹窗标题</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=msgbox(<span class="string">&quot;一个小时没动了，赶紧活动活动！&quot;</span>, 4096, <span class="string">&quot;久坐提醒&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/26/RJa7bonuZt5GdhH.png"></p><p>我们可以双击该文件，可以看到如下弹窗</p><p><img src="https://s2.loli.net/2022/05/26/tlKR3pO4yX1VJMv.png"></p><h2 id="第二步-配置Windows任务计划"><a href="#第二步-配置Windows任务计划" class="headerlink" title="第二步 配置Windows任务计划"></a>第二步 配置Windows任务计划</h2><p><strong>1、利用window搜索 进入任务计划程序</strong></p><p><img src="https://s2.loli.net/2022/05/26/nx4skHQj7K8vAPS.png"></p><p><strong>2、点击 <code>任务计划程序库</code> 右键 新文件夹，创建一个目录，比如我创建一个 Diy 文件夹</strong></p><p><img src="https://s2.loli.net/2022/05/26/npba8FyZzC2d59T.png"></p><p><strong>3、右键 -&gt; 创建任务 -&gt; 输入任务名称 -&gt; 点击到 触发器栏 -&gt; 新建触发器</strong></p><p><img src="https://s2.loli.net/2022/05/26/5VtSg6oczqxLwRT.png"></p><p><strong>4、触发器我配置的是周一到周五，从九点开始每隔一小时提醒一次</strong></p><p><img src="https://s2.loli.net/2022/05/26/2awsF8uQCGMhzUf.png"></p><p><strong>5、新建操作项，选启动程序，指定到之前保存的文件</strong></p><p><img src="https://s2.loli.net/2022/05/26/FNRK2p3de69C1QM.png"></p><h2 id="第三步-验证"><a href="#第三步-验证" class="headerlink" title="第三步 验证"></a>第三步 验证</h2><p>直接右键点击运行即可验证是否配置正常</p><p><img src="https://s2.loli.net/2022/05/26/OSUB5aemgZJ8hz7.png"></p><p>这样就实现了，每隔一小时 弹窗提醒 该活动啦！</p><p>工作忘我的时候，置顶弹窗提醒。毕竟身体健康最重要啊！！！</p>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过@ConfigurationProperties注解配置属性并校验参数</title>
      <link href="/configuration-validated.html"/>
      <url>/configuration-validated.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Spring boot项目中，采用@ConfigurationProperties(frefix &#x3D; “config”)配置实体参数。</p></blockquote><blockquote><p>启动项目之后，会遇到Nacos配置忘记填，导致配置属性为空。(不像@value注解，不配置参数就会启动报错，可以立马发现配置没写)</p></blockquote><blockquote><p>那么ConfigurationProperties实体配置有没有办法在项目启动时，没填写就启动报错、校验参数是否已经在nacos填写完成呢？ 恭喜你本文就是答案！！！</p></blockquote><span id="more"></span><h2 id="1-通过Springboot的-Validated注解实现对象实体参数校验"><a href="#1-通过Springboot的-Validated注解实现对象实体参数校验" class="headerlink" title="1. 通过Springboot的@Validated注解实现对象实体参数校验"></a>1. 通过Springboot的@Validated注解实现对象实体参数校验</h2><ul><li>对象实体类上加上@Validated注解</li><li>在属性上加上javax.validation.constraints包下面对应的参数校验注解</li><li>@NotNull：不能为null，但可以为empty</li><li>@NotEmpty：不能为null，而且长度必须大于0</li><li>@NotBlank：只能作用在String上，不能为null，而且调用trim()后，长度必须大于0</li></ul><h2 id="2-普通实体类配置校验"><a href="#2-普通实体类配置校验" class="headerlink" title="2. 普通实体类配置校验"></a>2. 普通实体类配置校验</h2><p>普通的对象配置，举例在nacos中需要如下配置信息：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>那么对应的对象配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-如果Nacos中未配置属性，启动报错信息如下"><a href="#2-1-如果Nacos中未配置属性，启动报错信息如下" class="headerlink" title="2.1 如果Nacos中未配置属性，启动报错信息如下"></a>2.1 如果Nacos中未配置属性，启动报错信息如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2022-05-18 16:52:29 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener -- </span><br><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#x27;debug&#x27; enabled.</span><br><span class="line">2022-05-18 16:52:29 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter -- </span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line">Description:</span><br><span class="line">Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under &#x27;config&#x27; to config.properties.ConfigProperties$$EnhancerBySpringCGLIB$$3398961e failed:</span><br><span class="line"></span><br><span class="line">    Property: config.username</span><br><span class="line">    Value: null</span><br><span class="line">    Reason: 不能为空</span><br><span class="line"></span><br><span class="line">    Property: config.age</span><br><span class="line">    Value: null</span><br><span class="line">    Reason: 不能为null</span><br><span class="line"></span><br><span class="line">    Property: config.password</span><br><span class="line">    Value: null</span><br><span class="line">    Reason: 不能为空</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line">Update your application&#x27;s configuration</span><br></pre></td></tr></table></figure><h3 id="2-2-获取属性，能动态刷新配置"><a href="#2-2-获取属性，能动态刷新配置" class="headerlink" title="2.2 获取属性，能动态刷新配置"></a>2.2 获取属性，能动态刷新配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ConfigProperties config;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(config.getUsername);</span><br><span class="line">    System.out.println(config.getPassword);</span><br><span class="line">    System.out.println(config.getAge);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-带内部类实体配置校验"><a href="#2-带内部类实体配置校验" class="headerlink" title="2. 带内部类实体配置校验"></a>2. 带内部类实体配置校验</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">profession:</span> <span class="string">厨师</span></span><br><span class="line">    <span class="attr">hobby:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">吃饭</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">睡觉</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">打豆豆</span></span><br><span class="line">  <span class="attr">enterprise:</span></span><br><span class="line">    <span class="attr">company:</span> <span class="string">五星米其林总部</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">火星</span></span><br></pre></td></tr></table></figure><p>对应的Java对象配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Info info;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Enterprise enterprise;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 专业</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@NotEmpty</span></span><br><span class="line">        <span class="keyword">private</span> String profession;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 爱好</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 企业信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 公司名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@NotEmpty</span></span><br><span class="line">        <span class="keyword">private</span> String company;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 地址</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@NotEmpty</span></span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问对象可以看到属性已经配置成功，并且有校验</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigProperties(username=张三, password=admin, age=20, info=ConfigProperties.Info(profession=厨师, hobby=[吃饭, 睡觉, 打豆豆]), enterprise=ConfigProperties.Enterprise(company=五星米其林总部, address=火星))</span><br></pre></td></tr></table></figure><h3 id="2-1-对应有校验注解的属性，不配置启动就会报错提示，对于不需要校验的配置不加注解即可，并且这种方式配置支持动态刷新"><a href="#2-1-对应有校验注解的属性，不配置启动就会报错提示，对于不需要校验的配置不加注解即可，并且这种方式配置支持动态刷新" class="headerlink" title="2.1 对应有校验注解的属性，不配置启动就会报错提示，对于不需要校验的配置不加注解即可，并且这种方式配置支持动态刷新"></a>2.1 对应有校验注解的属性，不配置启动就会报错提示，对于不需要校验的配置不加注解即可，并且这种方式配置支持动态刷新</h3>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10开启Linux子系统教程</title>
      <link href="/win-subsystem-linux.html"/>
      <url>/win-subsystem-linux.html</url>
      
        <content type="html"><![CDATA[<h1 id="Win10子系统Ubuntu-18-04"><a href="#Win10子系统Ubuntu-18-04" class="headerlink" title="Win10子系统Ubuntu-18.04"></a>Win10子系统Ubuntu-18.04</h1><p>windows subsystem for linux简称WSL。使用原生安装方便快捷，无需再安装虚拟机，从安装到运行最全教程，并开启SSH开机自启，用xshell终端连接。</p><h2 id="1-开启Linux子系统环境"><a href="#1-开启Linux子系统环境" class="headerlink" title="1. 开启Linux子系统环境"></a>1. 开启Linux子系统环境</h2><p>打开所有设置 -&gt; 应用 -&gt; 程序和功能 -&gt; 启动或关闭Windows功能 -&gt; 勾选适用于Linux的Windows子系统 -&gt; 重启电脑<br><img src="https://s2.loli.net/2022/05/16/7z3ETes96ZcDuvi.png"></p><h2 id="2-Microsoft-Store安装Ubuntu"><a href="#2-Microsoft-Store安装Ubuntu" class="headerlink" title="2. Microsoft Store安装Ubuntu"></a>2. Microsoft Store安装Ubuntu</h2><p>打开Microsoft Store应用商店，搜索Ubuntu-18.04，下载完成之后。点击图标打开，进行安装。<br><img src="https://s2.loli.net/2022/05/16/q6lsPM489Ljbxak.png"></p><p>在出现需要输入username的时候，就已经安装完成了，可以选择创建自己的用户名。但是我不想创建用户，想直接用root用户，怎么办呢？<br><img src="https://s2.loli.net/2022/05/16/92QihzNkXsfw5E6.png"></p><p>很简单，在Microsoft Store应用商店搜索<strong>Windows Terminal</strong>下载并打开。点击下箭头，选中Ubuntu-18.04。就自动以root用户登录了。<br><img src="https://s2.loli.net/2022/05/16/Hn389aFvVduz7p1.png"><br><img src="https://s2.loli.net/2022/05/16/sbkhndyoH9TSGi3.png"><br>这个时候，我们就可以自己设置root的密码，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--设置root账号密码。根据提示输入两次密码即可设置成功。</span><br><span class="line"><span class="built_in">sudo</span> passwd root</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure><p>通过<code>Windows Terminal</code>终端其实就已经满足我们的连接需求了，但是想通过自定义的终端软件连接怎么操作呢？继续往下瞧，我拿Xshell举例。</p><h2 id="3-配置openssh-server"><a href="#3-配置openssh-server" class="headerlink" title="3. 配置openssh-server"></a>3. 配置openssh-server</h2><h3 id="卸载重装一遍ssh服务（防止子系统openssh组件不完整）"><a href="#卸载重装一遍ssh服务（防止子系统openssh组件不完整）" class="headerlink" title="卸载重装一遍ssh服务（防止子系统openssh组件不完整）"></a>卸载重装一遍ssh服务（防止子系统openssh组件不完整）</h3><p>首先先执行 <code>apt-get update</code> 更新源信息，再操作安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 中间确定选 “Y”</span></span><br><span class="line">apt-get remove openssh-server</span><br><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure><h3 id="编辑sshd-config文件-只需修改这三项就行"><a href="#编辑sshd-config文件-只需修改这三项就行" class="headerlink" title="编辑sshd_config文件(只需修改这三项就行)"></a>编辑sshd_config文件(只需修改这三项就行)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">Port 2222 <span class="comment">#设置ssh的端口号, 默认22，但22在windows中可能会端口冲突</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span> <span class="comment"># 可以root远程登录</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span> <span class="comment"># 密码验证登录</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/16/a4hsbSmJ9dWGjyf.png"></p><h3 id="执行重启ssh服务"><a href="#执行重启ssh服务" class="headerlink" title="执行重启ssh服务"></a>执行重启ssh服务</h3><p>sudo service ssh –full-restart</p><h3 id="Xshell连接"><a href="#Xshell连接" class="headerlink" title="Xshell连接"></a>Xshell连接</h3><p><img src="https://s2.loli.net/2022/05/16/I3zOCWt4ZXAoeqi.png"><br>输入root账号密码，登录成功！！！ 大功告成</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>有一个问题：电脑关机重启之后，xshell就会连接不上。</p></blockquote><p><strong>这是因为Window子系统的SSH是默认关闭的，电脑关机或重启之后，子系统的SSH又会自动关闭，所以需要设置自动启动脚本</strong></p><h3 id="编写vbs自启ssh脚本"><a href="#编写vbs自启ssh脚本" class="headerlink" title="编写vbs自启ssh脚本"></a>编写vbs自启ssh脚本</h3><p>输入 <code>Win + R</code> 打运行窗口输入 <code>shell:startup</code> 进入Windows自启目录，在这个目录新建一个 <code>openssh.vbs</code> 文件（文件名称随意，后缀名是.vbs）</p><p>文件内容如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set ws = CreateObject(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;wsl -d Ubuntu-18.04 -u root /etc/init.d/ssh start&quot;</span>, vbhide</span><br></pre></td></tr></table></figure><p>保存文件之后，双击执行，如果没有报错，再用xshell重新连接发现就可以了。</p><p>如果报错了，检查一下文件的编码是不是<code>ANSI</code>，改编码再保存一下就可以了</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米路由器安装filebrowser</title>
      <link href="/filebrowser-mirouter.html"/>
      <url>/filebrowser-mirouter.html</url>
      
        <content type="html"><![CDATA[<h2 id="Filebrowser在Window环境下编译打包到路由器"><a href="#Filebrowser在Window环境下编译打包到路由器" class="headerlink" title="Filebrowser在Window环境下编译打包到路由器"></a>Filebrowser在Window环境下编译打包到路由器</h2><blockquote><p>由于releases页面中的十多个包中，并没有mips平台的包，只能自己编译打包<br>对于 使用Go语言做开发的同学，这个问题很简单，可以咱不会GO怎么办，小白来一步步演示如何编译打包到自己的小米路由器<br>成功搭建自己的文件管理 + 私人网盘</p></blockquote><span id="more"></span><p><img src="https://s2.loli.net/2022/04/18/NTGR2qLduSxXwUg.png"></p><h2 id="1-首先，Window上需要安装环境"><a href="#1-首先，Window上需要安装环境" class="headerlink" title="1 首先，Window上需要安装环境"></a>1 首先，Window上需要安装环境</h2><ul><li>安装go 下载地址：<a href="https://go.dev/dl/go1.18.1.windows-amd64.msi">https://go.dev/dl/go1.18.1.windows-amd64.msi</a></li><li>安装nodejs  下载地址：<a href="https://nodejs.org/dist/v16.14.2/node-v16.14.2-x64.msi">https://nodejs.org/dist/v16.14.2/node-v16.14.2-x64.msi</a></li></ul><p><strong>安装没什么好说的，下载之后直接点下一步下一步就安装好了</strong></p><h2 id="2-下载filebrowser源码，编译前端静态资源"><a href="#2-下载filebrowser源码，编译前端静态资源" class="headerlink" title="2 下载filebrowser源码，编译前端静态资源"></a>2 下载filebrowser源码，编译前端静态资源</h2><p>源码地址：<a href="https://github.com/filebrowser/filebrowser">https://github.com/filebrowser/filebrowser</a></p><p>电脑有安装Git的话，直接clone。没有的话就下载zip<br><img src="https://s2.loli.net/2022/04/18/ltdBCeIMiES3FPm.png"></p><p>CMD窗口进入源码根目录</p><p>依次执行这三条命令<br>先编译前端资源，进入前端目录 <code>cd frontend</code><br>安装依赖 <code>npm ci</code><br><strong>注意了 敲黑板了这里有一个坑 需要修改package.json的配置，因为Window下没有这个命令会报错。</strong>然后再执行 <code>npm run build</code><br><img src="/img/article/20220416172948.png"></p><p>等待一下，看到这个结果就证明前端资源打包好了（中间会出现警告 可以忽略）<br><img src="https://s2.loli.net/2022/04/18/q3GbArSEwkFM6a1.png"></p><h2 id="3-配置对应平台编译配置"><a href="#3-配置对应平台编译配置" class="headerlink" title="3 配置对应平台编译配置"></a>3 配置对应平台编译配置</h2><p>以我的路由器为例，查看系统信息，确定平台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">uname</span> -a</span><br><span class="line">&gt; Linux  mips GNU/Linux</span><br></pre></td></tr></table></figure><p><strong>注意啦，如果你也是用这款小米路由器，一定不要被这个 <code>mips</code> 平台迷惑了</strong><br>mips存在两种架构，分别为大端和小端，其中mips代表大端方式；而mipsle代表小端方式，我的小米路由器使用的mips处理器是小端方式，如果我们使用mips则运行会出现如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line 1: syntax error: unexpected &quot;(&quot;</span><br></pre></td></tr></table></figure><p>所以正确的平台应该是 <code>mipsle</code>。</p><blockquote><p>OK，确定了系统平台之后，我们开始设置GO的编译环境</p></blockquote><p>回到filebrowser根目录，执行如下命令，设置环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET GOOS=linux</span><br><span class="line">SET GOARCH=mipsle</span><br></pre></td></tr></table></figure><p>执行编译打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build main.go</span><br></pre></td></tr></table></figure><p>等待片刻，会在目录下生成一个main文件（不带后缀名的）<br><img src="https://s2.loli.net/2022/04/18/2CYHoDSu96rAKwF.png"></p><h2 id="4-上传到路由器，执行初始化并运行"><a href="#4-上传到路由器，执行初始化并运行" class="headerlink" title="4 上传到路由器，执行初始化并运行"></a>4 上传到路由器，执行初始化并运行</h2><p>改名为<code>filebrowser</code>，放到<code>/etc</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 给予权限</span><br><span class="line"><span class="built_in">chmod</span> 755 filebrowser</span><br><span class="line">// 初始化配置数据库</span><br><span class="line">./filebrowser -d filebrowser.db config init</span><br><span class="line">// 设置无限制访问</span><br><span class="line">./filebrowser -d filebrowser.db config <span class="built_in">set</span> --address 0.0.0.0</span><br><span class="line">// 设置端口</span><br><span class="line">./filebrowser -d filebrowser.db config <span class="built_in">set</span> --port 8080</span><br><span class="line">// 设置管理员账号密码</span><br><span class="line">./filebrowser -d filebrowser.db <span class="built_in">users</span> add admin 123456 --perm.admin</span><br><span class="line"></span><br><span class="line">// 启动</span><br><span class="line">daemon /etc/filebrowser -d /etc/filebrowser.db</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 测试连接</span><br><span class="line">&gt; curl 127.0.0.1:8080</span><br></pre></td></tr></table></figure><p>游览器访问 <strong>路由器IP：端口</strong>就完成搭建了</p><blockquote><p>遇到的问题，filebrowser的版本号显示异常，但是不影响使用<br><img src="https://s2.loli.net/2022/04/18/5Tsve4rU6pF78m9.png"></p></blockquote><h2 id="5-filebrowser开启https"><a href="#5-filebrowser开启https" class="headerlink" title="5 filebrowser开启https"></a>5 filebrowser开启https</h2><p>1.首先获取自己域名的证书，这里以阿里云免费证书为例，选择下载证书后，得到一个压缩包，我们需要用到 <code>.key</code> 和 <code>.pem</code> 这两个文件。上传到路由器。<br><img src="https://s2.loli.net/2022/07/11/Bo4uyb2XRMtx3Li.png"></p><p>2.配置到filebrowser.db中，文件目录和名称记得替换成你们自己的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./filebrowser -d filebrowser.db config <span class="built_in">set</span> --key /etc/dollcode.key</span><br><span class="line">./filebrowser -d filebrowser.db config <span class="built_in">set</span> --cert /etc/dollcode.pem</span><br></pre></td></tr></table></figure><p>3.kill掉进程，重新执行启动命令。浏览器用域名访问，就需要加上https前缀了，http方式就打不开了（会提示Client sent an HTTP request to an HTTPS server.）<br><img src="https://s2.loli.net/2022/07/11/rmtN8T3s4zjd6bn.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows开机自动发送邮件</title>
      <link href="/win-autoemail.html"/>
      <url>/win-autoemail.html</url>
      
        <content type="html"><![CDATA[<p><strong>最近有一个场景需要监控家里的电脑的开机情况，远程操作开机并启动一些服务,</strong></p><p><strong>需要知道开机状态。实现开机之后自动发送邮件通知。（七月更新增加：采用Windows任务计划完成开机发送邮件，高效快捷）</strong><br><br/><br><br/></p><blockquote><p>网上有很多大神都是直接自己手撸代码，实现一个Windows服务，或者VB写的，过于专业。<br>小白只想偷懒，于是找到了一个工具 <a href="https://www.blat.net/">Blat官网</a> 可以直接实现邮件功能</p></blockquote><h3 id="1-首先下载Blat"><a href="#1-首先下载Blat" class="headerlink" title="1. 首先下载Blat"></a>1. 首先下载Blat</h3><p>工具下载地址 <a href="https://sourceforge.net/projects/blat/files/">https://sourceforge.net/projects/blat/files/</a> 。解压放到C盘创建的全英文目录下<br><img src="https://s2.loli.net/2022/05/05/Tpv7fzwo3JYxtm8.png"></p><h3 id="2-创建bat文件"><a href="#2-创建bat文件" class="headerlink" title="2. 创建bat文件"></a>2. 创建bat文件</h3><p>在当前目录新建一个 <strong>send.bat</strong> 文件，<strong>因为电脑开机连接网络需要时间，所以发送20次ping做延迟发送</strong><br>可以根据自己的实际网络情况调整， <code>C:\quickStart\blat3222\full\blat.exe</code> 替换成你自己的路径<br>填入以下内容。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">::<span class="built_in">chcp</span> <span class="number">65001</span> 设置编码，防止中文乱码</span><br><span class="line">::最后加入 <span class="built_in">pause</span> 可显示窗口用于排查问题，可删除</span><br><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem ----延时执行----</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com -n <span class="number">20</span></span><br><span class="line"><span class="function">f:</span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="comment"><span class="function">rem ----邮件主题----</span></span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">s</span>=&quot;%<span class="title">time</span>%  %<span class="title">computername</span>% 开机&quot;</span></span><br><span class="line"><span class="function"><span class="title">rem</span> ----邮件内容-----</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">body</span>=&quot;%<span class="title">date</span>%  %<span class="title">time</span>%  %<span class="title">computername</span>%  %<span class="title">username</span>%  开机&quot;</span></span><br><span class="line"><span class="function"><span class="title">rem</span> ----收件邮箱-----</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">t</span>=<span class="title">xxx</span>@<span class="title">qq.com</span></span></span><br><span class="line"><span class="function"><span class="title">rem</span> ----发件邮箱-----</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">f</span>=<span class="title">xxx</span>@163.<span class="title">com</span></span></span><br><span class="line"><span class="function"><span class="title">rem</span> ----邮箱秘钥-----</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">pw</span>=<span class="title">xxx</span></span></span><br><span class="line"><span class="function"><span class="title">rem</span> ----执行发送-----</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">quickStart</span>\<span class="title">blat3222</span>\<span class="title">full</span>\<span class="title">blat.exe</span> -<span class="title">body</span> %<span class="title">body</span>% -<span class="title">s</span> %<span class="title">s</span>% -<span class="title">t</span> %<span class="title">t</span>% -<span class="title">server</span> <span class="title">smtp</span>.163.<span class="title">com</span> -<span class="title">f</span> %<span class="title">f</span>% -<span class="title">u</span> %<span class="title">f</span>% -<span class="title">pw</span> %<span class="title">pw</span>%</span></span><br><span class="line"><span class="function">::<span class="title">pause</span></span></span><br></pre></td></tr></table></figure><p><strong>配置说明</strong></p><ol><li>%date% 会显示为电脑日期</li><li>%time% 会显示为电脑时间</li><li>%computername% 会显示为电脑名称</li><li>%username% 会显示为电脑用户名</li><li><code>- server</code>参数 如果用QQ邮箱发送填 smtp.qq.com；163邮箱发送填smtp.163.com</li></ol><h3 id="3-测试运行"><a href="#3-测试运行" class="headerlink" title="3. 测试运行"></a>3. 测试运行</h3><h4 id="双击send-bat即可触发运行"><a href="#双击send-bat即可触发运行" class="headerlink" title="双击send.bat即可触发运行"></a>双击send.bat即可触发运行</h4><p><img src="https://s2.loli.net/2022/05/05/xbriDmaY3qclg6J.png"></p><h4 id="收到邮件"><a href="#收到邮件" class="headerlink" title="收到邮件"></a>收到邮件</h4><p><img src="https://s2.loli.net/2022/05/05/npcXITuv6UHBKy8.png"></p><h3 id="4-设置自启发送"><a href="#4-设置自启发送" class="headerlink" title="4. 设置自启发送"></a>4. 设置自启发送</h3><h4 id="方法一：配置window任务计划程序-开机就触发，推荐"><a href="#方法一：配置window任务计划程序-开机就触发，推荐" class="headerlink" title="方法一：配置window任务计划程序(开机就触发，推荐)"></a>方法一：配置window任务计划程序(开机就触发，推荐)</h4><h4 id="找到任务计划程序。创建一个文件夹，然后右键-创建基本任务。输入任务名称-随意名称"><a href="#找到任务计划程序。创建一个文件夹，然后右键-创建基本任务。输入任务名称-随意名称" class="headerlink" title="找到任务计划程序。创建一个文件夹，然后右键 创建基本任务。输入任务名称(随意名称)"></a>找到<code>任务计划程序</code>。创建一个文件夹，然后右键 <code>创建基本任务</code>。输入任务名称(随意名称)</h4><p><img src="https://s2.loli.net/2022/07/27/msFwp7ZYxLvONWa.png"><br><img src="https://s2.loli.net/2022/07/27/z2WcFCUPHirjRTY.png"><br><img src="https://s2.loli.net/2022/07/27/U15a68lrwmF7zpK.png"><br><img src="https://s2.loli.net/2022/07/27/Bkzhf27Wo5icjaw.png"></p><h4 id="脚本选择创建好的send-bat"><a href="#脚本选择创建好的send-bat" class="headerlink" title="脚本选择创建好的send.bat"></a>脚本选择创建好的<code>send.bat</code></h4><p><img src="https://s2.loli.net/2022/07/27/CKUPN8R1bf4Gd9w.png"></p><h4 id="勾选-打开此任务属性对话框"><a href="#勾选-打开此任务属性对话框" class="headerlink" title="勾选 打开此任务属性对话框"></a>勾选 打开此任务属性对话框</h4><p><img src="https://s2.loli.net/2022/07/27/TFEgS31AvqYD5d9.png"></p><h4 id="配置不管用户是否登录都要运行、最高权限-会需要输入账户密码"><a href="#配置不管用户是否登录都要运行、最高权限-会需要输入账户密码" class="headerlink" title="配置不管用户是否登录都要运行、最高权限(会需要输入账户密码)"></a>配置不管用户是否登录都要运行、最高权限(会需要输入账户密码)</h4><p><img src="https://s2.loli.net/2022/07/27/F7sYjEvUqemQIbW.png"></p><h4 id="编辑触发器设置延迟执行-防止启动时电脑还未完成联网，导致发送邮件失败"><a href="#编辑触发器设置延迟执行-防止启动时电脑还未完成联网，导致发送邮件失败" class="headerlink" title="编辑触发器设置延迟执行(防止启动时电脑还未完成联网，导致发送邮件失败)"></a>编辑触发器设置延迟执行(防止启动时电脑还未完成联网，导致发送邮件失败)</h4><p><img src="https://s2.loli.net/2022/07/27/uJchLNtwgPQYMjk.png"></p><h4 id="条件栏-去掉电源选项，勾选网络选项"><a href="#条件栏-去掉电源选项，勾选网络选项" class="headerlink" title="条件栏-去掉电源选项，勾选网络选项"></a>条件栏-去掉电源选项，勾选网络选项</h4><p><img src="https://s2.loli.net/2022/07/27/jIbuawNoDMXlY9G.png"></p><h4 id="点击确定-输入密码-重启验证即可"><a href="#点击确定-输入密码-重启验证即可" class="headerlink" title="点击确定-输入密码-重启验证即可"></a>点击确定-输入密码-重启验证即可</h4><p><img src="https://s2.loli.net/2022/07/27/CdIq7GRgX3iDa1k.png"></p><hr><h4 id="方法二：加入Windows自启项目录-需要用户登录之后，才能触发"><a href="#方法二：加入Windows自启项目录-需要用户登录之后，才能触发" class="headerlink" title="方法二：加入Windows自启项目录(需要用户登录之后，才能触发)"></a>方法二：加入Windows自启项目录(需要用户登录之后，才能触发)</h4><h4 id="win-R打开运行窗口-gt-输入shell-startup"><a href="#win-R打开运行窗口-gt-输入shell-startup" class="headerlink" title="win+R打开运行窗口 -&gt; 输入shell:startup"></a><code>win+R</code>打开运行窗口 -&gt; 输入<code>shell:startup</code></h4><p><img src="https://s2.loli.net/2022/05/05/6oimUNWI1vS59nQ.png"></p><h4 id="选中-send-bat-右键创建快捷方式，将快捷方式移动到启动目录"><a href="#选中-send-bat-右键创建快捷方式，将快捷方式移动到启动目录" class="headerlink" title="选中 send.bat 右键创建快捷方式，将快捷方式移动到启动目录"></a>选中 <code>send.bat</code> 右键创建快捷方式，将快捷方式移动到启动目录</h4><p><img src="https://s2.loli.net/2022/05/05/I6RMonHxBOp4Gk8.png"></p><h4 id="添加之后，可以在应用-启动中看到"><a href="#添加之后，可以在应用-启动中看到" class="headerlink" title="添加之后，可以在应用-启动中看到"></a>添加之后，可以在应用-启动中看到</h4><p><img src="https://s2.loli.net/2022/05/05/CcEaO3ioUW6VZyg.png"><br><strong>设置完成，重启测试即可！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实测小米MIX4刷机欧版MIUI纪录</title>
      <link href="/mix4-miuieu.html"/>
      <url>/mix4-miuieu.html</url>
      
        <content type="html"><![CDATA[<p>小米MIX4刷机欧版MIUI的全过程，并附带MIUI列表精简指南。</p><blockquote><p>关于MIUI国行版和欧版的区别就不多说，网上大把的文章，其核心就是突出一个干净无广告。毕竟ROM包的体积小了2G<br><strong>最愉悦的感受就是“相册”。国行相册只要不点同意，每次进入都要弹出提示，恶心至极</strong><br>但目前由于没有MIX4的TWRP  PS:现在已经有了 <a href="https://twrp.me/xiaomi/xiaomimimix4.html">https://twrp.me/xiaomi/xiaomimimix4.html</a><br>走Fastboot刷机。流程也没有网上文章说的麻烦，一个刷机包就可以搞定整个刷机流程，不需要多余的软件<br>提示：刷机有风险，操作需谨慎。</p></blockquote><span id="more"></span><h3 id="刷机流程"><a href="#刷机流程" class="headerlink" title="刷机流程"></a>刷机流程</h3><h4 id="必要前提"><a href="#必要前提" class="headerlink" title="必要前提"></a>必要前提</h4><ol><li>使用小米助手备份整个手机</li><li>打开 开发者模式-勾选USB调试</li><li>解锁BL</li><li>准备一个有魔法的WIFI</li><li>手机电量在70%以上</li><li>数据线最好直插电脑USB口，过程中不要移动手机，防止断流</li></ol><h4 id="1-解锁BL"><a href="#1-解锁BL" class="headerlink" title="1. 解锁BL"></a>1. 解锁BL</h4><p>这一部分按照网上的说明，一步步操作即可。<br>解锁： <a href="https://miuiver.com/how-to-unlock-xiaomi-phone/">https://miuiver.com/how-to-unlock-xiaomi-phone/</a></p><h4 id="2-下载欧版MIUI包"><a href="#2-下载欧版MIUI包" class="headerlink" title="2. 下载欧版MIUI包"></a>2. 下载欧版MIUI包</h4><p>欧版官网地址：<a href="https://xiaomi.eu/">https://xiaomi.eu</a></p><ol><li>进入欧版MIUI官网的MIX4专区 <a href="https://xiaomi.eu/community/forums/xiaomi-mix-4.214/">https://xiaomi.eu/community/forums/xiaomi-mix-4.214/</a> 可以看到最新的ROM动态以及刷机教程和ROM包下载。<br><img src="https://s2.loli.net/2022/04/18/GOKq7Um5YWVMyS6.png"></li></ol><blockquote><p>MIUI 12 WEEKLY ROMS 对应 开发版ROM 更新<br>MIUI 12 STABLE ROMS 对应 稳定版ROM 更新</p></blockquote><ol start="2"><li><p>点击进入之后，可以看到目前的支持和更新情况<br><img src="https://s2.loli.net/2022/04/18/PKXvSpnYWDIs9EG.png"></p></li><li><p>进入下载地址<a href="https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/">https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/</a> 选择自己想要的稳定版或开发版，再选择版本号，然后在页面<code>Ctrl+F</code>搜索 MIX4。快速找到ROM <strong>注意要找fastboot结尾的包</strong><br><img src="https://s2.loli.net/2022/04/18/GIkK7pxOf5Vjern.png"></p></li></ol><blockquote><p>也可以进入 <a href="https://androidfilehost.com/?w=search&s=MIX4&type=files">https://androidfilehost.com/?w=search&amp;s=MIX4&amp;type=files</a> 下载自己要的版本</p></blockquote><h4 id="3-手机进入Fastboot模式"><a href="#3-手机进入Fastboot模式" class="headerlink" title="3. 手机进入Fastboot模式"></a>3. 手机进入Fastboot模式</h4><p>关机状态下，同时按下音量下键+开机键，进入Fastboot模式，然后用数据线连接电脑。<strong>关于驱动问题：我是先用小米助手备份过手机，已经自动装好驱动</strong></p><h4 id="4-执行刷机脚本"><a href="#4-执行刷机脚本" class="headerlink" title="4. 执行刷机脚本"></a>4. 执行刷机脚本</h4><ol><li><p>下载完成解压，可以看到目录下有三对可执行脚本文件，分别对应Linux、MacOS、Windows。<strong>解压目录要全英文目录；首次刷机一定要选first_install</strong><br><img src="https://s2.loli.net/2022/04/18/vfX4Ycre8RgBaH6.png"><br><strong>脚本代码差别如下 通过对比可以看到，两个文件的区别在于 是否要清除数据</strong><br><img src="https://s2.loli.net/2022/04/18/9NCDtbU78o6zABK.png"></p></li><li><p>在Window 10下，以<code>管理员身份打开CMD</code>，cd进入到解压包目录。输入<code>windows_fastboot_first_install_with_data_format.bat</code> 回车<br><img src="https://s2.loli.net/2022/04/18/2yjnfhaFM6SDl7t.png"></p></li></ol><p><strong>在显示出，删除全部数据，DO you agree? 输入 Y 再回车</strong><br><img src="https://s2.loli.net/2022/04/18/aFWSrzofnymsx19.png"></p><p><strong>接着等待脚本跑完</strong>，<strong>因为小米万年不变的USB2.0 中间刷的时候会很慢，大概7分钟左右</strong> 跑完成功会出现如下图，这时会重启手机。<br><img src="https://s2.loli.net/2022/04/18/cH9PUsvBYF2qzj8.png"></p><p><strong>等待重启完成即可，这处时间较久，我等了20多分钟</strong></p><h4 id="4-重启激活Google账号"><a href="#4-重启激活Google账号" class="headerlink" title="4. 重启激活Google账号"></a>4. 重启激活Google账号</h4><ol><li>重启完成就可以看到MIUI的初始化设置步骤了，选择简体中文，下一步到激活</li><li>连接一个<strong>有魔法的WIFI</strong>，登录Google账号完成初始化，后面就是常规的设置，整个刷机就完成了！<br><img src="https://s2.loli.net/2022/04/18/mzQHohXErGValZI.png"></li></ol><h3 id="刷机总结"><a href="#刷机总结" class="headerlink" title="刷机总结"></a>刷机总结</h3><p>魔法一下 -&gt; 打开上面的地址 -&gt; 选择对应想要的版本下载 -&gt; 解压执行脚本 -&gt; 重启激活Google —&gt; 开启真正的MIUI之旅。<br>可以看到欧版的内置软件非常少，自带谷歌三件套，可正常更新系统，登录小米账户。<br><img src="https://s2.loli.net/2022/04/18/LUqeJGp4yzstaMA.png"></p><p><strong>具体使用感受，待我用一段时间，再来做评价。</strong></p><p>再次提醒，刷机有风险。但只要硬件没问题，即使变砖可以使用<code>MiFlash</code>刷回来。</p><h3 id="精简MIUI包"><a href="#精简MIUI包" class="headerlink" title="精简MIUI包"></a>精简MIUI包</h3><blockquote><p>欧版的MIUI需要精简的软件包并不多。在使用国行版的时候删除了小米的毒瘤 <code>com.miui.systemAdSolution（小米系统广告解决方案，必删）</code>、<code>com.miui.analytics（小米广告分析，必删）</code><br>然后发现在欧版MIUI中确实没有这两个包。毕竟体积小了2G，小米全家桶如果有需要也可以再装回来了，比如小米卡包。</p></blockquote><h4 id="1-ADB工具及命令"><a href="#1-ADB工具及命令" class="headerlink" title="1. ADB工具及命令"></a>1. ADB工具及命令</h4><p>手机用数据线连接电脑，在ADB工具的目录打开CMD，输入 <code>adb devices</code>。可以查看手机连接状态。</p><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm uninstall --user 0 包名</span><br></pre></td></tr></table></figure><h5 id="恢复卸载的APP"><a href="#恢复卸载的APP" class="headerlink" title="恢复卸载的APP"></a>恢复卸载的APP</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm install-existing --user 0 包名</span><br><span class="line">如：adb shell pm install-existing --user 0 com.miui.notes</span><br></pre></td></tr></table></figure><h5 id="禁用"><a href="#禁用" class="headerlink" title="禁用"></a>禁用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm disable-user 包名</span><br><span class="line">如：adb shell pm disable-user com.miui.analytics</span><br></pre></td></tr></table></figure><h5 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm <span class="built_in">enable</span> 包名</span><br></pre></td></tr></table></figure><h4 id="2-卸载列表汇总"><a href="#2-卸载列表汇总" class="headerlink" title="2. 卸载列表汇总"></a>2. 卸载列表汇总</h4><p><strong>以我自己的MIX4为例：打钩了都是自测卸载，无影响的，可以根据自己的需要去卸载</strong></p><table><thead><tr><th>命名</th><th>是否执行</th><th>执行结果(默认Success)</th></tr></thead><tbody><tr><td><code>adb shell pm uninstall --user 0 com.miui.systemAdSolution</code>（小米系统广告解决方案，必删）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.analytics</code>（小米广告分析，必删）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.gamecenter.sdk.service</code>  （小米游戏中心服务）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.gamecenter</code>  （小米游戏中心）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.sohu.inputmethod.sogou.xiaomi</code>  （搜狗输入法）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.player</code>  （小米音乐）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.video</code>  （小米视频）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.notes</code>  （小米便签）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.hybrid</code>  （快应用混合器）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.bugreport</code>  （bug 反馈）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.milink.service</code>  （米连服务）</td><td></td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.yellowpage</code>  （黄页）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.midrop</code>  （小米快传）</td><td></td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.virtualsim</code>  （小米虚拟器）</td><td></td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.payment</code>  （小米支付）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.mipay.wallet</code>  （小米钱包）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.voiceassist</code>  （语音助手）</td><td></td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.touchassistant</code>（悬浮球）</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.miservice</code> (服务反馈)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.android.stk</code> (USIM卡应用)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.voiceassist</code> (小爱同学)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.voicetrigger</code> (语音唤醒)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.personalassistant</code> (智能助理负一屏)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.contentextension</code> (传送门)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.bsp.catchlog</code> (CatchLog反馈bug时收集日志)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.vpnsdkmanager</code> (游戏网络加速)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.accessibility</code> (小米闻声)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.milink.service</code> (投屏)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.mishare.connectivity</code> (小米互传)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.aiasst.service</code> (AI虚拟助手)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.aiasst.vision</code> (AI工具箱)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.mirror</code> (MIUI+Bate版)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.newhome</code> (内容中心)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.cloudbackup</code> (桌面云备份)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.xiaomi.simactivate.service</code> (小米SIM卡激活服务)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.miui.hybrid.accessory</code> (智慧生活)</td><td>√</td><td></td></tr><tr><td>以下为欧版独有的卸载</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.mi.health</code> (健康)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.google.android.googlequicksearchbox</code> (Google)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.android.cellbroadcastreceiver</code> (无线紧急警报)</td><td>√</td><td></td></tr><tr><td><code>adb shell pm uninstall --user 0 com.android.quicksearchbox</code> (搜索)</td><td>√</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http状态码说明</title>
      <link href="/http-status-code.html"/>
      <url>/http-status-code.html</url>
      
        <content type="html"><![CDATA[<h2 id="Http-状态码类型"><a href="#Http-状态码类型" class="headerlink" title="Http 状态码类型"></a>Http 状态码类型</h2><table><thead><tr><th></th><th>类别</th><th>含义</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><span id="more"></span><h2 id="HTTP-状态码含义"><a href="#HTTP-状态码含义" class="headerlink" title="HTTP 状态码含义"></a>HTTP 状态码含义</h2><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>100</td><td>客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</td></tr><tr><td>101</td><td>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</td></tr><tr><td>102</td><td>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td></tr><tr><td>200</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回。</td></tr><tr><td>201</td><td>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</td></tr><tr><td>202</td><td>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</td></tr><tr><td>203</td><td>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td></tr><tr><td>204</td><td>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td></tr><tr><td>205</td><td>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td></tr><tr><td>206</td><td>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 响应必须包含如下的头部域： Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart&#x2F;byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 Date ETag 和&#x2F;或 Content-Location，假如同样的请求本应该返回200响应。 Expires, Cache-Control，和&#x2F;或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</td></tr><tr><td>207</td><td>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td></tr><tr><td>300</td><td>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</td></tr><tr><td>301</td><td>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：对于某些使用 HTTP&#x2F;1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</td></tr><tr><td>302</td><td>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</td></tr><tr><td>303</td><td>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 注意：许多 HTTP&#x2F;1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</td></tr><tr><td>304</td><td>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 该响应必须包含以下的头信息： Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 ETag 和&#x2F;或 Content-Location，假如同样的请求本应返回200响应。 Expires, Cache-Control，和&#x2F;或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</td></tr><tr><td>305</td><td>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</td></tr><tr><td>306</td><td>在最新版的规范中，306状态码已经不再被使用。</td></tr><tr><td>307</td><td>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</td></tr><tr><td>400</td><td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 2、请求参数有误。</td></tr><tr><td>401</td><td>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td></tr><tr><td>402</td><td>该状态码是为了将来可能的需求而预留的。</td></tr><tr><td>403</td><td>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td></tr><tr><td>404</td><td>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td></tr><tr><td>405</td><td>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td></tr><tr><td>406</td><td>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td></tr><tr><td>407</td><td>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</td></tr><tr><td>408</td><td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td></tr><tr><td>409</td><td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td></tr><tr><td>410</td><td>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td></tr><tr><td>411</td><td>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td></tr><tr><td>412</td><td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td></tr><tr><td>413</td><td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td></tr><tr><td>414</td><td>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td></tr><tr><td>415</td><td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td></tr><tr><td>416</td><td>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart&#x2F;byteranges 作为其 Content-Type。</td></tr><tr><td>417</td><td>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td></tr><tr><td>421</td><td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td>422</td><td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td>422</td><td>请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 当前资源被锁定。（RFC 4918 WebDAV）</td></tr><tr><td>424</td><td>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td></tr><tr><td>425</td><td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td></tr><tr><td>426</td><td>客户端应当切换到TLS&#x2F;1.0。（RFC 2817）</td></tr><tr><td>449</td><td>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td></tr><tr><td>500</td><td>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</td></tr><tr><td>501</td><td>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</td></tr><tr><td>502</td><td>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td></tr><tr><td>503</td><td>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</td></tr><tr><td>504</td><td>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 注意：某些代理服务器在DNS查询超时时会返回400或者500错误</td></tr><tr><td>505</td><td>服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</td></tr><tr><td>506</td><td>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td></tr><tr><td>507</td><td>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td></tr><tr><td>509</td><td>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td></tr><tr><td>510</td><td>获取资源所需要的策略并没有没满足。（RFC 2774）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社交场景下,好友表的设计原理和方式</title>
      <link href="/friendship-table.html"/>
      <url>/friendship-table.html</url>
      
        <content type="html"><![CDATA[<h2 id="好友的概念和场景"><a href="#好友的概念和场景" class="headerlink" title="好友的概念和场景"></a>好友的概念和场景</h2><p>在社交场景中，好友的关系场景无处不在，如何设计一个最优的表结构，来实现高效的存储和快速的查询尤为重要。<br>在数据库的好友设计中。共同好友的概念。针对互相都为好友的情况，会带来以下的操作和查询：</p><ul><li>建立互相好友关系</li><li>删除互相好友关系</li><li>获取某个用户的好友列表</li><li>判断两个用户是否为好友</li></ul><span id="more"></span><p><strong>我们拿两个用户来举例说明场景 Alice（ID&#x3D;5）和 Bob（ID&#x3D;3）</strong></p><h3 id="Two-row-model"><a href="#Two-row-model" class="headerlink" title="Two-row model"></a>Two-row model</h3><blockquote><p>使用两条记录来标识双向好友，Alice的好友为Bob；Bob的好友为Alice，插入两条userid关系</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> friendship (</span><br><span class="line">  user1_id <span class="type">INTEGER</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  user2_id <span class="type">INTEGER</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (user1_id, user2_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>建立好友关系</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> friendship (user1_id, user2_id) <span class="keyword">VALUES</span> ((<span class="number">3</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> user1_id <span class="operator">|</span> user2_id <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span>     <span class="operator">|</span>    <span class="number">5</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span>     <span class="operator">|</span>    <span class="number">3</span>     <span class="operator">|</span></span><br></pre></td></tr></table></figure><p><strong>获取Alice的好友列表很简单</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user2_id <span class="keyword">FROM</span> friendship <span class="keyword">WHERE</span> user1_id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> user2_id <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span>     <span class="operator">|</span></span><br></pre></td></tr></table></figure><p><strong>判断Alice和Bob是否共同好友也容易</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> friendship <span class="keyword">WHERE</span> user1_id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">AND</span> user2_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> friendship <span class="keyword">WHERE</span> user1_id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">AND</span> user2_id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br></pre></td></tr></table></figure><p><strong>删除好友关系</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> friendship <span class="keyword">WHERE</span> (user1_id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">AND</span> user2_id <span class="operator">=</span> <span class="number">5</span>) <span class="keyword">OR</span> (user1_id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">AND</span> user2_id <span class="operator">=</span> <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>针对与场景的常用操作都能完成，但是会发现，其实一条记录就可以知道关系，两条记录增加了资源和操作的成本，那么如何用一条记录来进行好友关系标识呢？</p><h3 id="Single-row-model"><a href="#Single-row-model" class="headerlink" title="Single-row model"></a>Single-row model</h3><p>还是用同样的表结构，实现只插入一条记录。肯定不能是<code>随机插入</code>了，我们可以定义规则<code>较小的id插入user1_id字段，较大的id插入user2_id</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> mutual_friendship (</span><br><span class="line">  user1_id <span class="type">INTEGER</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  user2_id <span class="type">INTEGER</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (user1_id, user2_id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> user1_user2_ids <span class="keyword">CHECK</span> (user1_id <span class="operator">&lt;</span> user2_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>建立好友关系</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> mutual_friendship (user1_id, user2_id)</span><br><span class="line"><span class="keyword">VALUES</span> ((<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> user1_id <span class="operator">|</span> user2_id <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span>     <span class="operator">|</span>    <span class="number">5</span>     <span class="operator">|</span></span><br></pre></td></tr></table></figure><p><strong>获取Alice的好友列表</strong><br>需要注意的是，既要查出用户id比Alice大的用<code>user1_id</code>字段记录的好友关系(此时Alice被记录在user1_id字段)，还要查出用户id比Alice小的用<code>user2_id</code>字段记录的好友关系(此时Alice被记录在user2_id字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user2_id <span class="keyword">FROM</span> mutual_friendship <span class="keyword">WHERE</span> user1_id <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> user1_id <span class="keyword">FROM</span> mutual_friendship <span class="keyword">WHERE</span> user2_id <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>判断Alice和Bob是否共同好友</strong><br>只需要在代码中保证较小的用户ID作为user1_id字段的值即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> mutual_friendship <span class="keyword">WHERE</span> user1_id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">AND</span> user2_id <span class="operator">=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>删除好友关系</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mutual_friendship <span class="keyword">WHERE</span> user1_id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">AND</span> user2_id <span class="operator">=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="两种模式的特点"><a href="#两种模式的特点" class="headerlink" title="两种模式的特点"></a>两种模式的特点</h2><table><thead><tr><th></th><th>添加好友</th><th>删除好友</th><th>获取好友列表</th><th>判断是否好友</th><th>存储要求</th></tr></thead><tbody><tr><td>双行</td><td>插入两条</td><td>删除两条</td><td>直接查询</td><td>直接查询</td><td>两倍空间存储</td></tr><tr><td>单行</td><td>预处理再插入一条</td><td>预处理再删除一条</td><td>两部分查询</td><td>预处理再查询</td><td>最优存储，针对查询需加索引</td></tr></tbody></table><p><a href="https://minimalmodeling.substack.com/p/modeling-mutual-friendship">原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP三次握手四次挥手、Http协议解答</title>
      <link href="/computer-internet.html"/>
      <url>/computer-internet.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/yzengchn/static/master/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="网络七层体系结构图"></p><h2 id="1-TCP-三次握手和四次挥手"><a href="#1-TCP-三次握手和四次挥手" class="headerlink" title="1. TCP 三次握手和四次挥手"></a>1. TCP 三次握手和四次挥手</h2><p><img src="https://raw.githubusercontent.com/yzengchn/static/master/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="TCP三次握手"><br><strong>简单示意图：</strong></p><ul><li>客户端-发送带有SYN标志的数据包     一次握手-服务端</li><li>服务端-发送带有SYN&#x2F;ACK标志的数据包 二次握手-客户端</li><li>客户端-发送带有ACK标志的数据包     三次握手-服务端</li></ul><blockquote><p>SYN（Synchronize Sequence Numbers）同步序列编号，是TCP&#x2F;IP建立连接时使用的握手信号。<br>在客户端和服务端之间建立正常的TCP网络连接时，客户端首先发出一个SYN信息，服务端使用SYN-ACK应答表示接收到了这个消息，最后客户端再以ACK(Acknowledgement)消息响应。<br>这样在客户端和服务端之间才能建立起可靠的TCP连接。</p></blockquote><h3 id="1-1-三次握手的原因"><a href="#1-1-三次握手的原因" class="headerlink" title="1.1. 三次握手的原因"></a>1.1. 三次握手的原因</h3><blockquote><p>三次握手的目的是建立可靠的通信信道，让发送方和接收方确定自己与对方的发送和接收是正常的</p></blockquote><ul><li>第一次握手：Client什么都不能确认；Server确定了自己接收正常，对方发送正常</li><li>第二次握手：Client确认了自己发送、接收正常，对方发送、接收也正常；Server确认了自己接收正常，对方发送正常</li><li>第三次握手：Client确认了自己发送、接收正常，对方发送、接受也正常；Server确认了自己发送、接受正常，对方发送、接受也正常</li></ul><h3 id="1-2-第二次握手传回了ACK，为什么还要传回SYN"><a href="#1-2-第二次握手传回了ACK，为什么还要传回SYN" class="headerlink" title="1.2. 第二次握手传回了ACK，为什么还要传回SYN"></a>1.2. 第二次握手传回了ACK，为什么还要传回SYN</h3><p>ACK是为了告诉客户端，我接收到的信息确实是你所发的信号，这表明客户端到服务端通信正常；而回传SYN是为了建立服务端到客户端的通信</p><h3 id="1-3-四次挥手的原因"><a href="#1-3-四次挥手的原因" class="headerlink" title="1.3. 四次挥手的原因"></a>1.3. 四次挥手的原因</h3><p><strong>断开一个TCP连接需要四次挥手</strong></p><ul><li>客户端-发送一个FIN，用来关闭客户端到服务端的数据传送</li><li>服务端-收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号</li><li>服务端-关闭与客户端的连接，发送一个FIN给客户端</li><li>客户端-发回ACK报文确认，并将确认序号设置为收到序号加1<blockquote><p>例如打电话，A和B通话，A告诉B：我说完了，你还有要说的吗；B说：好的，我也没啥要说，你可以挂了。<br>A先告诉B 我准备挂了，B收到后再告诉A 你可以挂了，B挂了，A断开</p></blockquote></li></ul><h3 id="TCP，UDP协议的区别"><a href="#TCP，UDP协议的区别" class="headerlink" title="TCP，UDP协议的区别"></a>TCP，UDP协议的区别</h3><table><thead><tr><th></th><th>连接类型</th><th>传输可靠性</th><th>传输形式</th><th>传输效率</th><th>所需资源</th><th>首部字节</th><th>应用场景</th></tr></thead><tbody><tr><td>TCP</td><td>面向连接</td><td>可靠</td><td>字节流</td><td>慢</td><td>多</td><td>20-60字节</td><td>对通信数据可靠(文件传输、邮件传输)</td></tr><tr><td>UDP</td><td>无连接</td><td>不可靠</td><td>数据报文段</td><td>快</td><td>少</td><td>8个字节</td><td>对通信速度高(视频通话)</td></tr></tbody></table><p>UDP在传送数据之前不需要先建立连接，服务端在收到UDP报文后，不需要任何确认。特别适合即时通信，如视频通话、语音、直播</p><p>TCP在传送数据之前必须要先建立连接，数据传送完成之后要释放连接，在数据传送时，有确认、窗口、重传、拥塞控制机制，增加了开销和效率，提高了可靠性。</p><h3 id="TCP协议如何保证可靠传输"><a href="#TCP协议如何保证可靠传输" class="headerlink" title="TCP协议如何保证可靠传输"></a>TCP协议如何保证可靠传输</h3><ol><li>应用数据被分割成TCP认为最适合发送的数据块</li><li>TCP给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层</li><li><strong>校验和：</strong>TCP将保持它<em>首部</em>和<em>数据的校验和</em>，目的是检测数据在传输的过程中的任何变化，如果收到段的检验和有差错，TCP将丢弃这个报文段，不确认收到此报文段</li><li>TCP的接收端会丢弃重复的数据</li><li><strong>流量控制(滑动窗口协议实现)：</strong>TCP连接的每一方都有固定大小的缓存空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方数据，能提示发送方降低发送的速率，防止丢包。</li><li><strong>拥塞控制：</strong>当网络拥塞时，减少数据的发送</li><li><strong>超时重传：</strong>当TCP发出一个段后，它启动一个定时器，等待接收端确认收到这个报文段。如果未收到确认，将重发这个报文段</li></ol><h3 id="ARQ协议"><a href="#ARQ协议" class="headerlink" title="ARQ协议"></a>ARQ协议</h3><p>**自动重传请求(Automatic Repeat-reQuest)**：是OSI模型中数据链路层和传输层的错误纠正协议之一，它通过使用确认和超时这个两个机制，在不可靠服务的基础上实现可靠的信息传输，如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送，ARQ包括 <code>停止等待ARQ协议</code> 和 <code>连续ARQ协议</code></p><h4 id="停止等待ARQ协议"><a href="#停止等待ARQ协议" class="headerlink" title="停止等待ARQ协议"></a>停止等待ARQ协议</h4><p>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分割就停止发送，等待对方确认(回复ACK)。如果过了一段时间(超时时间后)，还是没有收到ACK确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组</p><ul><li>优点：简单</li><li>缺点：信道利用率低，等待时间长</li></ul><ol><li>无差错情况<br>发送方发送分组 接收方在规定时间之内收到并且回复确认 发送方再次发送</li><li>出现差错情况（超时重传）<br>停止等待协议中超时重传是指<strong>只要超过一段时间仍然没有收到确认，就重传前面发送过的分组</strong>认为刚才发送过的分组丢失了。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式称为 <strong>自动重传请求ARQ</strong>。<br>在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。</li><li>确认丢失和确认迟到</li></ol><ul><li>确认丢失：确认消息在传输过程丢失。当A发送M1消息，B收到后，B向A发送一个M1确认消息，但却在传输过程中丢失，而A并不知道于是在超时计时过后重传M1消息，B再次收到该消息后采取以下两点措施：1.丢弃这个重复的M1消息，不向上层交付；2.向A发送确认消息。</li><li>确认迟到：确认消息在传输过程中迟到。A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息。</li></ul><h4 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h4><p>可提高信道利用率，发送维持一个发送，凡是位于发送窗口之内的分组可连续发送出去，而不需要等待对方确认，接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了</p><h3 id="游览器URL访问流程"><a href="#游览器URL访问流程" class="headerlink" title="游览器URL访问流程"></a>游览器URL访问流程</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21736685/1627698966905-22442608-760b-49fd-a2e2-9678cb5ea3bf.png"></p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th></th><th>类别</th><th>含义</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><h3 id="HTTP长连接、短连接"><a href="#HTTP长连接、短连接" class="headerlink" title="HTTP长连接、短连接"></a>HTTP长连接、短连接</h3><p>在HTTP&#x2F;1.0中默认使用短连接。客户端和服务器每进行一个Http操作，就建立一次连接，任务结束就中断连接。<br>而从Http&#x2F;1.1起默认使用长连接，用以保存连接特性。<strong>使用长连接的Http协议，会在响应头加入这行代码</strong><code>Connection:keep-alive</code><br>在使用长连接的情况下。当一个网页打开完成之后，客户端和服务端直接用于传输Http数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，他有一个保持时间，可以在不同的服务器软件中设定这个时间。<strong>实现长连接</strong>需要客户端和服务端都支持长连接。<strong>Http协议的长连接和短连接，实质上是TCP协议的长连接和短连接</strong></p><h3 id="Http是不保存状态的协议，如何保持用户状态"><a href="#Http是不保存状态的协议，如何保持用户状态" class="headerlink" title="Http是不保存状态的协议，如何保持用户状态"></a>Http是不保存状态的协议，如何保持用户状态</h3><p>Http是一种无状态协议，也就是说Http协议自身不对请求和响应直接的通信状态进行保存。Session的主要作用就是通过服务端记录用户的状态。服务端保存Session的方法(内存和数据库)。通过在Cookie中附加一个Session ID来实现跟踪</p><blockquote><p>Cookie被禁用怎么办？ 最常用的就是利用URL重写把Session ID直接附加在URL路径的后面</p></blockquote><h3 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h3><blockquote><p>Cookie和Session都是用来跟踪浏览器用户身份的会话方式，但两者的应用场景不一样。Cookie数据保存在客户端，Session数据保存在服务端<br>Cookie一般用来保存用户信息，场景：在Cookie中保存已经登录过的用户信息，将Token放入Cookie中，下次登录的时候根据Token值来确认用户<br>Session主要作用就是通过服务端记录用户的状态</p></blockquote><h3 id="Http1-0和Http1-1的主要区别"><a href="#Http1-0和Http1-1的主要区别" class="headerlink" title="Http1.0和Http1.1的主要区别"></a>Http1.0和Http1.1的主要区别</h3><table><thead><tr><th></th><th>Http1.0</th><th>Http1.1</th></tr></thead><tbody><tr><td>连接方式</td><td>默认使用短连接，每次请求都要重新建立一次连接（Http是基于TCP&#x2F;IP协议的，每一次建立或断开连接都需要三次握手四次挥手的开销）</td><td>默认使用长连接，默认开启<code>Connection：keep-alive</code>（Http1.1的持续连接有非流水线方式和流水线方式。流水线方式就是客户端在收到Http响应报文之前就能接着发送新的请求报文。非流水线方式则是客户端在收到前一个响应后才能发送下一个请求）</td></tr><tr><td>缓存处理策略</td><td>主要使用header里的If-Modified-Since,Expires来做缓存判断的标准</td><td>引入更多的缓存控制策略Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略</td></tr><tr><td>带宽优化及网络连接</td><td>客户端请求对象的一部分，服务器会将整个对象响应，并且不支持断点续传功能（浪费带宽）</td><td>在请求头引入range头域，它允许只请求资源的某个部分，即返回码是206(Partial Content)（充分利用带宽和连接）</td></tr><tr><td>错误状态响应码</td><td>-</td><td>新增了24个错误状态响应码</td></tr></tbody></table><h3 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h3><ul><li>URI（Uniform Resource Identifier）是统一资源标志符，可以唯一标识一个资源</li><li>URL（Uniform Resource Location）是统一资源定位符，可以提供该资源的路径，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源<blockquote><p>URI的作用像身份证号一样，URL的作用更像家庭住址一样。URL是一种具体的URI，它不仅唯一标识资源，而且还提供定位该资源的信息</p></blockquote></li></ul><h3 id="Http和Https的区别"><a href="#Http和Https的区别" class="headerlink" title="Http和Https的区别"></a>Http和Https的区别</h3><ol><li>端口：<strong>http</strong>的url由 <code>http://</code>起始且默认使用80端口；<strong>https</strong>的url由 <code>https://</code>起始且默认使用443端口</li><li>安全性和资源消耗：<strong>http</strong>基于TCP&#x2F;IP协议，所有的传输内容都是明文，客户端和服务端都无法验证对方的身份；<strong>https</strong>是运行在SSL&#x2F;TLS之上的TCP&#x2F;IP协议，所有传输内容都经过加密<blockquote><p>Http安全性没有Https高，但Https比Http耗费更多的服务器资源<br><strong>Https的加密</strong>为对称加密，但是对称加密的秘钥是用服务器方的证书进行了非对称加密</p></blockquote></li></ol><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8函数式编程接口</title>
      <link href="/java8-function.html"/>
      <url>/java8-function.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li>将方法作为参数传递</li><li>lamba表达式</li><li>将数学函数抽象成接口对象</li></ul><h3 id="Consumer：消费型接口"><a href="#Consumer：消费型接口" class="headerlink" title="Consumer：消费型接口"></a>Consumer<T>：消费型接口</h3><blockquote><p>抽象方法：void accept(T t) 接收一个参数进行消费，但无需返回结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Consumer</span> <span class="variable">c1</span> <span class="operator">=</span> (x) -&gt; System.out.println(x); <span class="comment">//单个入参和方法可简写 c1 = System.out::println</span></span><br><span class="line">c1.accept(<span class="string">&quot;hello world&quot;</span>) <span class="comment">//实现 打印hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>默认方法：andThen(Consumer&lt;? super T&gt; after)  先执行调用andThen的accept方法，再执行andThen方法中参数after的accept方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Consumer</span> <span class="variable">c1</span> <span class="operator">=</span> (x) -&gt; System.out.println(<span class="string">&quot;c1&quot;</span> + x);</span><br><span class="line"><span class="type">Consumer</span> <span class="variable">c2</span> <span class="operator">=</span> (x) -&gt; System.out.println(<span class="string">&quot;c2&quot;</span> + x);</span><br><span class="line">c1.andThen(c2).accept(<span class="string">&quot;go&quot;</span>) <span class="comment">//输出 c1go c2go</span></span><br></pre></td></tr></table></figure><h3 id="Supplier-供给型接口"><a href="#Supplier-供给型接口" class="headerlink" title="Supplier: 供给型接口"></a>Supplier<T>: 供给型接口</h3><blockquote><p>抽象方法：T get()，无参数，有返回值。适合提供数据的场景使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;String&gt; s0 = () -&gt; <span class="string">&quot;SSS&quot;</span>;</span><br><span class="line">s0.get() <span class="comment">//获取到 SSS</span></span><br></pre></td></tr></table></figure><h3 id="Function-lt-T-R-gt-函数型接口"><a href="#Function-lt-T-R-gt-函数型接口" class="headerlink" title="Function&lt;T,R&gt;: 函数型接口"></a>Function&lt;T,R&gt;: 函数型接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(before);</span><br><span class="line">    <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>抽象方法：apply 传入一个参数，返回想要的结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; f1 = (x) -&gt; x * x;</span><br><span class="line">f1.apply(<span class="number">2</span>) <span class="comment">//输出12</span></span><br></pre></td></tr></table></figure><blockquote><p>默认方法：compose 先执行 compose方法的参数before中的apply方法，然后将执行结果传递给调用compose函数中的apply再执行一次</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; f1 = (x) -&gt; x * x;</span><br><span class="line">Function&lt;Integer, Integer&gt; f2 = (x) -&gt; <span class="number">2</span> * x;</span><br><span class="line">f1.compose(f2).apply(<span class="number">2</span>) <span class="comment">//先执行 f2,再把结果值去执行f1  x * (2 * x) = 16</span></span><br></pre></td></tr></table></figure><blockquote><p>默认方法：andThen 先执行调用andThen函数的apply方法，然后将执行结果传递给andThen方法的参数after去执行apply方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; f1 = (x) -&gt; x * x;</span><br><span class="line">Function&lt;Integer, Integer&gt; f2 = (x) -&gt; <span class="number">2</span> * x;</span><br><span class="line">f1.andThen(f2).apply(<span class="number">2</span>) <span class="comment">//先执行 f1,再把结果值去执行f2  (x * x) * 2 = 8</span></span><br></pre></td></tr></table></figure><blockquote><p>静态方法 identity 输入什么就返回什么</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; f0 = Function.identity();</span><br><span class="line">f0.apply(<span class="number">2</span>) <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure><h3 id="Predicate-：断言型接口"><a href="#Predicate-：断言型接口" class="headerlink" title="Predicate ：断言型接口"></a>Predicate<T> ：断言型接口</h3><blockquote><p>抽象方法：boolean test(T t) 传入一个参数，返回一个布尔值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; p0 = (x) -&gt; x &lt; <span class="number">10</span>;</span><br><span class="line">p0.test(<span class="number">1</span>); <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure><blockquote><p>默认方法：and(Predicate&lt;? super T&gt; other)，相当于逻辑运算符中的&amp;&amp;，当两个Predicate函数的返回结果都为true时才返回true。</p></blockquote><blockquote><p>默认方法：negate()，这个方法的意思就是取反。</p></blockquote><blockquote><p>默认方法：or(Predicate&lt;? super T&gt; other) ,相当于逻辑运算符中的||，当两个Predicate函数的返回结果有一个为true则返回true，否则返回false。</p></blockquote><blockquote><p>默认方法：isEqual(Object targetRef)，对当前操作进行”&#x3D;”操作,即取等操作,可以理解为 A &#x3D;&#x3D; B。</p></blockquote><h3 id="BiFunction-lt-T-U-R-gt-多个参数接口"><a href="#BiFunction-lt-T-U-R-gt-多个参数接口" class="headerlink" title="BiFunction&lt;T, U, R&gt; 多个参数接口"></a>BiFunction&lt;T, U, R&gt; 多个参数接口</h3><ul><li>T：函数的第一个参数类型</li><li>U：函数的第二个参数类型</li><li>R：函数的结果类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BiFunction&lt;Integer, Integer, Integer&gt; b1 = (x, y) -&gt; x + y; <span class="comment">//实现两数相加</span></span><br><span class="line"></span><br><span class="line">BiFunction&lt;Integer, Function&lt;Integer, Integer&gt; &gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新Redis缓存，再更新数据库；还是更新数据库再更新Redis</title>
      <link href="/redis-todb-sort.html"/>
      <url>/redis-todb-sort.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在大型系统中，为了抗住高并发，减少数据库压力。都会引入缓存机制，一旦加多了一层缓存。就必须要处理缓存数据与数据库不一致的问题。</p></blockquote><p><strong>更新缓存和数据的机制处理策略如下：</strong></p><ul><li>Cache aside 旁路缓存</li><li>Read&#x2F;Write through 抽象缓存层</li><li>Write behind 延迟写入<span id="more"></span></li></ul><h3 id="常见普通读-x2F-写请求流程"><a href="#常见普通读-x2F-写请求流程" class="headerlink" title="常见普通读&#x2F;写请求流程"></a>常见普通读&#x2F;写请求流程</h3><p><img src="https://s2.loli.net/2022/07/12/ATvj5pHfBhZ2e3S.png" alt="redis场景流程"></p><h3 id="情况一：先更新数据库，再更新缓存"><a href="#情况一：先更新数据库，再更新缓存" class="headerlink" title="情况一：先更新数据库，再更新缓存"></a>情况一：先更新数据库，再更新缓存</h3><blockquote><p>如果同时有两个写请求更新同一数据，每个写请求都是先更新数据库再更新缓存，在并发场景下可能会出现数据不一致<br><img src="https://s2.loli.net/2022/07/12/1FLzPrMXmRun6yo.png" alt="先缓存,后DB"></p></blockquote><ul><li><code>写请求1</code> 更新数据库，将库存从100减一，写入数据库99</li><li><code>写请求2</code> 更新数据库，将库存从99减一，写入数据库98</li><li><code>写请求2</code> 更新缓存，set 98</li><li><code>写请求1</code> 更新缓存，set 99</li></ul><h3 id="情况二：先删除缓存，再更新数据库"><a href="#情况二：先删除缓存，再更新数据库" class="headerlink" title="情况二：先删除缓存，再更新数据库"></a>情况二：先删除缓存，再更新数据库</h3><blockquote><p>如果同时有一个读请求和一个写请求并发场景下，写请求是先删除缓存再更新数据库，可能造成数据不一致</p></blockquote><p><img src="https://s2.loli.net/2022/07/12/yunTZDP1No5ejSU.png" alt="先删缓存,后DB"></p><ul><li><code>写请求</code> 清除缓存</li><li><code>读请求</code> 查询缓存为空，查询数据库；返回库存100，再Set缓存100</li><li><code>写请求</code> 更新数据库为99</li></ul><h3 id="情况三：先更新数据库，在删除缓存"><a href="#情况三：先更新数据库，在删除缓存" class="headerlink" title="情况三：先更新数据库，在删除缓存"></a>情况三：先更新数据库，在删除缓存</h3><blockquote><p>如果同时有一个读请求和一个写请求并发场景下，写请求是更新数据库再删除缓存，可能造成数据不一致</p></blockquote><p><img src="https://s2.loli.net/2022/07/12/PxGSYQVZeO2wbyK.png" alt="先DB，后删缓存"></p><ul><li><code>读请求</code> 先查询缓存，再查询数据库 得到库存100</li><li><code>写请求</code> 更新数据库，库存为99，删除缓存 </li><li><code>读请求</code> 将数据库值设置缓存 缓存100</li></ul><p> <strong><code>综上</code> 缓存通常会先更新数据库，然后再删除缓存，为了保障数据一致，还需要设置合理的缓存时间。</strong></p><h3 id="抽象缓存层"><a href="#抽象缓存层" class="headerlink" title="抽象缓存层"></a>抽象缓存层</h3><blockquote><p>应用程序无需管理缓存和数据库，只需要将数据库的同步委托给缓存提供程序 Cache Provider 即可。所有数据交互都是通过抽象缓存层完成的。<br>Read&#x2F;Write through 一般是由一个 Cache Provider 对外提供读写操作，应用程序不用感知操作的是缓存还是数据库。</p></blockquote><h3 id="缓存延迟写入"><a href="#缓存延迟写入" class="headerlink" title="缓存延迟写入"></a>缓存延迟写入</h3><blockquote><p>Write behind简单理解就是延迟写入，Cache Provider 每隔一段时间会批量输入数据库，优点是应用程序写入速度非常快。</p></blockquote><p><a href="https://dbaplus.cn/news-73-3684-1.html">原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis高可用集群</title>
      <link href="/redis-cluster.html"/>
      <url>/redis-cluster.html</url>
      
        <content type="html"><![CDATA[<h3 id="分布式架构设计的核心思想"><a href="#分布式架构设计的核心思想" class="headerlink" title="分布式架构设计的核心思想"></a><strong>分布式架构设计</strong>的核心思想</h3><ul><li>高性能：读写分离、分片集群</li><li>高可用：数据持久化、多副本、故障自动转移</li><li>易扩展：分片集群、横向扩展</li><li>分布式共识：哨兵，领导者选举</li><li>负载均衡：数据分片、数据路由<span id="more"></span></li></ul><p><img src="https://s2.loli.net/2022/07/12/infCLgWdDBtl6Nh.png" alt="Redis集群"></p><h3 id="单机版Redis"><a href="#单机版Redis" class="headerlink" title="单机版Redis"></a>单机版Redis</h3><blockquote><p>业务 -&gt; Redis -&gt; MySQL</p></blockquote><p>这个架构非常简单，你的业务应用可以把 Redis 当做缓存来使用，从 MySQL 中查询数据，然后写入到 Redis 中，之后业务应用再从 Redis 中读取这些数据，由于 Redis 的数据都存储在内存中，所以这个速度飞快。</p><p>但是，突然有一天，你的 Redis 因为某些原因宕机了，这时你的所有业务流量，都会打到后端 MySQL 上，这会导致你的 MySQL 压力剧增，严重的话甚至会压垮 MySQL。</p><h3 id="数据持久化，解决重启丢失问题"><a href="#数据持久化，解决重启丢失问题" class="headerlink" title="数据持久化，解决重启丢失问题"></a>数据持久化，解决重启丢失问题</h3><ol><li>RDB：</li></ol><ul><li>只持久化某一时刻的数据快照 到磁盘上（创建一个子进程来执行）</li><li>采用二进制+数据压缩的方式写磁盘，这样文件体积小，数据恢复速度也快</li></ul><ol start="2"><li>AOF：</li></ol><ul><li>每一次写操作都持久到磁盘（主线程写内存，根据策略可以配置由主线程还是子线程进行数据持久化）</li><li>记录的是每一次的写命令，数据最全，文件体积大、数据恢复慢</li></ul><p><strong>Redis数据持久化方案选择：</strong></p><ul><li>如果业务对数据丢失不敏感，使用RDB</li><li>如果业务对数据完整性有要求，使用AOF</li></ul><blockquote><p>选择AOF方案，在业务积累下数据恢复变的很慢，该如何处理<br>AOF的特点是将每一次的写命令都记录起来，对于同一个<code>Key</code>的多次操作，我们其实只需要最后一次写操作的记录即可。即：**[AOF rewrite]**</p></blockquote><p>我们对AOF文件定时rewrite，避免这个文件持续膨胀，减少恢复耗时</p><p>利用RDB、AOF的特点，实现Redis的 <strong><code>混合持久化</code></strong>  <strong>注意</strong>：Redis 4.0以上版本才支持混合持久化</p><p><strong>步骤：</strong></p><ol><li>在AOF进行rewrite时候，</li><li>Redis先以RDB格式在AOF文件中写入一个数据快照，</li><li>再把在这期间产生的每一个命令，追加到AOF文件中。</li><li>因为RDB是二进制压缩写入，所以文件更小</li></ol><h3 id="主从多副本"><a href="#主从多副本" class="headerlink" title="主从多副本"></a>主从多副本</h3><p>一个实例宕机，只能用恢复数据来解决，那我们是否可以部署多个 Redis 实例，然后让这些实例数据保持实时同步，这样当一个实例宕机时，我们在剩下的实例中选择一个继续提供服务就好了。即：主从结构</p><blockquote><p><code>业务</code> -读&#x2F;写-&gt; <code>Redis Master</code> -实时同步-&gt; <code>Redis slave</code><br>这里把实时读写的Redis叫做<code>master</code>， 实时同步数据的Redis叫做<code>slave</code></p></blockquote><p><strong>多副本的优势：</strong></p><ol><li>缩短不可用的时间：master 发送宕机时，我们可以手动把slave提升master继续提供服务</li><li>提升读性能：通过slave分担一部分读请求，提升整体服务性能</li></ol><p>它的问题在于：当 master 宕机时，我们需要「手动」把 slave 提升为 master，这个过程也是需要花费时间的。</p><h3 id="主从哨兵，故障自动切换"><a href="#主从哨兵，故障自动切换" class="headerlink" title="主从哨兵，故障自动切换"></a>主从哨兵，故障自动切换</h3><p>引入一个观察者，让他去实时监测<code>master</code>的健康状态，这个观察者就是哨兵</p><ul><li>哨兵每隔一段时间，询问master是否正常</li><li>master正常回复，代表正常，回复超时代表异常</li><li>哨兵接收到异常，发起主从切换</li></ul><p><strong>隐患</strong>：master 状态正常，但是回复哨兵的时候网络异常，导致哨兵误判<br><strong>解决方法</strong>：部署多个哨兵，一起检测master的状态，采用选举投票的方式来最终确定master状态是否正常。</p><ul><li>多个哨兵间隔询问master是否正常</li><li>master回复正常，或超时异常</li><li>一旦有一个哨兵判定master异常(无论是否网络问题)，就询问其他哨兵，如果多个哨兵都收到master异常，就判定故障执，通过<code>共识算法</code>由领导者执行主从切换</li></ul><blockquote><p>共识算法：规定节点的数量必须是奇数个，这样可以保证系统中即使有节点发生了故障，剩余超过「半数」的节点状态正常，依旧可以提供正确的结果，也就是说，这个算法还兼容了存在故障节点的情况。<br>共识算法在分布式系统领域有很多，例如 Paxos、Raft，哨兵选举领导者这个场景，使用的是 Raft 共识算法，因为它足够简单，且易于实现。</p></blockquote><h3 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h3><p><strong>什么是「分片集群」？</strong></p><p>简单来讲，一个实例扛不住写压力，那我们是否可以部署多个实例，然后把这些实例按照一定规则组织起来，把它们当成一个整体，对外提供服务，这样不就可以解决集中写一个实例的瓶颈问题吗？</p><p><strong>多实例如何组织：</strong></p><ul><li>每个节点各自存一分部数据，所有节点数据加起来才是全量数据</li><li>指定一个路由规则，不同的Key规则数据路由到不同节点上</li></ul><p><strong>分片集群根据路由规则所在的不同位置，分为两大类：</strong></p><ol><li>客户端分片：Key的路由规则由业务客户端来做</li></ol><ul><li>缺点：需要把路由规则写到业务代码中</li><li>解决方法：把路由规则封装成一个模块，使用时集成这个模块。这就是<code>Redis Cluster</code>SDK采用的方法 Redis Cluster内置哨兵逻辑</li></ul><ol start="2"><li>服务端分片</li></ol><ul><li>在客户端和服务端中间增加<code>Proxy</code>层，数据的路由规则放在代理层。无需关心服务端有多少redis节点，只需要和Proxy交互</li><li>Proxy会把你的请求根据路由规则，转发到对应的Redis节点上，而且当集群扩容节点时，对客户端来说是无感的</li></ul><p>业界开源的 Redis 分片集群方案，例如 Twemproxy、Codis 就是采用的这种方案。</p><p><a href="https://dbaplus.cn/news-158-3731-1.html">原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语句介绍及函数定义和参数类型</title>
      <link href="/python-statement-function.html"/>
      <url>/python-statement-function.html</url>
      
        <content type="html"><![CDATA[<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><blockquote><p>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、&#x3D;&#x3D;（等于）、&gt;&#x3D;（大于等于）、&lt;&#x3D;（小于等于）来表示其关系。<br>非零数值、非空字符串、非空 list 等，判断为 True，否则为 False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;正数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;零或负数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s :</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;有值&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="number">0</span>  无输出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="number">1</span>  有值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="if-语句多个判断条件的形式"><a href="#if-语句多个判断条件的形式" class="headerlink" title="if 语句多个判断条件的形式"></a>if 语句多个判断条件的形式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure><h4 id="if-语句多个条件同时判断"><a href="#if-语句多个条件同时判断" class="headerlink" title="if 语句多个条件同时判断"></a>if 语句多个条件同时判断</h4><p>结合 <code>or</code> 和  <code>and</code> 来使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt; <span class="number">0</span> <span class="keyword">and</span> age &lt; <span class="number">18</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;未成年&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span> <span class="keyword">or</span> age &lt; <span class="number">10</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;儿童或少年&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：if 有多个条件时可使用括号来区分判断的先后顺序，括号中的判断优先执行，此外 and 和 or 的优先级低于 &gt;（大于）、&lt;（小于）等判断符号，即大于和小于在没有括号的情况下会比与或要优先判断。</strong></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>在 Python 提供了 for 循环和 while 循环。</p><table><thead><tr><th>循环控制语句</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td>continue</td><td>在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环</td></tr><tr><td>pass</td><td>pass 是空语句，是为了保持程序结构的完整性</td></tr></tbody></table><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>:</span><br><span class="line">  <span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line"><span class="keyword">for</span> entity <span class="keyword">in</span> &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="number">100</span>:<span class="string">&#x27;一百&#x27;</span>&#125;:</span><br><span class="line">  <span class="built_in">print</span>(entity)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">5</span>:</span><br><span class="line">  <span class="built_in">print</span>(num)</span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数就是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数</li><li>函数的第一行语句可以选择性地使用文档字符串（用于存放函数说明）</li><li>函数内容以冒号起始，并且缩进</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None。</li></ul><p>语法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params"> parameters </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>实例：</p><ol><li>def 定义一个函数，给定一个函数名 sum </li><li>声明两个参数 num1 和 num2</li><li>函数的第一行语句进行函数说明：两数之和</li><li>最终 return 语句结束函数，并返回两数之和</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>):</span><br><span class="line"><span class="string">&quot;两数之和&quot;</span></span><br><span class="line"><span class="keyword">return</span> num1+num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>函数可以有多个返回值，一次接受多个返回值的数据类型就是元组</p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>参数类型：默认参数、关键字参数(位置参数)、不定长参数</p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>在构造函数方法时，给参数赋值即可，在使用的时候，不传该参数，就会使用默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">name, age=<span class="number">18</span></span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：只有在形参表末尾的那些参数可以有默认参数</span></span><br><span class="line"><span class="comment"># 例如：fun1(name, age=18)是有效的，fun2(age=18, name)是无效的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传的是list 或者 dict 的情况下， 默认参数的赋值 需要为 None， 因为 默认参数是不可变的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">name, age=<span class="number">18</span>, hobby=<span class="literal">None</span></span>)</span><br></pre></td></tr></table></figure><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>通过参数名来直接赋值，不用考虑参数列表定义的顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">name, age=<span class="number">18</span>, hobby=<span class="literal">None</span></span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">fun1(name=<span class="string">&#x27;tom&#x27;</span>, hobby=[<span class="string">&#x27;唱跳&#x27;</span>,<span class="string">&#x27;Rap&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><p>设计函数的时候，我们有时候无法确定传入的参数个数。可以在参数前边加星号 <code>*</code><br>如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">name, age=<span class="number">18</span>, hobby=<span class="literal">None</span>, *game</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">fun3(<span class="string">&#x27;tom&#x27;</span>, <span class="number">99</span>, <span class="literal">None</span>, <span class="string">&#x27;lol&#x27;</span>, <span class="string">&#x27;cf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tom <span class="number">99</span> <span class="literal">None</span> (<span class="string">&#x27;lol&#x27;</span>, <span class="string">&#x27;cf&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可变长参数也支持关键字参数（位置参数），没有被定义的关键参数会被放到一个字典里。这种方式即是在参数前边加 <code>**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">name, age=<span class="number">18</span>, hobby=<span class="literal">None</span>, **game</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;%s %s %s %s&#x27;</span> % (name, age, hobby, game))</span><br><span class="line"></span><br><span class="line">fun3(<span class="string">&#x27;kunkun&#x27;</span>, <span class="number">1</span>, [<span class="string">&#x27;Rap&#x27;</span>], pc=<span class="string">&#x27;lol&#x27;</span>, mobile=<span class="string">&#x27;王者&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kunkun <span class="number">1</span> [<span class="string">&#x27;Rap&#x27;</span>] &#123;<span class="string">&#x27;pc&#x27;</span>: <span class="string">&#x27;lol&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;王者&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="只接受关键字参数"><a href="#只接受关键字参数" class="headerlink" title="只接受关键字参数"></a>只接受关键字参数</h4><p>将强制关键字参数放到某个<code>*</code>参数或者单个<code>*</code>后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加单个&#x27;*&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">name, *, age</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">fun3(<span class="string">&#x27;tom&#x27;</span>) 报错 TypeError: fun3() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;age&#x27;</span></span><br><span class="line">fun3(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>) 报错 TypeError: fun3() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br><span class="line">fun3(<span class="string">&#x27;tom&#x27;</span>, age=<span class="number">18</span>) 正确</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放在可变参数后面&#x27;*hobby&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">name, age=<span class="number">18</span>, *hobby, sex</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;%s %s %s %s&#x27;</span> % (name, age, hobby, sex))</span><br><span class="line"></span><br><span class="line">fun3(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;唱&#x27;</span>,<span class="string">&#x27;跳&#x27;</span>, <span class="string">&#x27;男&#x27;</span>) 报错 TypeError: fun3() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;sex&#x27;</span></span><br><span class="line">fun3(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;唱&#x27;</span>,<span class="string">&#x27;跳&#x27;</span>, sex=<span class="string">&#x27;男&#x27;</span>) 正确</span><br></pre></td></tr></table></figure><h3 id="函数的值传递问题"><a href="#函数的值传递问题" class="headerlink" title="函数的值传递问题"></a>函数的值传递问题</h3><p><strong>不可更改的类型</strong>：变量赋值 <code>a = 1</code>，其实就是生成一个整形对象 1 ，然后变量 a 指向 1，当 <code>a = 1000</code> 其实就是再生成一个整形对象 1000，然后改变 a 的指向，不再指向整形对象 1 ，而是指向 1000，最后 1 会被丢弃</p><p><strong>可更改的类型</strong>：变量赋值 <code>a = [1,2,3,4,5,6]</code> ，就是生成一个对象 list ，list 里面有 6 个元素，而变量 a 指向 list ，<code>a[2] = 5</code>则是将 list a 的第三个元素值更改,这里跟上面是不同的，并不是将 a 重新指向，而是直接修改 list 中的元素值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unchangeable</span>(<span class="params">num</span>):</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">unchangeable(num)</span><br><span class="line"><span class="built_in">print</span>(num) 输出<span class="number">1</span> 而非<span class="number">100</span>，因为参数是不可更改类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeable</span>(<span class="params">numlist</span>):</span><br><span class="line">  numlist.append(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">numlist = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">changeable(numlist)</span><br><span class="line"><span class="built_in">print</span>(numlist) 输出[<span class="number">1</span>,<span class="number">2</span>,<span class="number">100</span>] </span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>python 使用 lambda 来创建匿名函数<br>匿名函数主要有以下特点：</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</li></ul><p><strong>基本语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p>使用 range(x) 函数，就可以生成一个从 0 到 x-1 的整数序列。</p><p><code>range(0,3)</code>  ， 从 0 数到 3 每次间隔默认值为1 也可以写成<code>range(3)</code> 结果：0,1,2</p><p><code>range(0,10,2) </code> ,从 0 数到 10（不取 10 ），每次间隔为 2 结果：0,2,4,6,8</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据类型及转换包括集合</title>
      <link href="/python-datatype.html"/>
      <url>/python-datatype.html</url>
      
        <content type="html"><![CDATA[<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>包括正整数、负整数和零，是没有小数点的数字。</p><p>Python 可以处理任意大小的整数，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>指带小数的数字</p><p><strong>需要注意精度丢失问题</strong></p><p>因为计算机对浮点数的表达本身是不精确的。保存在计算机中的是二进制数，二进制对有些数字不能准确表达，只能非常接近这个数。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串英文 string ，是 python 中随处可见的数据类型，字符串的识别也非常的简单，就是用「引号」括起来的。</p><p>引号包括单引号 <code>&#39; &#39;</code> ，双引号 <code>&quot; &quot;</code> 和 三引号 <code>&#39;&#39;&#39; &#39;&#39;&#39;</code> ，比如 <code>&#39;abc&#39;</code> ，<code>&quot;123&quot;</code> 等等。</p><p><strong>转义字符：</strong></p><p>比如单引号，你可以使用 <code>\&#39;</code> 来表示，双引号可以使用 <code>\&quot;</code>  来表示。</p><p>注意，这里的是反斜杠 <code>\</code>, 不是斜杆 <code>/</code> 。</p><h4 id="字符串编码问题"><a href="#字符串编码问题" class="headerlink" title="字符串编码问题"></a>字符串编码问题</h4><p>通常在文件开头写上这两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>第一行注释是为了告诉 Linux&#x2F;OS X 系统，这是一个 Python 可执行程序，Windows 系统会忽略这个注释；</p><p>第二行注释是为了告诉 Python 解释器，按照 UTF-8 编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p><p>申明了 UTF-8 编码并不意味着你的 .py 文件就是 UTF-8 编码的，必须并且要确保文本编辑器正在使用 UTF-8 without BOM 编码</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有 <code>True</code> 、 <code>False </code>两种值，要么是 <code>True</code>，要么是 <code>False</code>，在 Python 中，可以直接用 True、False 表示布尔值（请注意大小写），也可以通过布尔运算计算出来。</p><p>布尔值可以用 <code>and</code>、<code>or</code> 和 <code>not</code> 运算。</p><p><code>and</code> 运算是与运算，只有所有都为 True，and 运算结果才是 True。</p><p><code>or</code> 运算是或运算，只要其中有一个为 True，or 运算结果就是 True。</p><p><code>not</code> 运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。</p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p><p>变量在程序中就是用一个变量名表示了，<strong>变量名必须是大小写英文、数字和_的组合，且不能用数字开头</strong></p><h4 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h4><p>Python 允许同时为多个变量赋值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上实例，创建一个整型对象，值为 1，三个变量被分配到相同的内存空间上。</p><p>当然也可以为多个对象指定多个变量。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;下次一定&quot;</span></span><br></pre></td></tr></table></figure><p>代表 a为1、b为2、c为‘下次一定’</p><h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int(x [,base ])</td><td>将x转换为一个整数</td></tr><tr><td>float(x )</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag ])</td><td>创建一个复数</td></tr><tr><td>str(x )</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x )</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str )</td><td>用来计算在字符串中的有效 Python 表达式,并返回一个对象</td></tr><tr><td>tuple(s )</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s )</td><td>将序列 s 转换为一个列表</td></tr><tr><td>chr(x )</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x )</td><td>将一个整数转换为 Unicode 字符</td></tr><tr><td>ord(x )</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x )</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x )</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p>注：在 Python 3 里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>列表就是用<code>[]</code>包起来多个元素构成的List，元素之间用逗号分隔，每个元素的数据类型可以不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;xcyd&#x27;</span>, <span class="string">&#x27;四号字符&#x27;</span>, <span class="number">88.88</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(L)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;xcyd&#x27;</span>, <span class="string">&#x27;四号字符&#x27;</span>, <span class="number">88.88</span>]</span><br></pre></td></tr></table></figure><h4 id="获取列表元素"><a href="#获取列表元素" class="headerlink" title="获取列表元素"></a>获取列表元素</h4><ol><li>通过索引来获取指定元素，索引从0开始，L[0] 即为 1</li><li>通过区间获取多个元素，L[0:2] 即为 从第 0 个开始取，取到第 2 个，但是不包含第 2 个。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">0</span>:<span class="number">2</span>] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">L[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">2</span>,<span class="string">&#x27;xcyd&#x27;</span>]</span><br><span class="line">L[:<span class="number">2</span>] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">L[<span class="number">2</span>:] = [<span class="string">&#x27;xcyd&#x27;</span>, <span class="string">&#x27;四号字符&#x27;</span>, <span class="number">88.88</span>]</span><br><span class="line">L[:] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;xcyd&#x27;</span>, <span class="string">&#x27;四号字符&#x27;</span>, <span class="number">88.88</span>]</span><br></pre></td></tr></table></figure></li></ol><h4 id="增删改列表元素"><a href="#增删改列表元素" class="headerlink" title="增删改列表元素"></a>增删改列表元素</h4><ul><li>使用<code>append()</code>方法直接添加 L.append(6)</li><li>修改指向索引的元素 L[2] &#x3D; 3</li><li>使用<code>del</code>语句来删除元素 del L[4]</li></ul><h3 id="List（列表）运算符"><a href="#List（列表）运算符" class="headerlink" title="List（列表）运算符"></a>List（列表）运算符</h3><p>列表对 <code>+</code>  和 <code>*</code>  的操作符与字符串相似。<code>+</code> 号用于组合列表，<code>*</code>  号用于重复列表。</p><table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len([1, 2, 3])</td><td>3</td><td>计算元素个数</td></tr><tr><td>[1, 2, 3] + [4, 5, 6]</td><td>[1, 2, 3, 4, 5, 6]</td><td>组合</td></tr><tr><td>[‘Hi!’] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>复制</td></tr><tr><td>3 in [1, 2, 3]</td><td>True</td><td>元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print x,</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h3 id="List（列表）函数-amp-方法"><a href="#List（列表）函数-amp-方法" class="headerlink" title="List（列表）函数&amp;方法"></a>List（列表）函数&amp;方法</h3><table><thead><tr><th>函数&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td>len(list)</td><td>列表元素个数</td></tr><tr><td>max(list)</td><td>返回列表元素最大值</td></tr><tr><td>min(list)</td><td>返回列表元素最小值</td></tr><tr><td>list(seq)</td><td>将元组转换为列表</td></tr><tr><td>list.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop(obj&#x3D;list[-1])</td><td>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中的一个元素（参数是列表中元素），并且不返回任何值</td></tr><tr><td>list.reverse()</td><td>反向列表中元素</td></tr><tr><td>list.sort([func])</td><td>对原列表进行排序</td></tr></tbody></table><h3 id="tuple（元组）"><a href="#tuple（元组）" class="headerlink" title="tuple（元组）"></a>tuple（元组）</h3><p>tuple 和 List 非常类似，都是有序列表；但是 tuple 一旦初始化就不能修改。</p><p>元组（tuple） 不可变是指当你创建了 tuple 时候，它就不能改变了，也就是说它也没有 append()，insert() 这样的方法，但它也有获取某个索引值的方法，但是不能赋值。<br><strong>因为 tuple 是不可变的，所以代码更安全，所以建议能用 tuple 代替 list 就尽量用 tuple</strong></p><p>元组下标索引也是从 0 开始，元组（tuple）可以使用下标索引来访问元组中的值。 </p><h4 id="增删改tuple"><a href="#增删改tuple" class="headerlink" title="增删改tuple"></a>增删改tuple</h4><ul><li>声明一个 t &#x3D; (1,2,3) 即为一个元组<br><strong>元组只包含一个元素时，需要在元素后面添加逗号 t &#x3D; (1,)</strong></li><li>修改指的是操作元组内的元素，如list 实现修改，并不是修改元组本身</li><li>使用<code>del</code>语句来删除整个元组 del t</li></ul><h3 id="tuple（元组）运算符"><a href="#tuple（元组）运算符" class="headerlink" title="tuple（元组）运算符"></a>tuple（元组）运算符</h3><p>与字符串一样，元组之间可以使用 <code>+</code> 号和 <code>*</code> 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len((1, 2, 3))</td><td>3</td><td>计算元素个数</td></tr><tr><td>(1, 2, 3) + (4, 5, 6)</td><td>(1, 2, 3, 4, 5, 6)</td><td>连接</td></tr><tr><td>(‘Hi!’,) * 4</td><td>(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td>复制</td></tr><tr><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td></tr><tr><td>for x in (1, 2, 3):  print(x)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h3 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>len(tuple)</td><td>计算元组元素个数</td></tr><tr><td>max(tuple)</td><td>返回元组中元素最大值</td></tr><tr><td>min(tuple)</td><td>返回元组中元素最小值</td></tr><tr><td>tuple(seq)</td><td>将列表转换为元组</td></tr></tbody></table><h3 id="dict（字典）"><a href="#dict（字典）" class="headerlink" title="dict（字典）"></a>dict（字典）</h3><p>字典是一种可变容器模型，可以存储任意类型对象<br>字典的每个键值(key&#x3D;&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 ,格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;key1 : value1, key2 : value2 &#125;</span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">2</span> : <span class="string">&#x27;二&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过Key来访问</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;二&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>注意：<strong>键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的。</strong></p><h4 id="增删改dict"><a href="#增删改dict" class="headerlink" title="增删改dict"></a>增删改dict</h4><ul><li>新增一个键值对 d[‘c’] &#x3D; 100</li><li>修改 d[‘c’] &#x3D; ‘下次一定’</li><li>删除 通过<code>del</code>语句删除某个或整个字典 del d[‘a’] &#x2F; del d；通过<code>clear()</code>方法清除字典的所有元素 d.clear()</li></ul><h3 id="dict（字典）注意事项"><a href="#dict（字典）注意事项" class="headerlink" title="dict（字典）注意事项"></a>dict（字典）注意事项</h3><ol><li>不允许一个键创建两次的，但是在创建 dict （字典）的时候如果出现了一个键值赋予了两次，会以最后一次赋予的值为准</li><li>键必须不可变，可是键可以用数字，字符串或元组充当，但是就是不能使用列表</li><li>dict 内部存放的顺序和 key 放入的顺序是没有任何关系</li></ol><p>和 list 比较，dict 有以下几个特点：</p><ul><li>查找和插入的速度极快，不会随着key的增加而变慢</li><li>需要占用大量的内存，内存浪费多<br>而list相反：</li><li>查找和插入的时间随着元素的增加而增加</li><li>占用空间小，浪费内存很少</li></ul><h3 id="dict（字典）的函数和方法"><a href="#dict（字典）的函数和方法" class="headerlink" title="dict（字典）的函数和方法"></a>dict（字典）的函数和方法</h3><table><thead><tr><th>方法和函数</th><th>描述</th></tr></thead><tbody><tr><td>len(dict)</td><td>计算字典元素个数</td></tr><tr><td>str(dict)</td><td>输出字典可打印的字符串表示</td></tr><tr><td>type(variable)</td><td>返回输入的变量类型，如果变量是字典就返回字典类型</td></tr><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.values()</td><td>以列表返回字典中的所有值</td></tr><tr><td>popitem()</td><td>随机返回并删除字典中的一对键和值</td></tr><tr><td>dict.items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr></tbody></table><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote><p>Set是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素。<br>创建一个set 需要提供一个list作为输入集合 set(list)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">456</span>, <span class="number">123</span>, <span class="number">789</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="增删set"><a href="#增删set" class="headerlink" title="增删set"></a>增删set</h4><ul><li>通过 add(key) 方法可以添加元素到 set 中，可以重复添加，但不会有效果</li><li>通过 remove(key) 方法可以删除 set 中的元素</li></ul><h3 id="set的运用"><a href="#set的运用" class="headerlink" title="set的运用"></a>set的运用</h3><p>因为 set 是一个无序不重复元素集，因此，两个 set 可以做数学意义上的 union(并集), intersection(交集), difference(差集) 等操作。</p><ul><li>交集（求两个set中相同的元素）<code>set1 &amp; set2</code></li><li>并集（合并两个set，并消除相同的元素）<code>set1 | set2</code></li><li>差集（求set1或者set2的差集）<code>set1 - set2</code> 或者 <code>set2 - set1</code></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>tuple (元组) 使用小括号</li><li>list (列表) 使用方括号</li><li>dict (字典) 使用的是大括号</li><li>dict 也是无序的，只不过 dict 保存的是 key-value 键值对值，有重复的 key ，会被后面的 key-value 值覆盖的；而 set 可以理解为只保存 key 值，重复元素在 set 中自动被过滤的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python代码规范大全</title>
      <link href="/python-codespecification.html"/>
      <url>/python-codespecification.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、简明概述"><a href="#一、简明概述" class="headerlink" title="一、简明概述"></a>一、简明概述</h1><h2 id="1、编码"><a href="#1、编码" class="headerlink" title="1、编码"></a>1、编码</h2><ul><li>如无特殊情况, 文件一律使用 UTF-8 编码</li><li>如无特殊情况, 文件头部必须加入<code>#-*-coding:utf-8-*-</code>标识</li></ul><h2 id="2、代码格式"><a href="#2、代码格式" class="headerlink" title="2、代码格式"></a>2、代码格式</h2><h3 id="2-1、缩进"><a href="#2-1、缩进" class="headerlink" title="2.1、缩进"></a>2.1、缩进</h3><ul><li>统一使用 4 个空格进行缩进<span id="more"></span></li></ul><h3 id="2-2、行宽"><a href="#2-2、行宽" class="headerlink" title="2.2、行宽"></a>2.2、行宽</h3><p>每行代码尽量不超过 80 个字符(在特殊情况下可以略微超过 80 ，但最长不得超过 120)</p><p>理由：</p><ul><li>这在查看 side-by-side 的 diff 时很有帮助</li><li>方便在控制台下查看代码</li><li>太长可能是设计有缺陷</li></ul><h3 id="2-3、引号"><a href="#2-3、引号" class="headerlink" title="2.3、引号"></a>2.3、引号</h3><p>简单说，自然语言使用双引号，机器标示使用单引号，因此 <strong>代码里</strong> 多数应该使用 <strong>单引号</strong></p><ul><li><em><strong>自然语言</strong></em> <strong>使用双引号</strong> <code>&quot;...&quot;</code><br>例如错误信息；很多情况还是 unicode，使用<code>u&quot;你好世界&quot;</code></li><li><em><strong>机器标识</strong></em> <strong>使用单引号</strong> <code>&#39;...&#39;</code><br>例如 dict 里的 key</li><li><em><strong>正则表达式</strong></em> <strong>使用原生的双引号</strong> <code>r&quot;...&quot;</code></li><li><em><strong>文档字符串 (docstring)</strong></em> <strong>使用三个双引号</strong> <code>&quot;&quot;&quot;......&quot;&quot;&quot;</code></li></ul><h3 id="2-4、空行"><a href="#2-4、空行" class="headerlink" title="2.4、空行"></a>2.4、空行</h3><ul><li>模块级函数和类定义之间空两行；</li><li>类成员函数之间空一行；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">pass</span>   </span><br></pre></td></tr></table></figure><ul><li>可以使用多个空行分隔多组相关的函数</li><li>函数中可以使用空行分隔出逻辑相关的代码</li></ul><h2 id="3、import-语句"><a href="#3、import-语句" class="headerlink" title="3、import 语句"></a>3、import 语句</h2><ul><li>import 语句应该分行书写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure><ul><li>import语句应该使用 <strong>absolute</strong> import</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="keyword">from</span> ..bar <span class="keyword">import</span> Bar</span><br></pre></td></tr></table></figure><ul><li>import语句应该放在文件头部，置于模块说明及docstring之后，于全局变量之前；</li><li>import语句应该按照顺序排列，每组之间用一个空行分隔</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> msgpack</span><br><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo</span><br></pre></td></tr></table></figure><ul><li>导入其他模块的类定义时，可以使用相对导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myclass <span class="keyword">import</span> MyClass</span><br></pre></td></tr></table></figure><ul><li>如果发生命名冲突，则可使用命名空间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">import</span> foo.bar</span><br><span class="line"></span><br><span class="line">bar.Bar()</span><br><span class="line">foo.bar.Bar()</span><br></pre></td></tr></table></figure><h2 id="4、空格"><a href="#4、空格" class="headerlink" title="4、空格"></a>4、空格</h2><ul><li>在二元运算符两边各空一格<code>[=,-,+=,==,&gt;,in,is not, and]</code>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">submitted += <span class="number">1</span></span><br><span class="line">x = x * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">hypot2 = x * x + y * y</span><br><span class="line">c = (a + b) * (a - b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line">submitted +=<span class="number">1</span></span><br><span class="line">x = x*<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">hypot2 = x*x + y*y</span><br><span class="line">c = (a+b) * (a-b)</span><br></pre></td></tr></table></figure><ul><li>函数的参数列表中，<code>,</code>之后要有空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex</span>(<span class="params">real, imag</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex</span>(<span class="params">real,imag</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>函数的参数列表中，默认值等号两边不要添加空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex</span>(<span class="params">real, imag=<span class="number">0.0</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex</span>(<span class="params">real, imag = <span class="number">0.0</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>左括号之后，右括号之前不要加多余的空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line">spam( ham[<span class="number">1</span>], &#123; eggs : <span class="number">2</span> &#125; )</span><br></pre></td></tr></table></figure><ul><li>字典对象的左括号之前不要多余的空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;key&#x27;</span>] = <span class="built_in">list</span>[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="built_in">dict</span> [<span class="string">&#x27;key&#x27;</span>] = <span class="built_in">list</span> [index]</span><br></pre></td></tr></table></figure><ul><li>不要为对齐赋值语句而使用的额外空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">long_variable = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line">x             = <span class="number">1</span></span><br><span class="line">y             = <span class="number">2</span></span><br><span class="line">long_variable = <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="5、换行"><a href="#5、换行" class="headerlink" title="5、换行"></a>5、换行</h2><p>Python 支持括号内的换行。这时有两种情况。</p><ol><li>第二行缩进到括号的起始处</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">                         var_three, var_four)</span><br></pre></td></tr></table></figure><ol start="2"><li>第二行缩进 4 个空格，适用于起始括号就换行的情形</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">long_function_name</span>(<span class="params"></span></span><br><span class="line"><span class="params">        var_one, var_two, var_three,</span></span><br><span class="line"><span class="params">        var_four</span>):</span><br><span class="line">    <span class="built_in">print</span>(var_one)</span><br></pre></td></tr></table></figure><p>使用反斜杠<code>\</code>换行，二元运算符<code>+</code> <code>.</code>等应出现在行末；长字符串也可以用此法换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">session.query(MyTable).\</span><br><span class="line">        filter_by(<span class="built_in">id</span>=<span class="number">1</span>).\</span><br><span class="line">        one()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Hello, &#x27;</span>\</span><br><span class="line">      <span class="string">&#x27;%s %s!&#x27;</span> %\</span><br><span class="line">      (<span class="string">&#x27;Harry&#x27;</span>, <span class="string">&#x27;Potter&#x27;</span>)</span><br></pre></td></tr></table></figure><p>禁止复合语句，即一行中包含多个语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line">do_first()</span><br><span class="line">do_second()</span><br><span class="line">do_third()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line">do_first();do_second();do_third();</span><br></pre></td></tr></table></figure><p><code>if/for/while</code>一定要换行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">&#x27;blah&#x27;</span>:</span><br><span class="line">    do_blah_thing()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">&#x27;blah&#x27;</span>: do_blash_thing()</span><br></pre></td></tr></table></figure><h2 id="6、docstring"><a href="#6、docstring" class="headerlink" title="6、docstring"></a>6、docstring</h2><p>docstring 的规范中最其本的两点：</p><ol><li>所有的公共模块、函数、类、方法，都应该写 docstring 。私有方法不一定需要，但应该在 def 后提供一个块注释来说明。</li><li>docstring 的结束”””应该独占一行，除非此 docstring 只有一行。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Return a foobar</span></span><br><span class="line"><span class="string">Optional plotz says to frobnicate the bizbaz first.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;Oneline docstring&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h1><h2 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h2><h3 id="1-1、块注释"><a href="#1-1、块注释" class="headerlink" title="1.1、块注释"></a>1.1、块注释</h3><p>“#”号后空一格，段落件用空行分开（同样需要“#”号）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 块注释</span></span><br><span class="line"><span class="comment"># 块注释</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 块注释</span></span><br><span class="line"><span class="comment"># 块注释</span></span><br></pre></td></tr></table></figure><h3 id="1-2、行注释"><a href="#1-2、行注释" class="headerlink" title="1.2、行注释"></a>1.2、行注释</h3><p>至少使用两个空格和语句分开，注意不要使用无意义的注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line">x = x + <span class="number">1</span>  <span class="comment"># 边框加粗一个像素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的写法(无意义的注释)</span></span><br><span class="line">x = x + <span class="number">1</span> <span class="comment"># x加1</span></span><br></pre></td></tr></table></figure><h3 id="1-3、建议"><a href="#1-3、建议" class="headerlink" title="1.3、建议"></a>1.3、建议</h3><ul><li><p>在代码的关键部分(或比较复杂的地方), 能写注释的要尽量写注释</p></li><li><p>比较重要的注释段, 使用多个等号隔开, 可以更加醒目, 突出重要性</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app = create_app(name, options)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================</span></span><br><span class="line"><span class="comment"># 请勿在此处添加 get post等app路由行为 !!!</span></span><br><span class="line"><span class="comment"># =====================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="2、文档注释（Docstring）"><a href="#2、文档注释（Docstring）" class="headerlink" title="2、文档注释（Docstring）"></a>2、文档注释（Docstring）</h2><p>作为文档的Docstring一般出现在模块头部、函数和类的头部，这样在python中可以通过对象的__doc__对象获取文档.<br>编辑器和IDE也可以根据Docstring给出自动提示.</p><ul><li>文档注释以 “”” 开头和结尾, 首行不换行, 如有多行, 末行必需换行, 以下是Google的docstring风格示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Example docstrings.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module demonstrates documentation as specified by the `Google Python</span></span><br><span class="line"><span class="string">Style Guide`_. Docstrings may extend over multiple lines. Sections are created</span></span><br><span class="line"><span class="string">with a section header and a colon followed by a block of indented text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    Examples can be given using either the ``Example`` or ``Examples``</span></span><br><span class="line"><span class="string">    sections. Sections support any reStructuredText formatting, including</span></span><br><span class="line"><span class="string">    literal blocks::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $ python example_google.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Section breaks are created by resuming unindented text. Section breaks</span></span><br><span class="line"><span class="string">are also implicitly created anytime a new section starts.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>不要在文档注释复制函数定义原型, 而是具体描述其具体内容, 解释具体参数和返回值等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  不推荐的写法(不要写函数原型等废话)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;function(a, b) -&gt; list&quot;&quot;&quot;</span></span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  正确的写法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算并返回a到b范围内数据的平均值&quot;&quot;&quot;</span></span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure><ul><li>对函数参数、返回值等的说明采用numpy标准, 如下所示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">arg1, arg2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在这里写函数的一句话总结(如: 计算平均值).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    这里是具体描述.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    arg1 : int</span></span><br><span class="line"><span class="string">        arg1的具体描述</span></span><br><span class="line"><span class="string">    arg2 : int</span></span><br><span class="line"><span class="string">        arg2的具体描述</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    int</span></span><br><span class="line"><span class="string">        返回值的具体描述</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参看</span></span><br><span class="line"><span class="string">    --------</span></span><br><span class="line"><span class="string">    otherfunc : 其它关联函数等...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    示例</span></span><br><span class="line"><span class="string">    --------</span></span><br><span class="line"><span class="string">    示例使用doctest格式, 在`&gt;&gt;&gt;`后的代码可以被文档测试工具作为测试用例自动运行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a=[1,2,3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print [x + 3 for x in a]</span></span><br><span class="line"><span class="string">    [4, 5, 6]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>文档注释不限于中英文, 但不要中英文混用</p></li><li><p>文档注释不是越长越好, 通常一两句话能把情况说清楚即可</p></li><li><p>模块、公有类、公有方法, 能写文档注释的, 应该尽量写文档注释</p></li></ul><h1 id="三、命名规范"><a href="#三、命名规范" class="headerlink" title="三、命名规范"></a>三、命名规范</h1><h2 id="1、模块"><a href="#1、模块" class="headerlink" title="1、模块"></a>1、模块</h2><ul><li>模块尽量使用小写命名，首字母保持小写，尽量不要用下划线(除非多个单词，且数量不多的情况)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的模块名</span></span><br><span class="line"><span class="keyword">import</span> decoder</span><br><span class="line"><span class="keyword">import</span> html_parser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的模块名</span></span><br><span class="line"><span class="keyword">import</span> Decoder</span><br></pre></td></tr></table></figure><h2 id="2、类名"><a href="#2、类名" class="headerlink" title="2、类名"></a>2、类名</h2><ul><li>类名使用驼峰(CamelCase)命名风格，首字母大写，私有类可用一个下划线开头</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Farm</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalFarm</span>(<span class="title class_ inherited__">Farm</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_PrivateFarm</span>(<span class="title class_ inherited__">Farm</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li></ul><h2 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h2><ul><li>函数名一律小写，如有多个单词，用下划线隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_with_env</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>私有函数在函数前加一个下划线_</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_private_func</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="4、变量名"><a href="#4、变量名" class="headerlink" title="4、变量名"></a>4、变量名</h2><ul><li>变量名尽量小写, 如有多个单词，用下划线隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    school_name = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>常量采用全大写，如有多个单词，使用下划线隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAX_CLIENT = <span class="number">100</span></span><br><span class="line">MAX_CONNECTION = <span class="number">1000</span></span><br><span class="line">CONNECTION_TIMEOUT = <span class="number">600</span></span><br></pre></td></tr></table></figure><h2 id="5、常量"><a href="#5、常量" class="headerlink" title="5、常量"></a>5、常量</h2><ul><li>常量使用以下划线分隔的大写命名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MAX_OVERFLOW = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">Class FooBar:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo_bar</span>(<span class="params">self, print_</span>):</span><br><span class="line">        <span class="built_in">print</span>(print_)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>摘录教程来自 ：<a href="https://github.com/TwoWater/Python/tree/master/Article/codeSpecification">https://github.com/TwoWater/Python/tree/master/Article/codeSpecification</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 代码规范 </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/regular-expression.html"/>
      <url>/regular-expression.html</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>用于字符串的判断、匹配。用一组规则来定义字符串是否符合要求</p><h4 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h4><ul><li><p><code>\d</code> 匹配一个数字</p></li><li><p><code>\w</code> 匹配一个字母或者数字</p></li><li><p><code>\s</code> 匹配一个空格(也包括Tab等空白符), <code>\s+</code>表示至少一个空格</p></li><li><p><code>.</code>  匹配任意字符</p><span id="more"></span></li><li><p><code>*</code>  表示任意个字符(包括0个)</p></li><li><p><code>+</code>  表示至少一个字符</p></li><li><p><code>?</code>  表示0个或1个字符</p></li><li><p><code>&#123;n&#125;</code>  表示n个字符</p></li><li><p><code>&#123;n,m&#125;</code>  表示n-m个字符</p></li><li><p><code>A|B</code>  匹配A或者B 所以<code>(P|p)ython</code>匹配<code>Python</code>或<code>python</code> 也可以写成<code>P|python</code></p></li><li><p><code>^</code>  表示行的开头，<code>^\d</code> 表示必须以数字开头</p></li><li><p><code>$</code>  表示行的结束，<code>\d$</code> 表示必须以数字结尾</p></li><li><p><code>[]</code>  表示范围  () 表示或者</p><ul><li>[a-z] 表示从字母a到z</li><li>(a|b) 表示a或者b</li></ul></li></ul><table><thead><tr><th>字符</th><th>数量</th><th>位置</th></tr></thead><tbody><tr><td>\d 匹配数字</td><td>* 0个或者更多</td><td>^ 一行的开头</td></tr><tr><td>\w 匹配字符(数字、字母)</td><td>+ 至少一个字符</td><td>$ 一行的结尾</td></tr><tr><td>\s 匹配一个空格(也包括Tab等空白符)</td><td>? 0个或者1个字符</td><td>\b 单词“结界”</td></tr><tr><td>\S 匹配非空格(包括Tab等空白符)</td><td>{n, m}表示n-m个字符</td><td></td></tr><tr><td>. 匹配任何字符</td><td></td><td></td></tr></tbody></table><p>例子：</p><ul><li><code>00\d</code> 可以匹配 <code>007</code></li><li><code>\d\d\d</code> 可以匹配 <code>010</code></li><li><code>\w\w\d</code> 可以匹配 <code>py3</code></li><li><code>.\d</code> 可以匹配 <code>@1</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaagent介绍及使用示例</title>
      <link href="/javaagent-desc.html"/>
      <url>/javaagent-desc.html</url>
      
        <content type="html"><![CDATA[<h3 id="javaagent介绍及使用"><a href="#javaagent介绍及使用" class="headerlink" title="javaagent介绍及使用"></a>javaagent介绍及使用</h3><p>Javaagent是从JDK1.5开始引入的，agent的意思是代理，它实际上是个包含premain方法的jar包。要被监控的程序执行时需要在java启动参数中增加-javaagent参数，指定要加载的javaagent包。premain方法先于main方法执行，可以在类加载之前修改类定义，从而实现很多功能。</p><p>当Javaagent正确被加载，premain方法会自动被调用，并且会获取到Instrumentation对象的一个引用。通过Instrumentation这个对象，可以实现很多功能，比如修改类路径、获取已经加载的类、获取对象大小等等。其中最常用的是通过addTransformer方法添加类转化器，动态修改类定义，从而实现无侵入的应用监控。</p><span id="more"></span><p>从JDK1.6开始，提供了agentmain方法，提供了动态修改运行中的已经被加载的类的途径。一般通过VirtualMachine的attach(pid)方法获得VirtualMachine实例，随后调用loadagent方法将Javaagent的jar包加载到目标JVM中。</p><p><strong>总结：Javaagent 只要作用在class被加载之前对其加载，插入我们需要添加的字节码。</strong></p><h3 id="实现Agent启动方法"><a href="#实现Agent启动方法" class="headerlink" title="实现Agent启动方法"></a>实现Agent启动方法</h3><ol><li><p>启动时加载，实现<code>permain</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span>;</span><br><span class="line">[<span class="number">2</span>]<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs)</span>; </span><br></pre></td></tr></table></figure></li><li><p>运行时加载，实现<code>agentmain</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span>;</span><br><span class="line">[<span class="number">2</span>]<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时调用方法，找到进程Id 挂载到JVM抽象</span></span><br><span class="line"><span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(<span class="string">&quot;&#123;pid&#125;&quot;</span>);</span><br><span class="line">vm.loadAgent(<span class="string">&quot;&#123;agent&#125;&quot;</span>, <span class="string">&quot;&#123;params&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>上面的两个方法只需要实现一个即可，且[1]的优先级是高于[2]的，即如果上面的两个方法同时出现，则只会执行[1]方法</strong></p></li></ol><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h4><p>Java Agent 是以 jar 包的形式存在。创建一个maven工程。引入插件自动生成MANIFEST.MF文件，替换成自己的项目中的AgentApp类路径：我的是<code>xyz.xcyd.AgentApp</code><br>这样就能在打包的时候 将配置自动写入MANIFEST.MF文件</p><ul><li><code>javaassist</code>包来修改字节码</li><li><code>jmockit</code>包VirtualMachine进行动态挂载Agent</li></ul><p>完整 pom.xml 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javaagent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xyz.xcyd<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jmockit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmockit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 修改为自己的类路径 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>xyz.xcyd.AgentApp<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>xyz.xcyd.AgentApp<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写-AgentApp-类-和-MyTransformer类实现ClassFileTransformer接口，完成耗时统计方法"><a href="#编写-AgentApp-类-和-MyTransformer类实现ClassFileTransformer接口，完成耗时统计方法" class="headerlink" title="编写 AgentApp 类 和 MyTransformer类实现ClassFileTransformer接口，完成耗时统计方法"></a>编写 AgentApp 类 和 MyTransformer类实现ClassFileTransformer接口，完成耗时统计方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.xcyd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jvm 参数形式启动，运行此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> agentArgs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter premain ......&quot;</span>);</span><br><span class="line">        showExecTime(inst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态 attach 方式启动，运行此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> agentArgs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter agentmain ......&quot;</span>);</span><br><span class="line">        showExecTime(inst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示执行时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showExecTime</span><span class="params">(Instrumentation inst)</span>&#123;</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">MyTransformer</span>(), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>实现自定义ClassFileTransformer</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里我们限制下，只针对目标包下进行耗时统计</span></span><br><span class="line">        <span class="keyword">if</span> (!className.startsWith(<span class="string">&quot;xyz/xcyd&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在加载类：&quot;</span> + className);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">cl</span> <span class="operator">=</span> classPool.makeClass(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(classfileBuffer));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 所有方法，统计耗时</span></span><br><span class="line">            <span class="keyword">for</span> (CtMethod method : cl.getDeclaredMethods()) &#123;</span><br><span class="line">                <span class="comment">//需要通过`addLocalVariable`来声明局部变量</span></span><br><span class="line">                method.addLocalVariable(<span class="string">&quot;start&quot;</span>, CtClass.longType);</span><br><span class="line">                <span class="comment">//插入 开始语句</span></span><br><span class="line">                method.insertBefore(<span class="string">&quot;start = System.currentTimeMillis();&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getLongName();</span><br><span class="line">                <span class="comment">//创建并插入 打印语句 System.out.println(&quot;方法：test， 执行时间：&quot; + (System.currentTimeMillis() - start));</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">statement</span> <span class="operator">=</span> String.format(<span class="string">&quot;System.out.println(\&quot;方法：%s， 执行时间：\&quot; + (System.currentTimeMillis() - start));&quot;</span>, methodName);</span><br><span class="line">                method.insertAfter(statement);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] transformed = cl.toBytecode();</span><br><span class="line">            <span class="keyword">return</span> transformed;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打包AgentApp，加入项目启动参数"><a href="#打包AgentApp，加入项目启动参数" class="headerlink" title="打包AgentApp，加入项目启动参数"></a>打包AgentApp，加入项目启动参数</h4><p>将Agent项目打包成jar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p>找一个自己的SpringBoot项目，在Idea的 <code>Run/Debug Configurations</code>中快速配置 <code>-javaagent:E:\IdeaWorkSpace\test-java-agent\target\xyz.xcyd-1.0-SNAPSHOT.jar</code> Agent Jar包的路径<br><img src="https://s2.loli.net/2022/07/12/z6thIbknWBxrpJa.png" alt="6tq7d0.md.png"></p><p>启动项目 输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法：XXXXXXX$$EnhancerBySpringCGLIB$$ee06503b.login(java.lang.String)， 执行时间：611</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构随笔</title>
      <link href="/data-structure.html"/>
      <url>/data-structure.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h2><p>数组（Array）由相同类型的元素（Element）组成，并且使用一块连续的内存来存储。可以直接用索引（index）计算出该元素对应的存储地址<br>特点是：提供了随机访问 并且容量有限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设数组长度为n</span><br><span class="line">访问：O（<span class="number">1</span>） 访问特定位置的元素</span><br><span class="line">插入：O（n） 最坏的情况，插入在数组首位，需要移动整个数组元素</span><br><span class="line">删除：O（n） 最坏的情况，删数组开头元素，需将后面的元素整个前移</span><br></pre></td></tr></table></figure><h2 id="链表（LinkedList）"><a href="#链表（LinkedList）" class="headerlink" title="链表（LinkedList）"></a>链表（LinkedList）</h2><p>虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据<br>链表的删除和插入操作的复杂度为O（1），因为只需要知道目标元素的上一个元素位置即可，但是在查找的时候复杂度为O（n）</p><blockquote><p>使用链表结构可以克服数组需要预知大小的缺点。链表可以充分利用计算机内存空间，进行灵活内存管理。但是链表不是节省空间，相对于数组会占用更多空间，<br>因为每个节点还要存储指向其他节点的指针。除此以外，链表不具有数组随机读取的优点</p></blockquote><h3 id="链表分类"><a href="#链表分类" class="headerlink" title="链表分类"></a>链表分类</h3><ol><li>单链表</li><li>双向链表</li><li>循环链表</li><li>双向循环链表<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假如列表中有n个元素</span><br><span class="line">访问：O（n）     访问特定位置的元素</span><br><span class="line">插入删除：O（1） 需知道插入元素的位置</span><br></pre></td></tr></table></figure></li></ol><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>只有一个方向，节点只有一个后继指针next指向后面的一个节点。因此这种链表在物理内存上是不连续的。<br>我们习惯把第一个节点叫头节点，通过头节点我们可以遍历整个链表。头节点不保存任何值，尾节点指向null。</p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>是一种特殊的单链表，与单链表不同的地方在于<strong>尾节点是指向头节点</strong></p><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>包含两个指针，一个（prev）指向前一个节点，一个(next)指向后一个节点</p><h4 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h4><p>尾节点的next指向头节点，头节点的prev指向尾节点，构成一个环。</p><h2 id="数组和链表的应用场景和区别"><a href="#数组和链表的应用场景和区别" class="headerlink" title="数组和链表的应用场景和区别"></a>数组和链表的应用场景和区别</h2><ul><li>数组支持随机访问，链表不支持</li><li>数组使用连续内存空间对CPU的缓存机制友好，链表则相反</li><li>数组的大小固定，链表支持动态扩容（数组如果声明过小，需要另外申请一块更大的内存空间存放，然后将原数组拷贝进去，这个操作比较耗时）</li><li>如果需要存储的数据元素个数确定，并且不需要经常添加和删除，就使用数组</li><li>如果需要存储的数据元素个数不确定，并且需要经常添加和删除，就使用链表</li></ul><h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>只允许在有序的线性数据集合的一端进行加入数据和取出数据，<strong>即在栈顶（top）中进行数据push或pop</strong>。按照后进先出（LIFO，last in first out）的方式运作。<br><strong>栈常用一维数组或者链表来实现，用数组实现的叫顺序栈；用链表实现的叫链式栈</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设栈中有n个元素</span><br><span class="line">访问：O（n）     最坏的情况访问元素在栈底（bottom）</span><br><span class="line">插入删除：O（1） 顶端插入和删除元素</span><br></pre></td></tr></table></figure><h3 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h3><p>当我们需要处理的数据只涉及在一端插入和删除数据，并且满足 <code>后进先出</code> 的特征时，使用栈数据结构。</p><h4 id="栈实现游览器的前进后退"><a href="#栈实现游览器的前进后退" class="headerlink" title="栈实现游览器的前进后退"></a>栈实现游览器的前进后退</h4><p>使用两个栈stack1、stack2实现这个功能：按顺序查看了1 2 3 4这四个页面，依次将四个页面入栈。<br>当想回看2页面时，先将4,3取出放入stack2。这时情况为stack1：1 2；stack2：4 3。<br>前进看3页面时，将stack2中的3取出放入stack1.这时情况为stack1：1 2 3；stack2：4。</p><h4 id="栈实现检查符号是否成对出现"><a href="#栈实现检查符号是否成对出现" class="headerlink" title="栈实现检查符号是否成对出现"></a>栈实现检查符号是否成对出现</h4><p>给定一个只包含<code>&#123;</code> <code>&#125;</code> <code>[</code> <code>]</code> <code>(</code> <code>)</code>的字符串，判断是否有效<br>有效需要满足：比如 “()”、”()[]{}”、”{[]}” 都是有效字符串，而 “(]” 、”([)]” 则不是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    Map&lt;Character,Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;str.length(); i++&gt;)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">s</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(s))&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> stack.isEmpty() ? <span class="string">&#x27;@&#x27;</span> : stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(c != map.get(s))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="栈实现字符串反转"><a href="#栈实现字符串反转" class="headerlink" title="栈实现字符串反转"></a>栈实现字符串反转</h4><p>将每个字符入栈再取出即反转</p><h5 id="栈实现维护函数的调用顺序"><a href="#栈实现维护函数的调用顺序" class="headerlink" title="栈实现维护函数的调用顺序"></a>栈实现维护函数的调用顺序</h5><p>写了多个函数嵌套的代码，最后一个被调用的函数必须最先执行。fun(fun1(fun2()))。fun2最先执行，符合后进先出特征</p><h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><p>栈既可以通过<code>数组实现</code>，也可以通过<code>链表实现</code>。 <strong>不管是基于数组还是链表，入栈、出栈的时间复杂度都为O（1）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组实现栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> E[] storage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FACTOR</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.capacity = <span class="number">8</span>;</span><br><span class="line">        <span class="built_in">this</span>.storage = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">(<span class="type">int</span> capacity)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.storage = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count == capacity)&#123;</span><br><span class="line">            capacity = capacity * FACTOR;</span><br><span class="line">            storage = Arrays.copyOf(storage, capacity);</span><br><span class="line">        &#125;</span><br><span class="line">        storage[count++] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回栈顶元素不出栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> E <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage[count - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回栈顶元素并出栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> E <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage[--count];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyStack&lt;Integer&gt; myStack = <span class="keyword">new</span> <span class="title class_">MyStack</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        myStack.push(<span class="number">1</span>);</span><br><span class="line">        myStack.push(<span class="number">2</span>);</span><br><span class="line">        myStack.push(<span class="number">3</span>);</span><br><span class="line">        myStack.push(<span class="number">4</span>);</span><br><span class="line">        myStack.push(<span class="number">5</span>);</span><br><span class="line">        myStack.push(<span class="number">6</span>);</span><br><span class="line">        myStack.push(<span class="number">7</span>);</span><br><span class="line">        myStack.push(<span class="number">8</span>);</span><br><span class="line">        System.out.println(myStack.peek());<span class="comment">//8</span></span><br><span class="line">        System.out.println(myStack.size());<span class="comment">//8</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            System.out.println(myStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>队列是先进先出（FIFO，First In First Out）的线性表。用数组实现的叫顺序队列；用链表实现的叫链式队列。队列的操作方式和堆栈类似，唯一的区别在于队列只在后端插入。<br><strong>队列只允许在末端（rear）进行插入操作，也就是入队（enqueue），在前端（front）进行删除操作也就是出队（dequeue）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设队列有n个元素</span><br><span class="line">访问：O（n）    </span><br><span class="line">插入删除：O（<span class="number">1</span>） 后端插入，前端删除</span><br></pre></td></tr></table></figure><h3 id="单队列"><a href="#单队列" class="headerlink" title="单队列"></a>单队列</h3><p>常见的队列，每次添加元素时都是添加到队尾，单队列又分为顺序队列（数组实现）和链式队列（链表实现）<br><strong>顺序队列存在 <code>假溢出</code> 的问题，也是明明有位置却不能添加的情况</strong></p><p>假如一个顺序队列中，将前两个元素1、2出队，并入队7、8。当进行入队、出队操作时，front和rear都会持续往后移动，当rear移动到最后位置时，就无法再往队列中添加数据，<br>即使数组中还有空间，这种现象就是“假溢出”。</p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>循环队列可以解决顺序队列的假溢出和越界问题。形成头尾相接的循环</p><h3 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h3><ul><li>阻塞队列：当队列为空时，出队操作阻塞；当队列满的时候，入队操作阻塞。相当于在队列基础上多了阻塞操作。生产者-消费者模型</li><li>线程池请求队列：线程池满的时候将放入请求队列中，当有空闲线程时，会循环反复从队列中获取任务执行。队列分为无界队列(基于链表)和有界队列(基于数组)。<ul><li>无界队列：可以一直入队，除非资源耗尽，比如<code>FixedThreadPool</code>使用无界队列<code>LinkedBlockingQueue</code></li><li>有界队列：当队列满的时候，会拒绝抛出<code>java.util.concurrent.RejectedExecutionException</code>异常</li></ul></li><li>消息队列</li><li>播放列表</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是一种树结构，堆中每个节点都大于等于（或小于等于）子树所有节点的值。或者说：任意节点的值都（大于等于）&#x2F;（小于等于）所有子节点的值。</p><blockquote><p>二叉堆是一个数组，他可以被看成一个近似的完全二叉树</p></blockquote><h3 id="堆的分类-区别与节点排序方式"><a href="#堆的分类-区别与节点排序方式" class="headerlink" title="堆的分类-区别与节点排序方式"></a>堆的分类-区别与节点排序方式</h3><ul><li>最大堆：堆中的每一个节点的值都大于等于所有子节点的值</li><li>最小堆：堆中的每一个节点的值都小于等于所有子节点的值</li></ul><h3 id="堆的用途"><a href="#堆的用途" class="headerlink" title="堆的用途"></a>堆的用途</h3><p>当我们只关系所有数据中的最大值或者最小值，存在多次获取最大值或者最小值、多次插入和删除时，可以使用堆<br>使用有序数组也可以实现，但是初始化一个有效数组的时间复杂度是O(nlog(n))、查找最大值或最小值的时间复杂度都是O(1)，但是插入和删除是O(n)<br><strong>相对于有序数组，堆的主要优势在于更新数据的效率高</strong>，堆的初始化复杂度O(nlog(n)) 。取出最大值或最小值为O(1)，插入删除为O(log(n))</p><h4 id="堆的插入"><a href="#堆的插入" class="headerlink" title="堆的插入"></a>堆的插入</h4><ul><li>最大堆插入：先将插入的元素放到最后面；从底向上，如果父节点比该元素小，则与父节点交换，直到无法交换</li><li>最小堆插入：先将插入的元素放到最后面；从底向上，如果父节点比该元素大，则与父节点交换，直到无法交换<br>根据堆的性质，最大堆的堆顶元素是所有元素中最大的；最小堆的堆顶元素是所有元素中最小的。<br>当我们需要多次查找最大元素或最小元素时，利用堆来实现</li></ul><h4 id="堆的删除"><a href="#堆的删除" class="headerlink" title="堆的删除"></a>堆的删除</h4><p>删除堆顶元素之后，为了保持堆的性质，需要对堆进行调整，这个过程称之为<code>堆化</code>。堆化的方式有两种：</p><ul><li>一种是自底向上堆化，元素从最底部向上移动：会出现<code>气泡</code></li><li>一种是自顶向下堆化，元素由最顶部向下移动：</li></ul><h3 id="堆的操作总结"><a href="#堆的操作总结" class="headerlink" title="堆的操作总结"></a>堆的操作总结</h3><ul><li>插入元素：先将元素放到数组的末端，再自底向上堆化，把末端元素上浮</li><li>删除堆顶元素：将末尾元素放置堆顶，再自顶向下堆化，把堆顶元素下沉。也可以自底向上堆化，但是会产生气泡，浪费空间</li></ul><h3 id="堆的排序"><a href="#堆的排序" class="headerlink" title="堆的排序"></a>堆的排序</h3><p>堆的排序分为两个步骤：</p><ol><li>第一步是建堆，将一个无序数组建立成一个堆</li><li>第二步是排序，将堆顶的元素取出，然后对剩下的元素进行堆化，反复迭代，直到所有元素被取出为止</li></ol><h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p>建堆的过程就是一个对所有非叶子节点进行自顶向下堆化的过程<br>首先要了解哪些是非叶子节点：最后一个节点的父节点及它之前的节点都是非叶子节点。也就是说，如果节点数为N。那么我们需要对N&#x2F;2 到 1的节点进行堆化</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>由于堆顶元素是最大元素，所以我们重复取出堆顶元素，将这个最大的堆顶元素放到数组末尾，并对剩下的元素进行堆化即可。</p><blockquote><p>问题点<br>1.取出的元素存在哪里，新建一个数组还是？<br>2.删除堆顶元素后，堆化是自底向上，还是自顶向下<br><strong>执行自顶向下堆化，这个堆化一开始要将末尾的元素移至堆顶，由于堆中元素已经减少，这个位置不会再被使用，所以我们可以将取出的元素放在末尾。</strong></p></blockquote><p>–</p><p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/%E5%A0%86.md">原文地址</a></p><p>–</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题2</title>
      <link href="/problem-java-2.html"/>
      <url>/problem-java-2.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目案例"><a href="#题目案例" class="headerlink" title="题目案例"></a>题目案例</h3><p>淘宝 web 服务器上有 1 个 access 日志文件，记录着用户访问的 url，url 总数100 亿以上，每个 url 约占 64 字节，这些 url 可能存在重复，在一个内存只有 2G 的机器上，统计访问频率最高的前100 个 URL。</p><p>考察点 1：MapReduce 思想，利用中间文件存储，分而治之。<br>考察点 2：排序算法</p><p>解题思路：100 亿 *64&#x2F;1024&#x2F;1024&#x2F;1024 &#x3D; 596G, 可考虑分成 1000 个文件处理，每个文件大约 600M。顺序读取文件，每行按照 hash(url)%1000 的结果将 url 写入到 1000 个文件中，这个过程是 mapreduce 中的 map。<br>针对每个小文件，使用 hashmap 统计每个 url 出现的次数，并使用堆排序得到访问次数最高的前 100 个 url，将每个文件排序好的 100 个 url 及对应的 count 输出到 1000 个文件，最后将这个1000 个文件（此时每个文件只有 100 行 ) 进行合并排序</p><h3 id="索引题目案例"><a href="#索引题目案例" class="headerlink" title="索引题目案例"></a>索引题目案例</h3><p>有如下表：<br>create table t(a int, b int, c int);<br>已知如下三条是这个表最常用的三条 query:<br>select * from t where a &#x3D; 1 and b &#x3D; 1;<br>select * from t where b &#x3D; 1;<br>select * from t where b &#x3D; 1 order by c desc;<br>以下索引哪个是最优的：<br>A. idx(a, b)<br>B. idx(b, a)<br>C. idx(b, c)<br>D. idx(a, b, c)</p><p>答案是 B</p><p><strong>最左匹配原则</strong>：等值的条件去命中索引最左边的一个字段，然后依次从左往右命中，范围条件放在最后面<br><strong>建立联合索引</strong>：index(a,b,c) 相当于建立了index(a)、index(a,b)、index(a,b,c)三个索引</p><blockquote><p>搜索条件没有按照联合索引的顺序，也使用了联合索引：这是因为MySQL中有查询优化器explain</p></blockquote><hr><p>应该将搜索条件范围最小的条件放在最左边，这样在SQL执行的过程中将结果集优先缩小。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程面试题1</title>
      <link href="/problem-java-1.html"/>
      <url>/problem-java-1.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目案例"><a href="#题目案例" class="headerlink" title="题目案例"></a>题目案例</h3><p>已知一个业务查询操作涉及 3 个 RPC 服务调用 : query1, query2, query3, 其中query1 耗时约 1 秒， query2 耗时约 0.5 秒，query3 耗时约 0.6 秒，且query3查询条件依赖 query2 的查询结果.请编写代码，使该业务查询总体耗时最小:</p><p>考察点 1：异步<br>考察点 2：多线程并发控制</p><p>解题思路：<br>主要考察知识点异步和多线程控制。</p><span id="more"></span><p>如果采用串行执行，query1+query2+query3 总耗时为 2.1 秒。</p><p>采用多线程异步并行执行，使用线程 A 请求 query1，同时使用线程 B 请求query2后再请求 query3（query3 依赖 query2 结果只能串行执行），这样总耗时是 min(1, 0.5+0.6) &#x3D; 1.1 秒。 </p><p>需要熟悉 join, CountDownLatch 等线程协调控制方法，如果考生使用线程池则更佳</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryTest1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">poolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">5</span>, <span class="literal">true</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        query1();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        query2();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        query3();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    thread1.start();</span><br><span class="line">    thread2.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        thread2.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    thread3.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        thread3.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时 &quot;</span> + time);</span><br><span class="line">    poolExecutor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">poolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">5</span>, <span class="literal">true</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">downLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">mainLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    poolExecutor.execute(() -&gt; &#123;</span><br><span class="line">        query1();</span><br><span class="line">        mainLatch.countDown();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    poolExecutor.execute(() -&gt; &#123;</span><br><span class="line">        query2();</span><br><span class="line">        downLatch.countDown();</span><br><span class="line">        mainLatch.countDown();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    poolExecutor.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            downLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        query3();</span><br><span class="line">        mainLatch.countDown();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mainLatch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时 &quot;</span> + time);</span><br><span class="line">    poolExecutor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query1</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(DateUtil.date().toString(<span class="string">&quot;yyyy-MM-dd HH:mm:sss &quot;</span>) + Thread.currentThread().getName() + <span class="string">&quot;query1&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query2</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(DateUtil.date().toString(<span class="string">&quot;yyyy-MM-dd HH:mm:sss &quot;</span>) + Thread.currentThread().getName() + <span class="string">&quot;query2&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query3</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(DateUtil.date().toString(<span class="string">&quot;yyyy-MM-dd HH:mm:sss &quot;</span>) + Thread.currentThread().getName() + <span class="string">&quot;query3&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程笔记</title>
      <link href="/java-thread-base.html"/>
      <url>/java-thread-base.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？"><a href="#1-简述线程，程序、进程的基本概念。以及他们之间关系是什么？" class="headerlink" title="1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？"></a>1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？</h2><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。  </p><span id="more"></span><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。</p><p><strong>线程</strong> 是 <strong>进程</strong> 划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><p><strong>线程上下文的切换比进程上下文切换要快很多</strong></p><ul><li>进程切换时，涉及到当前进程的CPU环境的保存和新被调度运行进程的CPU环境的设置。</li><li>线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。</li></ul><h2 id="2-线程有哪些基本状态？这些状态是如何定义的"><a href="#2-线程有哪些基本状态？这些状态是如何定义的" class="headerlink" title="2. 线程有哪些基本状态？这些状态是如何定义的?"></a>2. 线程有哪些基本状态？这些状态是如何定义的?</h2><ol><li><strong>新建（new）</strong>：新创建一个线程对象。</li><li><strong>可运行（runable）</strong>：线程创建之后，其他线程（比如main线程）调用了该对象的start()方法，该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权。</li><li><strong>运行（running）</strong>：可运行状态的线程获得了CPU时间片（timelice）,执行程序代码。</li><li><strong>阻塞（block）</strong>：是指因为某种原因放弃了CPU使用权，即让出CPU时间片，暂停运行，直到线程进入可运行（runable）状态，才有机会再次获得CPU时间片转到运行状态。阻塞分三种<ul><li><strong>等待阻塞</strong>：运行（running）的线程执行o.wait()方法，JVM会把该线程放入等待队列（waiting queue）中。PS：o.wait()代表Obejct类的wait()方法。</li><li><strong>同步阻塞</strong>：运行（running）的线程在获取对象的同步锁时，若该同步锁被其他线程占用，则JVM会把该线程放入锁池（Lock Pool）中。</li><li><strong>其他阻塞</strong>：运行（running）的线程执行Thread.sleep(long ms)或t.join()，或者发出了I&#x2F;O请求时，JVM会把该线程置为阻塞状态，只有当sleep()状态超时或join()超时或等待终止，或者I&#x2F;O处理完毕时，线程才会重新转入可运行状态。</li></ul></li><li><strong>死亡（dead）</strong>：线程run()、main()方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。<br><img src="https://user-gold-cdn.xitu.io/2018/8/9/1651f19d7c4e93a3?w=876&h=492&f=png&s=128092" alt="线程的生命周期"></li></ol><h2 id="3-何为多线程？"><a href="#3-何为多线程？" class="headerlink" title="3. 何为多线程？"></a>3. 何为多线程？</h2><p>多线程就是多个线程同时运行或交替运行。单核CPU的话是顺序执行，也就是交替运行。多核CPU的话，因为每个CPU有自己的运算器，所以在多个CPU中可以同时运行。</p><h2 id="4-为什么多线程是必要的？"><a href="#4-为什么多线程是必要的？" class="headerlink" title="4. 为什么多线程是必要的？"></a>4. 为什么多线程是必要的？</h2><ol><li>使用线程可以把占据长时间的程序中的任务放到后台去处理。</li><li>用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。</li><li>程序的运行速度可能加快。</li></ol><h2 id="5-使用多线程常见的三种方式"><a href="#5-使用多线程常见的三种方式" class="headerlink" title="5 使用多线程常见的三种方式"></a>5 使用多线程常见的三种方式</h2><h3 id="①继承Thread类"><a href="#①继承Thread类" class="headerlink" title="①继承Thread类"></a>①继承Thread类</h3><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.run();</span><br><span class="line">System.out.println(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">mythread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">mythread.start();</span><br><span class="line">System.out.println(<span class="string">&quot;运行结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://user-gold-cdn.xitu.io/2018/3/20/16243e80f22a2d54?w=161&h=54&f=jpeg&s=7380" alt="结果"><br>从上面的运行结果可以看出：线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法。</p><h3 id="②实现Runnable接口"><a href="#②实现Runnable接口" class="headerlink" title="②实现Runnable接口"></a>②实现Runnable接口</h3><p>推荐实现Runnable接口方式开发多线程，因为Java单继承但是可以实现多个接口。</p><p>MyRunnable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;MyRunnable&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Runnable runnable=<span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">thread.start();</span><br><span class="line">System.out.println(<span class="string">&quot;运行结束！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://user-gold-cdn.xitu.io/2018/3/20/16243f4373c6141a?w=137&h=46&f=jpeg&s=7316" alt="运行结果"></p><h3 id="③使用线程池"><a href="#③使用线程池" class="headerlink" title="③使用线程池"></a>③使用线程池</h3><p><strong>在《阿里巴巴Java开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。</strong></p><p><strong>为什么呢？</strong></p><blockquote><p><strong>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</strong></p></blockquote><p><strong>另外《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</strong></p><blockquote><p>Executors 返回线程池对象的弊端如下：</p><ul><li><strong>FixedThreadPool 和 SingleThreadExecutor</strong> ： 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致OOM。</li><li><strong>CachedThreadPool 和 ScheduledThreadPool</strong> ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。</li></ul></blockquote><h2 id="6-线程的优先级"><a href="#6-线程的优先级" class="headerlink" title="6 线程的优先级"></a>6 线程的优先级</h2><p>每个线程都具有各自的优先级，<strong>线程的优先级可以在程序中表明该线程的重要性，如果有很多线程处于就绪状态，系统会根据优先级来决定首先使哪个线程进入运行状态</strong>。但这个并不意味着低<br>优先级的线程得不到运行，而只是它运行的几率比较小，如垃圾回收机制线程的优先级就比较低。所以很多垃圾得不到及时的回收处理。</p><p><strong>线程优先级具有继承特性。</strong> 比如A线程启动B线程，则B线程的优先级和A是一样的。</p><p><strong>线程优先级具有随机性。</strong> 也就是说线程优先级高的不一定每一次都先执行完。</p><p>Thread类中包含的成员变量代表了线程的某些优先级。如<strong>Thread.MIN_PRIORITY（常数1）</strong>，<strong>Thread.NORM_PRIORITY（常数5）</strong>,<br><strong>Thread.MAX_PRIORITY（常数10）</strong>。其中每个线程的优先级都在<strong>Thread.MIN_PRIORITY（常数1）</strong> 到<strong>Thread.MAX_PRIORITY（常数10）</strong> 之间，在默认情况下优先级都是<strong>Thread.NORM_PRIORITY（常数5）</strong>。</p><p>学过操作系统这门课程的话，我们可以发现多线程优先级或多或少借鉴了操作系统对进程的管理。</p><h2 id="7-Java多线程分类"><a href="#7-Java多线程分类" class="headerlink" title="7 Java多线程分类"></a>7 Java多线程分类</h2><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><p>运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>运行在后台，为其他前台线程服务.也可以说守护线程是JVM中非守护线程的 <strong>“佣人”</strong>。</p><ul><li><strong>特点：</strong> 一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作</li><li><strong>应用：</strong> 数据库连接池中的检测线程，JVM虚拟机启动后的检测线程</li><li><strong>最常见的守护线程：</strong> 垃圾回收线程</li></ul><p><strong>如何设置守护线程？</strong></p><p>可以通过调用 Thead 类的 <code>setDaemon(true)</code> 方法设置当前的线程为守护线程。</p><p>注意事项：</p><pre><code>1.  setDaemon(true)必须在start（）方法前执行，否则会抛出IllegalThreadStateException异常2. 在守护线程中产生的新线程也是守护线程3. 不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑</code></pre><h2 id="8-sleep-方法和wait-方法简单对比"><a href="#8-sleep-方法和wait-方法简单对比" class="headerlink" title="8 sleep()方法和wait()方法简单对比"></a>8 sleep()方法和wait()方法简单对比</h2><ul><li>两者最主要的区别在于：<strong>sleep方法没有释放锁，而wait方法释放了锁</strong> 。 </li><li>两者都可以暂停线程的执行。</li><li>Wait通常被用于线程间交互&#x2F;通信，sleep通常被用于暂停执行。</li><li>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。</li></ul><h2 id="9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？"><a href="#9-为什么我们调用start-方法时会执行run-方法，为什么我们不能直接调用run-方法？" class="headerlink" title="9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？"></a>9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？</h2><p>这是另一个非常经典的java多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！</p><p>new一个Thread，线程进入了新建状态;调用start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。<br>start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作。 而直接执行run()方法，会把run方法当成一个mian线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><p><strong>总结： 调用start方法方可启动线程并使线程进入就绪状态，而run方法只是thread的一个普通方法调用，还是在主线程里执行。</strong></p><blockquote><p>笔记来源：<a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centOS7 docker私有仓库及DockerMaven插件使用</title>
      <link href="/docker-registry.html"/>
      <url>/docker-registry.html</url>
      
        <content type="html"><![CDATA[<h1 id="私有仓库的搭建与配置"><a href="#私有仓库的搭建与配置" class="headerlink" title="私有仓库的搭建与配置"></a>私有仓库的搭建与配置</h1><ol><li><p>拉取私有仓库镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure></li><li><p>启动私有仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=registry -p 5000:5000 -v /home/docker/registry/:/var/lib/registry -d registry</span><br></pre></td></tr></table></figure><span id="more"></span><p>参数说明</p><blockquote><p>–name  容器名称<br>-p 宿主机端口：容器端口<br>-v 挂载文件目录<br>-d 指定镜像</p></blockquote></li><li><p>打开游览器输入地址<code>http://你的服务器IP:5000/v2/_catalog</code>看到<code>&#123;"repositories":[]&#125;</code>表示私有仓库搭建成功并且内容为空(需要开放服务器端口)</p></li><li><p>修改daemon.json，添加以下内容</p><blockquote><p>{<br>​    “registry-mirrors”: [“<a href="https://3olr1zha.mirror.aliyuncs.com"]">https://3olr1zha.mirror.aliyuncs.com&quot;]</a>,<br>​    <code>"insecure-registries": ["你的服务器IP:5000"]</code><br>}</p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment">#添加之后，保存退出，再重载配置</span></span><br><span class="line">systemctl daemon‐reload</span><br></pre></td></tr></table></figure><ol start="5"><li>重启docker服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li>重启私有容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br><span class="line"><span class="comment">#查看容器状态</span></span><br><span class="line">docker ps -l</span><br></pre></td></tr></table></figure></li></ol><h1 id="手动将镜像上传至私有仓库"><a href="#手动将镜像上传至私有仓库" class="headerlink" title="手动将镜像上传至私有仓库"></a>手动将镜像上传至私有仓库</h1><ol><li>标记镜像为私有仓库镜像<br>首先将镜像打上私有仓库Tag，如:选择hello-world为例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag hello-world:latest 你的服务器IP:5000/hello-world</span><br></pre></td></tr></table></figure><p>再次查看镜像列表，发现多了一个hello-world</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">你的服务器IP:5000/hello-world   latest   fce289e99eb9  3 weeks ago         1.84kB</span><br><span class="line">hello-world                   latest   fce289e99eb9  3 weeks ago         1.84kB</span><br></pre></td></tr></table></figure><ol start="2"><li>上传标记的镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 你的服务器IP:5000/hello-world</span><br></pre></td></tr></table></figure></li><li>完成上传<br>在游览器输入地址<code>http://你的服务器IP:5000/v2/_catalog</code>看到该镜像即上传成功<br>{“repositories”:[“hello-world”]}</li></ol><h1 id="DockerMaven插件使用"><a href="#DockerMaven插件使用" class="headerlink" title="DockerMaven插件使用"></a>DockerMaven插件使用</h1><h2 id="微服务部署有两种方法："><a href="#微服务部署有两种方法：" class="headerlink" title="微服务部署有两种方法："></a>微服务部署有两种方法：</h2><h3 id="（1）手动部署"><a href="#（1）手动部署" class="headerlink" title="（1）手动部署"></a>（1）手动部署</h3><p>首先基于源码打包生成jar包（或war包）,将jar包（或war包）上传至虚拟机并拷贝至JDK容器。</p><h3 id="（2）通过Maven插件自动部署"><a href="#（2）通过Maven插件自动部署" class="headerlink" title="（2）通过Maven插件自动部署"></a>（2）通过Maven插件自动部署</h3><p>对于数量众多的微服务，手动部署无疑是非常麻烦的做法，并且容易出错。所以我们这<br>里学习如何自动部署，这也是企业实际开发中经常使用的方法。</p><ol><li>修改宿主机docker配置，配置远程访问<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>在[Service]下的ExecStart，增加如下配置即可<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">notify</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/dockerd</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string"></span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span></span><br><span class="line"><span class="attr">.....</span></span><br></pre></td></tr></table></figure></li><li>刷新配置，重启服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon‐reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure></li><li>在maven工程<code>pom.xml</code>中增加配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">imageName</span>&gt;</span>服务器IP:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>jdk1.8<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://服务器IP:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>以上配置会自动生成Dockerfile<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM jdk1.8</span><br><span class="line">ADD app.jar /</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;‐jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure></li></ol><p>在项目根目录中执行mav命令<br><code>mvn clean package docker:build  ‐DpushImage</code></p><p>等待完成上传之后,游览器输入地址<code>http://你的服务器IP:5000/v2/_catalog</code>看到<br>{“repositories”:[“hello-world”,”你的Maven项目名”]}</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 修改镜像容器的时区</title>
      <link href="/docker-time.html"/>
      <url>/docker-time.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-修改时区"><a href="#Docker-修改时区" class="headerlink" title="Docker 修改时区"></a>Docker 修改时区</h1><h2 id="出现场景"><a href="#出现场景" class="headerlink" title="出现场景"></a>出现场景</h2><p>Mysql时间慢8小时 ，日志打印显示的时间慢8小时，数据库时间，nginx时间等等。。</p><h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>在 Docker Hub 中的官方镜像中，时区是使用了世界标准时间(UTC)。因为在中国使用，所以需要把时区改成东八区的。</p><span id="more"></span><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="1-修改运行容器时区（不能删除，不用dockerfile情况）"><a href="#1-修改运行容器时区（不能删除，不用dockerfile情况）" class="headerlink" title="1. 修改运行容器时区（不能删除，不用dockerfile情况）"></a>1. 修改运行容器时区（不能删除，不用dockerfile情况）</h2><blockquote><p> <code>9a785c29ed24</code> 为容器的CONTAINER ID</p></blockquote><p>首先进入正在运行的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 9a785c29ed24  /bin/bash</span><br></pre></td></tr></table></figure><p>复制软连接文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/PRC /etc/localtime</span><br></pre></td></tr></table></figure><p>查看时区是否已经更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span></span><br></pre></td></tr></table></figure><p>时间与宿主机一样，就可以退出，并重启容器了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 9a785c29ed24</span><br></pre></td></tr></table></figure><blockquote><p>若此方法不行，就先通过 <code>tzselect<code> 设置选定Hong Kong时区<br>依次选   4) Asia  >  13) Hong Kong  >  1) Yes</p></blockquote><h2 id="2-随意操作情况"><a href="#2-随意操作情况" class="headerlink" title="2.随意操作情况"></a>2.随意操作情况</h2><h3 id="dockerfile中设置时区"><a href="#dockerfile中设置时区" class="headerlink" title="dockerfile中设置时区"></a>dockerfile中设置时区</h3><p>Dockerfile中加入以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV TZ=Asia/Shanghai </span><br><span class="line">RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span><br></pre></td></tr></table></figure><h3 id="创建容器时带上参数设置"><a href="#创建容器时带上参数设置" class="headerlink" title="创建容器时带上参数设置"></a>创建容器时带上参数设置</h3><p>在创建命令中加上 <code>-v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime</code></p><h3 id="复制宿主机到容器"><a href="#复制宿主机到容器" class="headerlink" title="复制宿主机到容器"></a>复制宿主机到容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /etc/localtime [容器ID或者NAME]:/etc/localtime</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VuePress搭建个人博客（用腻了hexo、jekyll）</title>
      <link href="/vuepressblog.html"/>
      <url>/vuepressblog.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>VuePress 由两部分组成：一个以 Vue 驱动的主题系统的简约静态网站生成工具，和一个为编写技术文档而优化的默认主题。它是为了支持 Vue 子项目的文档需求而创建的。</p><p>由 VuePress 生成的每个页面，都具有相应的预渲染静态 HTML，它们能提供出色的加载性能，并且对 SEO 友好。然而，页面加载之后，Vue 就会将这些静态内容，接管为完整的单页面应用程序(SPA)。当用户在浏览站点时，可以按需加载其他页面。</p><span id="more"></span><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>内置 markdown 扩展，针对技术文档进行了优化</li><li>能够利用内嵌在 markdown 文件中的 Vue 代码</li><li>以 Vue 驱动的自定义主题系统</li><li>PWA 支持</li><li>Google Analytics 集成</li><li>一个默认主题：<ul><li>响应式布局</li><li>可选的主页</li><li>简单、开箱即用、基于标题的搜索功能</li><li>可定制的导航栏和侧边栏</li><li>自动生成的 GitHub 链接和页面编辑链接</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先需要如下环境：</p><blockquote><p>​node.js</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">检查安装版本</span><br><span class="line">$ node -v</span><br><span class="line">v8.10.0</span><br></pre></td></tr></table></figure><h3 id="全局安装VuePress"><a href="#全局安装VuePress" class="headerlink" title="全局安装VuePress"></a>全局安装VuePress</h3><blockquote><p>我这里使用的是淘宝的镜像，原<code>npm</code>是国外的，由于国内的不可抗拒力速度很慢。<br>安装淘宝镜像方法：<br><code>npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g vuepress</span><br></pre></td></tr></table></figure><h3 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h3><p>创建一个项目名为“VuePressBlog”的文件夹<br>在这个文件夹中Shift+鼠标右键，在此处打开命令窗口，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm init</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/22/5bf6549ea9a18.png" alt="1.png"><br>需要填写一些基本信息，如果不填写，就直接回车下一步（这些配置信息以后也可以改，这里随意填或者不填），最后输入y 即可。生成<code>package.json</code></p><h3 id="创建项目文件夹树"><a href="#创建项目文件夹树" class="headerlink" title="创建项目文件夹树"></a>创建项目文件夹树</h3><ul><li><p>新建docs文件夹</p><ul><li>docs文件夹作为项目文档根目录，主要放置Markdown类型的文章和.vuepress文件夹。</li></ul></li><li><p>在文档目录(docs文件夹)中创建一个 .vuepress 目录。</p><ul><li>.vuepress目录主要放置所有 VuePress 特有(VuePress-specific) 文件的地方，不做任何配置的话，页面会显得过于简单，用户也无法方便地浏览网站。</li></ul></li><li><p>到.vuepress目录中，创建config.js</p><ul><li>配置 VuePress 站点的基本文件是 .vuepress&#x2F;config.js，其中导出一个 JavaScript 对象：   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要配置包括网站的标题、描述等基本信息，以及主题的配置。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;个人主页&#x27;</span>, </span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;God耀的博客&#x27;</span>,</span><br><span class="line">    <span class="attr">head</span>: [</span><br><span class="line">        [<span class="string">&#x27;link&#x27;</span>, &#123; <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">href</span>: <span class="string">&#x27;/img/favicon.ico&#x27;</span> &#125;],</span><br><span class="line">    ]</span><br><span class="line">,</span><br><span class="line"><span class="comment">//主题配置</span></span><br><span class="line"><span class="attr">themeConfig</span>: &#123;</span><br><span class="line"><span class="comment">//导航栏配置</span></span><br><span class="line"><span class="attr">nav</span>: [</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">&#x27;主页&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">&#x27;归档&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/archive/&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">&#x27;God耀|博客&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;https://www.yzblog.xyz&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// 下拉列表的配置</span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">text</span>: <span class="string">&#x27;Languages&#x27;</span>,</span><br><span class="line"><span class="attr">items</span>: [</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">&#x27;Chinese&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/language/chinese&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">&#x27;English&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/language/English&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="字段名词解释："><a href="#字段名词解释：" class="headerlink" title="字段名词解释："></a>字段名词解释：</h3><ul><li><p>title : 网站标题</p></li><li><p>description：网站描述</p></li><li><p>head ：网站头部的引用</p></li><li><p>图标路径默认为：<code>/docs/.vuepress/public/</code>目录下(所有的静态资源目录)</p></li><li><p>text : 代表页面显示的</p></li><li><p>link : 跳转的分类文件页面（如：上面定义的是<code>archive</code>，那我们就要在<code>docs</code>目录下建立一个archive文件夹，并且在这个文件夹中创建一个<code>README.md</code>文件）</p></li></ul><p>这里我就随便写了一点内容做参考</p><p><code>/docs/README.md</code>的内容如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">home: true</span><br><span class="line">heroImage: /img/hero.png</span><br><span class="line">actionText: HOME →</span><br><span class="line">actionLink: /</span><br><span class="line"><span class="section">footer: Email-yzengchn@163.com | [<span class="string">Copyright © 2018-present Evan You</span>](<span class="link">https:www.yzblog.xyz</span>)</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">我是首页HOME</span><br></pre></td></tr></table></figure><p><code>/archive/README.md</code>的内容如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">home: true</span><br><span class="line">heroImage: /img/hero.png</span><br><span class="line">actionText: 起步 →</span><br><span class="line">actionLink: /guide/</span><br><span class="line"><span class="section">footer: MIT Licensed | </span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Bit</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;features&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;feature&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;h2&gt;简明优先&lt;/h2&gt;</span></span><br><span class="line"><span class="code">    &lt;p&gt;对以 markdown 为中心的项目结构，做最简化的配置，帮助你专注于创作。&lt;/p&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;</span></span><br><span class="line"><span class="code">  &lt;div class=&quot;feature&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;h2&gt;Vue 驱动&lt;/h2&gt;</span></span><br><span class="line"><span class="code">    &lt;p&gt;享用 Vue + webpack 开发环境，在 markdown 中使用 Vue 组件，并通过 Vue 开发自定义主题。&lt;/p&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;</span></span><br><span class="line"><span class="code">  &lt;div class=&quot;feature&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;h2&gt;性能高效&lt;/h2&gt;</span></span><br><span class="line"><span class="code">    &lt;p&gt;VuePress 将每个页面生成为预渲染的静态 HTML，每个页面加载之后，然后作为单页面应用程序(SPA)运行。&lt;/p&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;</span></span><br><span class="line"><span class="code">&lt;/div&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">### 起步就像数 1, 2, 3 一样容易</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 安装</span></span><br><span class="line">yarn global add vuepress # 或 npm install -g vuepress</span><br><span class="line"></span><br><span class="line"><span class="section"># 创建一个 markdown 文件</span></span><br><span class="line">echo &#x27;# Hello VuePress&#x27; &gt; README.md</span><br><span class="line"></span><br><span class="line"><span class="section"># 开始编写</span></span><br><span class="line">vuepress dev</span><br><span class="line"></span><br><span class="line"><span class="section"># 构建为静态文件</span></span><br><span class="line">vuepress build</span><br><span class="line"></span><br><span class="line">::: warning 兼容性注意事项</span><br><span class="line">VuePress 要求 Node.js &gt;= 8。</span><br><span class="line">:::</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们的项目目录结构就都出来了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">VuePressBlog</span></span><br><span class="line"><span class="attr">├───</span> <span class="string">docs</span></span><br><span class="line"><span class="attr">|</span>   <span class="string">├── README.md</span></span><br><span class="line"><span class="attr">│</span>   <span class="string">├── archive</span></span><br><span class="line"><span class="attr">|</span><span class="string">└── README.md</span></span><br><span class="line"><span class="attr">│</span>   <span class="string">└── .vuepress</span></span><br><span class="line"><span class="attr">│</span>       <span class="string">├── public</span></span><br><span class="line"><span class="attr">│</span><span class="string">└── img</span></span><br><span class="line"><span class="attr">|</span>  <span class="string">├── favicon.ico</span></span><br><span class="line"><span class="attr">|</span>  <span class="string">└── hero.png</span></span><br><span class="line"><span class="attr">│</span>       <span class="string">└── config.js</span></span><br><span class="line"><span class="attr">└──</span> <span class="string">package.json</span></span><br></pre></td></tr></table></figure><p>运行看看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm run docs:dev</span><br></pre></td></tr></table></figure><h3 id="首页展示"><a href="#首页展示" class="headerlink" title="首页展示"></a>首页展示</h3><p><img src="https://i.loli.net/2018/11/22/5bf670823c8fc.jpg" alt="3.jpg"></p><h3 id="自定义导航栏展示"><a href="#自定义导航栏展示" class="headerlink" title="自定义导航栏展示"></a>自定义导航栏展示</h3><p><img src="https://i.loli.net/2018/11/22/5bf6708237bf6.jpg" alt="2.jpg"></p><h3 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h3><p>用gitHub的pages或者coding的pages都可以,也可以搭建在自己的服务器上。<br>将dist文件夹中的内容提交到git上或者上传到服务器就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run docs:build</span><br><span class="line">//将会在项目中生成dist文件夹，里面就是生成的静态html</span><br></pre></td></tr></table></figure><p>但是这样每次敲这么多命令比较麻烦，弄一个脚本,设置持续集成,在每次 push 代码时自动运行脚本<br>在你的项目中，创建一个如下的 deploy.sh 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保脚本抛出遇到的错误</span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成静态文件</span></span><br><span class="line">npm run docs:build</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入生成的文件夹</span></span><br><span class="line">cd docs/.vuepress/dist</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是发布到自定义域名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;www.example.com&#x27;</span> &gt; CNAME</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &#x27;deploy&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果发布到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span><br><span class="line"></span><br><span class="line">cd -</span><br></pre></td></tr></table></figure><h3 id="基本搭建完成"><a href="#基本搭建完成" class="headerlink" title="基本搭建完成"></a>基本搭建完成</h3><p>这样就基本做到了基础功能，接下来就是慢慢把Hexo中的文章和主题一点点搬运过来了</p><h4 id="参考链接-："><a href="#参考链接-：" class="headerlink" title="参考链接 ："></a>参考链接 ：</h4><blockquote><p><a href="https://vuepress.vuejs.org/zh/">https://vuepress.vuejs.org/zh/</a><br><a href="https://segmentfault.com/a/1190000015237352">https://segmentfault.com/a/1190000015237352</a><br><a href="https://yq.aliyun.com/articles/603815">https://yq.aliyun.com/articles/603815</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VueJS </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx指定用户报错&quot;nginx:[emerg] getpwnam&quot;</title>
      <link href="/nginx-createuser.html"/>
      <url>/nginx-createuser.html</url>
      
        <content type="html"><![CDATA[<h3 id="创建nginx用户和nginx组"><a href="#创建nginx用户和nginx组" class="headerlink" title="创建nginx用户和nginx组"></a>创建nginx用户和nginx组</h3><p>在创建nginx用户的时候，出现错误：nginx: [emerg] getpwnam(“nginx”)failed in &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:2</p><ol><li>配置nginx<br> 找到nginx安装目录下的 <code>/conf</code>目录下的<code>nginx.conf</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/nginx.conf</span><br></pre></td></tr></table></figure><span id="more"></span><strong>在配置第一行，设置用户</strong><br>这里我设置用户为“nginx”<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  logs/error.log;</span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br></pre></td></tr></table></figure><code>:wq</code> 保存退出。<br>重载nginx配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure>信心满满，很简单嘛，一回车发现报错了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] getpwnam(<span class="string">&quot;nginx&quot;</span>) failed <span class="keyword">in</span> /usr/local/nginx/conf/nginx.conf:2</span><br></pre></td></tr></table></figure></li><li>解决报错问题<br>原因是因为我们没有创建这个用户“nginx”<br>执行下面两行命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin -M nginx</span><br><span class="line"><span class="built_in">id</span> nginx</span><br></pre></td></tr></table></figure>创建成功结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid=1001(nginx) gid=1001(nginx) <span class="built_in">groups</span>=1001(nginx)</span><br></pre></td></tr></table></figure>再次执行发现没问题了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure>问题解决。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS搭建ngrok服务器与客户端应用程序</title>
      <link href="/ngrok-scaffolding.html"/>
      <url>/ngrok-scaffolding.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装go语言，安装git"><a href="#安装go语言，安装git" class="headerlink" title="安装go语言，安装git"></a>安装go语言，安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install build-essential golang mercurial git</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/12/5be933be3c588.png" alt="1.png"></p><h3 id="下载ngrok源码"><a href="#下载ngrok源码" class="headerlink" title="下载ngrok源码"></a>下载ngrok源码</h3><p><img src="https://i.loli.net/2018/11/12/5be933f989f4f.png" alt="2.png"></p><h3 id="代码目录结构如下："><a href="#代码目录结构如下：" class="headerlink" title="代码目录结构如下："></a>代码目录结构如下：</h3><p><img src="https://i.loli.net/2018/11/12/5be9340a3cb85.png" alt="3.png"></p><h3 id="生成证书-，并编译一个携带该证书的ngrok客户端"><a href="#生成证书-，并编译一个携带该证书的ngrok客户端" class="headerlink" title="生成证书 ，并编译一个携带该证书的ngrok客户端"></a>生成证书 ，并编译一个携带该证书的ngrok客户端</h3><p>域名用自己的替换下面的<code>wx.yzblog.xyz</code>，同时在域名解析中增加A记录指向自己这台服务器IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NGROK_DOMAIN=<span class="string">&quot;wx.yzblog.xyz&quot;</span></span><br><span class="line"></span><br><span class="line">openssl genrsa -out base.key 2048</span><br><span class="line"></span><br><span class="line">openssl req -new -x509 -nodes -key base.key -days 10000 -subj <span class="string">&quot;/CN=<span class="variable">$NGROK_DOMAIN</span>&quot;</span> -out base.pem</span><br><span class="line"></span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line"></span><br><span class="line">openssl req -new -key server.key -subj <span class="string">&quot;/CN=<span class="variable">$NGROK_DOMAIN</span>&quot;</span> -out server.csr</span><br><span class="line"></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -CA base.pem -CAkey base.key -CAcreateserial -days 10000 -out server.crt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/12/5be9341e52217.png" alt="4.png"></p><h3 id="将生成的证书替换掉官方的默认证书"><a href="#将生成的证书替换掉官方的默认证书" class="headerlink" title="将生成的证书替换掉官方的默认证书"></a>将生成的证书替换掉官方的默认证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> base.pem assets/client/tls/ngrokroot.crt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/12/5be93797b9d1c.png" alt="RTX截图未命名.png"></p><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><p>会在<code>bin</code>目录下生成两个文件，服务端我们接下来直接运行，客户端我们需要生成window版。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make release-server release-client</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/12/5be9395b9383d.png" alt="6.png"></p><h3 id="运行服务端"><a href="#运行服务端" class="headerlink" title="运行服务端"></a>运行服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/ngrokd -tlsKey=server.key -tlsCrt=server.crt -domain=<span class="string">&quot;wx.yzblog.xyz&quot;</span> -httpAddr=<span class="string">&quot;:80&quot;</span> -httpsAddr=<span class="string">&quot;:443&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>httpAddr、httpsAddr 分别是 ngrok 用来转发 http、https 服务的端口，可以随意指定。<br>ngrokd 还会开一个 4443 端口用来跟客户端通讯（可通过 -tunnelAddr&#x3D;”:xxx” 指定）。<br>由于微信限制不能出现端口号，因此这个使用了80、443端口。<br><img src="https://i.loli.net/2018/11/12/5be93aa358dab.png" alt="5.png"><br><img src="https://i.loli.net/2018/11/12/5be93b6d1a41a.png" alt="7.png"></p></blockquote><h3 id="生成客户端"><a href="#生成客户端" class="headerlink" title="生成客户端"></a>生成客户端</h3><p>执行对应的命令会在bin目录下生成windows_amd64目录，ngrok.exe就存放在该目录下。将ngrok.exe下载到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=windows GOARCH=amd64 make release-client  </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/12/5be93bb172838.png" alt="8.png"></p><blockquote><p>在本地新建文件夹（名字随便），同时在此文件夹下新建以下文件。<br><img src="https://i.loli.net/2018/11/12/5be93cca0c4b0.png" alt="9.png"><br>文件内容分别为：</p></blockquote><ol><li>ngrok.cfg(配置文件)<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server_addr</span>: <span class="string">&quot;wx.yzblog.xyz:4443&quot;  </span></span><br><span class="line"><span class="attr">trust_host_root_certs</span>: <span class="string">false </span></span><br></pre></td></tr></table></figure></li><li>startup.bat(启动脚本)<br><code>-config</code>指向配置文件，<br><code>-log</code>存放日志文件位置，<br><code>-subdomain</code>为自定义的域名前缀。<br><code>8080</code>为端口号。<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">@echo</span> <span class="string">on</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">%cd%</span></span><br><span class="line"><span class="comment">#ngrok -proto=tcp 22</span></span><br><span class="line"><span class="comment">#ngrok start web</span></span><br><span class="line"><span class="attr">ngrok</span> <span class="string">-config=ngrok.cfg -log=ngrok.log -subdomain=my 8080</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="点击启动脚本startup-bat完成启动"><a href="#点击启动脚本startup-bat完成启动" class="headerlink" title="点击启动脚本startup.bat完成启动"></a>点击启动脚本startup.bat完成启动</h3><p>参考梦幻逝水大大的教程 ：<a href="https://blog.csdn.net/yjc_1111/article/details/79353718">https://blog.csdn.net/yjc_1111/article/details/79353718</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中ApplicationListener使用方法及问题</title>
      <link href="/spring-ApplicationListener.html"/>
      <url>/spring-ApplicationListener.html</url>
      
        <content type="html"><![CDATA[<h3 id="编写初始化操作类"><a href="#编写初始化操作类" class="headerlink" title="编写初始化操作类"></a>编写初始化操作类</h3><p>实现接口<code>ApplicationListener</code>，并重写<code>public void onApplicationEvent(ApplicationEvent event) &#123;｝</code>可以在容器初始话的时候执行这个方法。</p><p>会存在一个问题，在web 项目中（spring mvc），系统会存在两个容器，一个是root application context ,另一个就是我们自己的 projectName-servlet  context（作为root application context的子容器）。就会造成onApplicationEvent方法被执行两次。为了避免上面提到的问题，我们可以只在root application context初始化完成后调用逻辑代码，其他的容器的初始化完成，则不做任何处理，所以加入判断：<code>if (event.getApplicationContext().getParent() == null)&#123;...&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yzeng.init;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextRefreshedEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationStartListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 防止并行执行</span></span><br><span class="line">        <span class="keyword">if</span> (event.getApplicationContext().getParent() == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//do something 这里写下将要初始化的内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写配置类来实例化操作类"><a href="#编写配置类来实例化操作类" class="headerlink" title="编写配置类来实例化操作类"></a>编写配置类来实例化操作类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yzeng.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yzeng.init.ApplicationStartListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationStartListener <span class="title function_">applicationStartListener</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplicationStartListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动SpringBoot项目"><a href="#启动SpringBoot项目" class="headerlink" title="启动SpringBoot项目"></a>启动SpringBoot项目</h3><p>在入口类中运行项目，查看启动日志：<br><img src="https://i.loli.net/2018/11/08/5be3cc1d6eb9c.png" alt="日志"></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看了不一定会,不看肯定不会系列</title>
      <link href="/StudyVideo.html"/>
      <url>/StudyVideo.html</url>
      
        <content type="html"><![CDATA[<h1 id="资源分享"><a href="#资源分享" class="headerlink" title="资源分享"></a>资源分享</h1><p><a href="https://github.com/ZhongFuCheng3y/3y/blob/master/src/resource.md">资源均来源于网络</a></p><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><ul><li>Java马士兵：链接：<a href="https://pan.baidu.com/s/1jJRvxGi">https://pan.baidu.com/s/1jJRvxGi</a>密码：v3xb</li><li>Java毕向东：到往B站找，已上传到B站(Java3y)</li><li>Java刘意：链接：<a href="https://pan.baidu.com/s/1kVZQCqr">https://pan.baidu.com/s/1kVZQCqr</a>密码：34lw</li><li>JavaSE基础：链接：<a href="https://pan.baidu.com/s/1FGUKwY30T_A3cmAikIzPQQ">https://pan.baidu.com/s/1FGUKwY30T_A3cmAikIzPQQ</a> 密码：st7h</li><li>Java数据结构：链接：<a href="https://pan.baidu.com/s/1mjv3ovu">https://pan.baidu.com/s/1mjv3ovu</a>密码：bx0s </li><li>java面试题链接：<a href="https://pan.baidu.com/s/11kMLiU8SN8jBjKlQ9rHDRA">https://pan.baidu.com/s/11kMLiU8SN8jBjKlQ9rHDRA</a> 密码：3ddq</li><li>BAT面试题链接：链接：<a href="https://pan.baidu.com/s/1tFUhZ3ucGF6ipUSSvMk0rg">https://pan.baidu.com/s/1tFUhZ3ucGF6ipUSSvMk0rg</a>  密码：xy2a</li></ul><blockquote><p>更新</p></blockquote><ul><li>一、20天横扫Java基础（课堂实录） <a href="https://pan.baidu.com/s/1htTzZRQ">https://pan.baidu.com/s/1htTzZRQ</a></li><li>二、尚硅谷Java基础实战——Bank项目 <a href="http://pan.baidu.com/share/link?shareid=3690978764&uk=573533038">http://pan.baidu.com/share/link?shareid=3690978764&amp;uk=573533038</a></li><li>三、尚硅谷_ORACLE、SQL、PLSQL 视频教程 <a href="https://pan.baidu.com/s/1ghb9ENL">https://pan.baidu.com/s/1ghb9ENL</a></li><li>四、尚硅谷JDBC视频教程 <a href="https://pan.baidu.com/s/1c3XBTk8">https://pan.baidu.com/s/1c3XBTk8</a></li><li>五、Java8新特性 <a href="http://pan.baidu.com/s/1cgWOH4">http://pan.baidu.com/s/1cgWOH4</a></li><li>六、Java——JUC <a href="http://pan.baidu.com/s/1hsoh76k">http://pan.baidu.com/s/1hsoh76k</a></li><li>七、Java——NIO <a href="http://pan.baidu.com/s/1c2N1ADy">http://pan.baidu.com/s/1c2N1ADy</a></li><li>八、最新Java9新特性 视频 链接: <a href="https://pan.baidu.com/s/1ge85H4Z">https://pan.baidu.com/s/1ge85H4Z</a> 密码: 9e1k</li><li>最新尚硅谷Java面试题 <a href="https://pan.baidu.com/s/1NfLjRGhwr-gJUti9hzo8Ew">https://pan.baidu.com/s/1NfLjRGhwr-gJUti9hzo8Ew</a> 提取码：enw5</li><li>最新尚硅谷Java开发利器：IntelliJ IDEA的安装、配置与使用尚硅谷 <a href="https://pan.baidu.coms/11biVBv9EI9yfL6Cee0r0LQ">https://pan.baidu.coms/11biVBv9EI9yfL6Cee0r0LQ</a> 密码：n7hn</li></ul><blockquote><p>更新</p></blockquote><ul><li>java300集链接：链接：<a href="https://pan.baidu.com/s/1nh-hcdQfdWlEjmSAYO4uWQ">https://pan.baidu.com/s/1nh-hcdQfdWlEjmSAYO4uWQ</a> 密码： 密码：2iza</li></ul><h1 id="JavaWeb基础"><a href="#JavaWeb基础" class="headerlink" title="JavaWeb基础"></a>JavaWeb基础</h1><ul><li>Servlet韩顺平：链接：<a href="https://pan.baidu.com/s/1htDmvJm">https://pan.baidu.com/s/1htDmvJm</a>密码：kmky</li><li>JavaWeb方立勋：链接：<a href="https://pan.baidu.com/s/1nwTXgSh">https://pan.baidu.com/s/1nwTXgSh</a>密码：w67y </li><li>AJAX:链接：<a href="https://pan.baidu.com/s/1mdNBKOBKLt82PwAPLwB8qA">https://pan.baidu.com/s/1mdNBKOBKLt82PwAPLwB8qA</a> 密码：vrad</li><li>王兴魁：链接：<a href="https://pan.baidu.com/s/13TeTn28H6GdRDqCotJq2oA">https://pan.baidu.com/s/13TeTn28H6GdRDqCotJq2oA</a> 密码：wzay</li><li>JavaWeb应用系统攻防技术精讲:链接：<a href="https://pan.baidu.com/s/12u0tZErbxWCfjmZ1YJfNCQ">https://pan.baidu.com/s/12u0tZErbxWCfjmZ1YJfNCQ</a> 密码：ms16</li><li>Oracle：链接：<a href="https://pan.baidu.com/s/1zYo5oKh3IZJmKayzXnMwNA">https://pan.baidu.com/s/1zYo5oKh3IZJmKayzXnMwNA</a> 密码：7u5c</li></ul><blockquote><p>更新</p></blockquote><ul><li>一、尚硅谷_JavaScript DOM编程视频教程 <a href="https://pan.baidu.com/s/1dzPYA6">https://pan.baidu.com/s/1dzPYA6</a></li><li>二、尚硅谷jQuery 视频教程 <a href="https://pan.baidu.com/s/1jJkaWya">https://pan.baidu.com/s/1jJkaWya</a></li><li>三、尚硅谷Ajax视频教程 <a href="https://pan.baidu.com/s/1skDOKZ7">https://pan.baidu.com/s/1skDOKZ7</a></li><li>四、尚硅谷JavaWeb视频基础（涵盖JavaWEB 企业级开发所需的Servlet、JSP、MVC 设计模式、EL 表达式、JavaBean、国际化、Cookie和HttpSession、JavaMail等全部核心技术。） <a href="https://pan.baidu.com/s/1kU6Ley7">https://pan.baidu.com/s/1kU6Ley7</a></li><li>五、尚硅谷JavaWEB 项目实战（图书商城）<a href="https://pan.baidu.com/s/1jIoAMKe">https://pan.baidu.com/s/1jIoAMKe</a></li><li>尚硅谷大数据之JavaWEB视频：<a href="https://pan.baidu.com/s/1DMJmY8isPW4hFLqIEF0TJA">https://pan.baidu.com/s/1DMJmY8isPW4hFLqIEF0TJA</a></li></ul><blockquote><p>更新</p></blockquote><ul><li>ajax 链接: 链接:<a href="https://pan.baidu.com/s/1dHctdXv%E5%AF%86%E7%A0%81%EF%BC%9Ajfwf">https://pan.baidu.com/s/1dHctdXv密码：jfwf</a></li><li>Mysql视频教程视频教程 链接: <a href="https://pan.baidu.com/s/1kVTdjcr%E5%AF%86%E7%A0%81%EF%BC%9Ae37d">https://pan.baidu.com/s/1kVTdjcr密码：e37d</a></li><li>oracle视频教程视频教程 链接: <a href="https://pan.baidu.com/s/1i6jwpal%E5%AF%86%E7%A0%81%EF%BC%9Ahk6p">https://pan.baidu.com/s/1i6jwpal密码：hk6p</a></li></ul><h1 id="Java-EE"><a href="#Java-EE" class="headerlink" title="Java EE"></a>Java EE</h1><ul><li>168期：链接：<a href="https://pan.baidu.com/s/1nvZg6Y9">https://pan.baidu.com/s/1nvZg6Y9</a>密码：ro2e</li><li>32期：链接：<a href="https://pan.baidu.com/s/1hsRPnJQ">https://pan.baidu.com/s/1hsRPnJQ</a>密码：125v</li><li>对SpringMVC和Mybatis的补充：链接：<a href="https://pan.baidu.com/s/1nvXKEpj">https://pan.baidu.com/s/1nvXKEpj</a>密码：krzl</li><li>手写SPringMvc框架【核心原理】:链接：<a href="https://pan.baidu.com/s/1ug04Ve4uol2WpWNNnfybGw">https://pan.baidu.com/s/1ug04Ve4uol2WpWNNnfybGw</a> 密码：7ugb</li><li>SSMShiro构建安全认证登录:链接：<a href="https://pan.baidu.com/s/1XB4jdavebwvfkQNNBFOMAA">https://pan.baidu.com/s/1XB4jdavebwvfkQNNBFOMAA</a> 密码：wunv</li><li>Maven构建Spring Springmvc Mybatis Shiro：链接：<a href="https://pan.baidu.com/s/1-Flm-XWJ7rJxOw2elIxRZQ">https://pan.baidu.com/s/1-Flm-XWJ7rJxOw2elIxRZQ</a> 密码：lc4r</li><li>框架必学：链接：<a href="https://pan.baidu.com/s/1HjsILxtxQsOnMu-zBseHLg">https://pan.baidu.com/s/1HjsILxtxQsOnMu-zBseHLg</a> 密码：e0h2</li><li>分布式消处理RabbitMQ链接：<a href="https://pan.baidu.com/s/1kOwcqorKKWayqt4XKI0bSg">https://pan.baidu.com/s/1kOwcqorKKWayqt4XKI0bSg</a> 密码：qrg7</li><li>分布式搜索引擎elasticsearch链接：<a href="https://pan.baidu.com/s/1-rsDq9AIlGTKnQZeIjUgoQ">https://pan.baidu.com/s/1-rsDq9AIlGTKnQZeIjUgoQ</a> 密码：pqbr</li><li>Dubbo分布式服务框架精讲：链接：<a href="https://pan.baidu.com/s/1dijyfXnIFLEleBQm7WlkQQ">https://pan.baidu.com/s/1dijyfXnIFLEleBQm7WlkQQ</a> 密码：l6ia</li><li>nginx视频教程视频教程 链接: <a href="https://pan.baidu.com/s/1nxccLg1%E5%AF%86%E7%A0%81%EF%BC%9Ax2q8">https://pan.baidu.com/s/1nxccLg1密码：x2q8</a></li><li>mongodb视频教程视频教程 链接: <a href="https://pan.baidu.com/s/1c3EE7U4%E5%AF%86%E7%A0%81%EF%BC%9A7v8b">https://pan.baidu.com/s/1c3EE7U4密码：7v8b</a></li></ul><blockquote><p>更新</p></blockquote><ul><li>一、尚硅谷Struts2视频教程 <a href="https://pan.baidu.com/s/1jI6xxkE">https://pan.baidu.com/s/1jI6xxkE</a></li><li>二、尚硅谷Hibernate 4视频教程 <a href="https://pan.baidu.com/s/1bqpEEej">https://pan.baidu.com/s/1bqpEEej</a></li><li>三、尚硅谷Spring 4视频教程 <a href="https://pan.baidu.com/s/1O_avNG9liWl87teF31FEZg">https://pan.baidu.com/s/1O_avNG9liWl87teF31FEZg</a></li><li>四、尚硅谷SSH整合&amp;综合案例视频 <a href="https://pan.baidu.com/s/1dFbTMxV">https://pan.baidu.com/s/1dFbTMxV</a></li><li>五、尚硅谷SVN视频教程 <a href="https://pan.baidu.com/s/1kWZz9vp">https://pan.baidu.com/s/1kWZz9vp</a></li><li>六、尚硅谷SpringMVC视频教程 <a href="https://pan.baidu.com/s/1gfoaUw7">https://pan.baidu.com/s/1gfoaUw7</a></li><li>七、尚硅谷JPA视频教程 <a href="https://pan.baidu.com/s/1hsqGMOW">https://pan.baidu.com/s/1hsqGMOW</a></li><li>八、尚硅谷SpringData视频 <a href="https://pan.baidu.com/s/1c38938W">https://pan.baidu.com/s/1c38938W</a></li><li>九、尚硅谷SSSP整合&amp;分页视频 <a href="https://pan.baidu.com/s/1miEVgr2">https://pan.baidu.com/s/1miEVgr2</a></li><li>十、尚硅谷Redis视频 <a href="http://pan.baidu.com/s/1pLKsBOJ">http://pan.baidu.com/s/1pLKsBOJ</a></li><li>十一、尚硅谷Maven视频 <a href="https://pan.baidu.com/s/1dHfbx8d">https://pan.baidu.com/s/1dHfbx8d</a></li><li>十二、尚硅谷Shiro视频 <a href="https://pan.baidu.com/s/1yXiOStKfxSCYoMHsNrnCFQ">https://pan.baidu.com/s/1yXiOStKfxSCYoMHsNrnCFQ</a></li><li>十三、尚硅谷MySQL高级视频 <a href="https://pan.baidu.com/s/1i7ircH3">https://pan.baidu.com/s/1i7ircH3</a></li><li>十四、 尚硅谷MyBatis 视频 <a href="https://pan.baidu.com/s/1snbVg77">https://pan.baidu.com/s/1snbVg77</a></li><li>十五、尚硅谷SSM高级视频 <a href="https://pan.baidu.com/s/1eTcHjRc">https://pan.baidu.com/s/1eTcHjRc</a></li><li>十六、尚硅谷MySQL基础视频178集 <a href="https://pan.baidu.com/s/1mjCyBm4">https://pan.baidu.com/s/1mjCyBm4</a> 密码: p03n</li><li>十七、最新尚硅谷Spring注解驱动开发 <a href="https://pan.baidu.com/s/1SzHGre2Upj8NzzGZ_6qM4Q">https://pan.baidu.com/s/1SzHGre2Upj8NzzGZ_6qM4Q</a></li><li>十八、最新尚硅谷SpringBoot-核心技术篇 <a href="https://pan.baidu.com/s/1isXPv_NrBX2Fuf9pRLU2sQ">https://pan.baidu.com/s/1isXPv_NrBX2Fuf9pRLU2sQ</a> 密码: sya6   </li><li>十九、最新尚硅谷SpringBoot-整合篇<a href="https://pan.baidu.com/s/1LHFKQsuQDOmUyzMfRkq63w">https://pan.baidu.com/s/1LHFKQsuQDOmUyzMfRkq63w</a> 密码：1n9z </li><li>二十、最新尚硅谷Mapper视频 <a href="https://pan.baidu.com/s/1yfzUkHjMiF613uiiM5KBYw">https://pan.baidu.com/s/1yfzUkHjMiF613uiiM5KBYw</a> 密码：l0xw</li><li>二十一、最新尚硅谷Linux视频 <a href="https://pan.baidu.com/s/1AmDqMODihyifgW9gevrSwA">https://pan.baidu.com/s/1AmDqMODihyifgW9gevrSwA</a> 密码：kxpp</li><li>二十二、最新尚硅谷SVN高级视频<a href="https://pan.baidu.com/s/1ADe9Db5ZbcKC4I_V2RiwDw">https://pan.baidu.com/s/1ADe9Db5ZbcKC4I_V2RiwDw</a> 密码：6ean</li><li>二十三、最新尚硅谷SpringCloud视频 <a href="https://pan.baidu.com/s/1nB23cEOZJmbCkJebAU4hCg">https://pan.baidu.com/s/1nB23cEOZJmbCkJebAU4hCg</a> 密码：w4vq</li><li>二十四、最新尚硅谷RBAC权限实战项目 <a href="https://pan.baidu.com/s/1jsLd7V2CPiC9uoWOctWpQg">https://pan.baidu.com/s/1jsLd7V2CPiC9uoWOctWpQg</a> 密码：6vby</li><li>二十五、最新尚硅谷Git&amp;GitHup视频 <a href="https://pan.baidu.com/s/1JDQKVDtdK7_Tiw3Tejottg">https://pan.baidu.com/s/1JDQKVDtdK7_Tiw3Tejottg</a> 密码：2mvj</li><li>二十六、最新尚硅谷Jenkins视频 <a href="https://pan.baidu.com/s/1WKDJpwKmJBUi8FYBe_9r1g">https://pan.baidu.com/s/1WKDJpwKmJBUi8FYBe_9r1g</a> 密码：9jbl</li><li>二十七、最新尚硅谷MyBatisPlus视频<a href="https://pan.baidu.com/s/1XVX5rwawjIjQe5pO79HYZg">https://pan.baidu.com/s/1XVX5rwawjIjQe5pO79HYZg</a> 密码：0ba6</li><li>二十八、最新尚硅谷Docker核心技术 <a href="https://pan.baidu.com/s/17rJ5ME_7p804Nh-Qcc0T6A">https://pan.baidu.com/s/17rJ5ME_7p804Nh-Qcc0T6A</a> 密码：5pmr</li><li>二十九、最新尚硅谷Dubbo视频教程 <a href="https://pan.baidu.com/s/1Iv4zxskhHBHGiBD4e2-5dQ">https://pan.baidu.com/s/1Iv4zxskhHBHGiBD4e2-5dQ</a> 密码：22nr</li></ul><blockquote><p>更新</p></blockquote><ul><li>尚硅谷大数据之Spring视频：<a href="https://pan.baidu.com/s/1Q26Cixpv2fGGluUGzKi7Eg">https://pan.baidu.com/s/1Q26Cixpv2fGGluUGzKi7Eg</a></li><li>尚硅谷大数据之SpringMVC视频：<a href="https://pan.baidu.com/s/1ktvzMfwY3C9Cxyv_Ftdhuw">https://pan.baidu.com/s/1ktvzMfwY3C9Cxyv_Ftdhuw</a></li><li>尚硅谷大数据之MyBtis视频：<a href="https://pan.baidu.com/s/1rZXNajX8NM7ojx3_iTWDfA">https://pan.baidu.com/s/1rZXNajX8NM7ojx3_iTWDfA</a></li><li>尚硅谷大数据之SSM：<a href="https://pan.baidu.com/s/1CKwlGsJjJd9kZvWk0GI-xw">https://pan.baidu.com/s/1CKwlGsJjJd9kZvWk0GI-xw</a></li></ul><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>老段带你学鸟哥-基础篇：链接：<a href="https://pan.baidu.com/s/1rOwFbPjDZSH35vcRvJcbPg">https://pan.baidu.com/s/1rOwFbPjDZSH35vcRvJcbPg</a> 密码：i8p9</li><li>老段带你学鸟哥-服务器篇：链接：<a href="https://pan.baidu.com/s/1E9hijOCFalD2952ffovkDg">https://pan.baidu.com/s/1E9hijOCFalD2952ffovkDg</a> 密码：3wpv</li><li>Linux环境部署工具：链接：<a href="https://pan.baidu.com/s/1OktWLPpvAyweSr5sdktFLQ">https://pan.baidu.com/s/1OktWLPpvAyweSr5sdktFLQ</a> 密码：q6yl</li></ul><blockquote><p>更新</p></blockquote><ul><li>尚硅谷大数据之Linux视频：<a href="https://pan.baidu.com/s/1wMTp4_Fh9Yl1CPjUNOydaw">https://pan.baidu.com/s/1wMTp4_Fh9Yl1CPjUNOydaw</a> 密码：6q4k</li><li>尚硅谷大数据之Shell视频：<a href="https://pan.baidu.com/s/1DecEi7Dq5R9Mghl6F_Csvw">https://pan.baidu.com/s/1DecEi7Dq5R9Mghl6F_Csvw</a> 密码：ucrr</li></ul><h1 id="项目资源："><a href="#项目资源：" class="headerlink" title="项目资源："></a>项目资源：</h1><ul><li>基于实战垂直开发：链接：<a href="https://pan.baidu.com/s/1smXSInV">https://pan.baidu.com/s/1smXSInV</a>密码：e9j7</li><li>巴巴运动网(上)链接：<a href="https://pan.baidu.com/s/1mjHhXzy">https://pan.baidu.com/s/1mjHhXzy</a>密码：dpnv</li><li>巴巴运动网(下)链接：<a href="https://pan.baidu.com/s/1o92kLAU">https://pan.baidu.com/s/1o92kLAU</a>密码：egcn</li><li>两小时写出自己的直播间链接：<a href="https://pan.baidu.com/s/1lU99WfrGIef1A_Oy1AU_dQ">https://pan.baidu.com/s/1lU99WfrGIef1A_Oy1AU_dQ</a> 密码：w0gi</li><li>爬虫数据抓取与fusionChart图形大数据结果展示链接：<a href="https://pan.baidu.com/s/10iMNQfg9SSEGkjGAHAcydg">https://pan.baidu.com/s/10iMNQfg9SSEGkjGAHAcydg</a> 密码：ccp7</li><li>互联网手机短信验证码功能精讲链接：<a href="https://pan.baidu.com/s/1kA-oHx0RgdFnNHtd73va-w">https://pan.baidu.com/s/1kA-oHx0RgdFnNHtd73va-w</a> 密码：aeor</li><li>大型企业应用技术-Excel导入导出技术精讲链接：<a href="https://pan.baidu.com/s/13-7cXqmn_PrOVkS_QchGgw">https://pan.baidu.com/s/13-7cXqmn_PrOVkS_QchGgw</a> 密码：m4z4</li><li>案例和总结 链接: <a href="https://pan.baidu.com/s/1eTSNB5C%E5%AF%86%E7%A0%81%EF%BC%9A5rx7">https://pan.baidu.com/s/1eTSNB5C密码：5rx7</a></li><li>天猫商城购物车实战 链接: <a href="https://pan.baidu.com/s/1smVjb7v%E5%AF%86%E7%A0%81%EF%BC%9Acu4c">https://pan.baidu.com/s/1smVjb7v密码：cu4c</a></li><li>Java学科链接学科链接：链接：<a href="https://pan.baidu.com/s/1DtnDNv1p9ENZETLqIuKytw%E5%AF%86%E7%A0%81%EF%BC%9A82lk">https://pan.baidu.com/s/1DtnDNv1p9ENZETLqIuKytw密码：82lk</a></li></ul><h1 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h1><ul><li>HTML+CSS+JavaScript+jquery：链接：<a href="https://pan.baidu.com/s/1i6v9vCh">https://pan.baidu.com/s/1i6v9vCh</a>密码：rdvi</li><li>HTML5+CSS3：链接：<a href="https://pan.baidu.com/s/1mj5CDLY">https://pan.baidu.com/s/1mj5CDLY</a>密码：13k0 </li><li>WebSocket技术构建在线客服系统：链接：<a href="https://pan.baidu.com/s/1W9msl6U6wzCFi7jsX1mkEg">https://pan.baidu.com/s/1W9msl6U6wzCFi7jsX1mkEg</a> 密码：d8fv</li></ul><blockquote><p>更新</p></blockquote><ul><li>一、HTML &amp; CSS 核心教程：（103集实战教学，从入门到精通） <a href="http://pan.baidu.com/s/1pLwKZN1">http://pan.baidu.com/s/1pLwKZN1</a></li><li>二、尚硅谷JavaScript视频（140集实战教学，从入门到精通）<a href="https://pan.baidu.com/s/1gfh9q8r">https://pan.baidu.com/s/1gfh9q8r</a></li><li>三、尚硅谷JavaScript高级视频 <a href="https://pan.baidu.com/s/1cLhs0u">https://pan.baidu.com/s/1cLhs0u</a></li><li>四、尚硅谷jQuery视频 <a href="https://pan.baidu.com/s/1i5Gjxlj">https://pan.baidu.com/s/1i5Gjxlj</a></li><li>五、尚硅谷NodeJS 视频 <a href="https://pan.baidu.com/s/1cnr0Cm">https://pan.baidu.com/s/1cnr0Cm</a> 密码: sqku</li><li>六、尚硅谷MongoDB 视频 <a href="https://pan.baidu.com/s/1mirGFyw">https://pan.baidu.com/s/1mirGFyw</a> 密码: nwe1</li><li>七、尚硅谷Zepto 视频 <a href="https://pan.baidu.com/s/1o7PSymu">https://pan.baidu.com/s/1o7PSymu</a> 密码: e86p</li><li>八、尚硅谷AngularJS 视频 <a href="https://pan.baidu.com/s/1o85jOVK">https://pan.baidu.com/s/1o85jOVK</a> 密码: 7vi2</li><li>九、尚硅谷ES5_6_7 视频 <a href="https://pan.baidu.com/s/1i4Z5VNZ">https://pan.baidu.com/s/1i4Z5VNZ</a> 密码: 3fuy</li><li>十、尚硅谷JS模块化 视频 <a href="https://pan.baidu.com/s/1skO0tJZ">https://pan.baidu.com/s/1skO0tJZ</a> 密码: tekn</li><li>十一、尚硅谷自动化构建工具 视频<ul><li>（1）webpack  链接: <a href="https://pan.baidu.com/s/1kUG5cLT">https://pan.baidu.com/s/1kUG5cLT</a> 密码: ru45</li><li>（2）Gulp     链接: <a href="https://pan.baidu.com/s/1hsMqZkS">https://pan.baidu.com/s/1hsMqZkS</a> 密码: nprj </li><li>（3）Grunt    链接: <a href="https://pan.baidu.com/s/1bGhxL0">https://pan.baidu.com/s/1bGhxL0</a> 密码: m7kq</li></ul></li><li>十二、尚硅谷React视频 <a href="https://pan.baidu.com/s/1TnD2BNqhNWKWyb6v3VoZfw">https://pan.baidu.com/s/1TnD2BNqhNWKWyb6v3VoZfw</a> 密码：xz7c</li><li>十三、尚硅谷CSS2.1 视频 <a href="https://pan.baidu.com/s/1ggA6SPt">https://pan.baidu.com/s/1ggA6SPt</a> 密码：jybl</li><li>十三、尚硅谷CSS3 视频 <a href="https://pan.baidu.com/s/1bqiUHYZ">https://pan.baidu.com/s/1bqiUHYZ</a> 密码：jojr</li><li>十四、尚硅谷less 视频 <a href="https://pan.baidu.com/s/1jJFk5MI">https://pan.baidu.com/s/1jJFk5MI</a> 密码：izzk</li><li>十五、尚硅谷bootstrap 视频 <a href="https://pan.baidu.com/s/1eTxHHN8">https://pan.baidu.com/s/1eTxHHN8</a> 密码：hzet</li><li>十六、尚硅谷HTML5核心视频    <a href="https://pan.baidu.com/s/18hy_J8FdmBYabVGU8BqVKA">https://pan.baidu.com/s/18hy_J8FdmBYabVGU8BqVKA</a>    密码：3fhg</li><li>十七、尚硅谷HTML5实战视频 <a href="https://pan.baidu.com/s/1ipfFFhtWGvNuCMicxnzQdw">https://pan.baidu.com/s/1ipfFFhtWGvNuCMicxnzQdw</a> 密码：dehi</li><li>十八、尚硅谷HTML5项目-谷粒音乐   <a href="https://pan.baidu.com/s/1u6LBOWa9QCpETeC3gjzojw">https://pan.baidu.com/s/1u6LBOWa9QCpETeC3gjzojw</a>  密码：plb6</li><li>十九、尚硅谷项目硅谷直聘 <a href="https://pan.baidu.com/s/1h7H6WwLjyYVstlYix7LuxA">https://pan.baidu.com/s/1h7H6WwLjyYVstlYix7LuxA</a> 密码：wh98</li><li>二十、尚硅谷VUE技术核心视频<a href="https://pan.baidu.com/s/1M6i5gcjxsooj6ejOhOJ2zw">https://pan.baidu.com/s/1M6i5gcjxsooj6ejOhOJ2zw</a> 密码：rf35</li><li>二十一：尚硅谷VUE项目-硅谷外卖   <a href="https://pan.baidu.com/s/1siO6Anl_LeyfS2hcv6rStw">https://pan.baidu.com/s/1siO6Anl_LeyfS2hcv6rStw</a> 密码：b6q5</li><li>二十二：尚硅谷微信小程序视频   <a href="https://pan.baidu.com/s/1dyM3AUC-UPVBjU9LcVMF5w">https://pan.baidu.com/s/1dyM3AUC-UPVBjU9LcVMF5w</a>   密码：0vhr</li><li>二十三：最新尚硅谷微信公众账号视频 <a href="https://pan.baidu.com/s/1Q_LsjcEOfGW61YY6uCsvTg">https://pan.baidu.com/s/1Q_LsjcEOfGW61YY6uCsvTg</a> 提取码：c1gl</li><li>二十四：最新尚硅谷小程序框架-mpVue <a href="https://pan.baidu.com/s/1-ifBkX-P5GBGs5oVbHzDYw">https://pan.baidu.com/s/1-ifBkX-P5GBGs5oVbHzDYw</a> 提取码：9z6t</li><li>二十五：最新尚硅谷前端H5面试题大全_第一季 <a href="https://pan.baidu.com/s/1SqeHnjj4dni5yjkt6mCE4g">https://pan.baidu.com/s/1SqeHnjj4dni5yjkt6mCE4g</a> 提取码：y76t</li></ul><blockquote><p>更新</p></blockquote><ul><li>0.【web前端全套】链接：链接：<a href="https://pan.baidu.com/s/16K9bdHmXf4EEWBtsSH9r5A">https://pan.baidu.com/s/16K9bdHmXf4EEWBtsSH9r5A</a> 密码： 密码：mb4q</li><li>1.ps 链接: 链接: <a href="https://pan.baidu.com/s/1mjYbcJA%E5%AF%86%E7%A0%81%EF%BC%9Apqdt">https://pan.baidu.com/s/1mjYbcJA密码：pqdt</a></li><li>2.HTML5+CS5+CSS3从入门到精通.iso 链接:<a href="https://pan.baidu.com/s/1cUHz3o%E5%AF%86%E7%A0%81%EF%BC%9Agdyw">https://pan.baidu.com/s/1cUHz3o密码：gdyw</a></li><li>3.Javascript视频教t视频教程 链接: <a href="https://pan.baidu.com/s/1i6eC5YP%E5%AF%86%E7%A0%81%EF%BC%9Aku5k">https://pan.baidu.com/s/1i6eC5YP密码：ku5k</a></li><li>4.Jquery视频教程视频教程 链接：链接：<a href="https://pan.baidu.com/s/17DbNSnR3q5OGSjdw9tvCEA">https://pan.baidu.com/s/17DbNSnR3q5OGSjdw9tvCEA</a> 密码：twcp</li><li>5.Bootstrap视频教程视频教程 链接: <a href="https://pan.baidu.com/s/1jKb2UDS%E5%AF%86%E7%A0%81%EF%BC%9Awr8c">https://pan.baidu.com/s/1jKb2UDS密码：wr8c</a></li><li>6.Vue.js 链接: 链接: <a href="https://pan.baidu.com/s/1slYqBa1%E5%AF%86%E7%A0%81%EF%BC%9A75xd">https://pan.baidu.com/s/1slYqBa1密码：75xd</a></li><li>7.Smarty模板引擎模板引擎视频教程 链接: <a href="https://pan.baidu.com/s/1smewom5%E5%AF%86%E7%A0%81%EF%BC%9Av8vp">https://pan.baidu.com/s/1smewom5密码：v8vp</a></li><li>8.Nodejs 链接: 链接: <a href="https://pan.baidu.com/s/1sm509GD%E5%AF%86%E7%A0%81%EF%BC%9Afux1">https://pan.baidu.com/s/1sm509GD密码：fux1</a></li><li>Web前端：链接：链接：<a href="https://pan.baidu.com/s/1-2tZKmjSRIbBaxwuZjnsnA">https://pan.baidu.com/s/1-2tZKmjSRIbBaxwuZjnsnA</a> 密码： 密码：i5f1</li><li>Angular.js链接: 链接: <a href="https://pan.baidu.com/s/1jJhYrEu%E5%AF%86%E7%A0%81%EF%BC%9Addci">https://pan.baidu.com/s/1jJhYrEu密码：ddci</a></li><li>React链接: 链接: <a href="https://pan.baidu.com/s/1nwnrQxb%E5%AF%86%E7%A0%81%EF%BC%9A942g">https://pan.baidu.com/s/1nwnrQxb密码：942g</a></li><li>nodejs微信开发微信开发链接：链接：<a href="https://pan.baidu.com/s/15tYBZ2yVz9aPO57LKqt7Mg">https://pan.baidu.com/s/15tYBZ2yVz9aPO57LKqt7Mg</a> 密码：jrwb</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>PHP视频教程视频教程 链接: <a href="https://pan.baidu.com/s/1kWE0qZP%E5%AF%86%E7%A0%81%EF%BC%9Axc4q">https://pan.baidu.com/s/1kWE0qZP密码：xc4q</a></li><li>ThinkPHP视频教程视频教程 链接: <a href="https://pan.baidu.com/s/1ggiKvYV%E5%AF%86%E7%A0%81%EF%BC%9A7p5h">https://pan.baidu.com/s/1ggiKvYV密码：7p5h</a></li><li>powerDesigner： 链接：<a href="https://pan.baidu.com/s/1XW11BUZ0Aul9jA0aBYMcFw">https://pan.baidu.com/s/1XW11BUZ0Aul9jA0aBYMcFw</a> 密码：iq0y</li><li>Windows重装系统需要用到的软件：链接：<a href="https://pan.baidu.com/s/1Qezst81DxarCFwljKJKDTQ">https://pan.baidu.com/s/1Qezst81DxarCFwljKJKDTQ</a> 密码：387j</li><li>郝斌C语言+数据结构链接：<a href="https://pan.baidu.com/s/1dZdpZg">https://pan.baidu.com/s/1dZdpZg</a>密码：foxs</li><li>计算机基础课程ppt：链接：<a href="https://pan.baidu.com/s/1MjJt9LP_H1QGMemNqjL0QA">https://pan.baidu.com/s/1MjJt9LP_H1QGMemNqjL0QA</a> 密码：4ylw</li><li>IDEA教程：链接：<a href="https://pan.baidu.com/s/1miXgJnq">https://pan.baidu.com/s/1miXgJnq</a>密码：9c43</li><li>dedeCMS织梦视频织梦视频 链接: <a href="https://pan.baidu.com/s/1bpQBCbP%E5%AF%86%E7%A0%81%EF%BC%9Aikns">https://pan.baidu.com/s/1bpQBCbP密码：ikns</a></li></ul><blockquote><p>更新</p></blockquote><ul><li>java基础文档：<a href="https://pan.baidu.com/s/1o8A5kKy">https://pan.baidu.com/s/1o8A5kKy</a></li><li>JavaWeb技术文档：<a href="https://pan.baidu.com/s/1c1KcMNu">https://pan.baidu.com/s/1c1KcMNu</a></li><li>javaee技术文档：<a href="https://pan.baidu.com/s/1dFwAuNR">https://pan.baidu.com/s/1dFwAuNR</a></li><li>教学课件：<a href="https://pan.baidu.com/s/1c2tUAHU">https://pan.baidu.com/s/1c2tUAHU</a></li><li>就业相关：<a href="https://pan.baidu.com/s/1slv5Yrz">https://pan.baidu.com/s/1slv5Yrz</a></li><li>Java开发工具：<a href="http://www.atguigu.com/opensource.shtml">http://www.atguigu.com/opensource.shtml</a></li><li>Jar: <a href="https://pan.baidu.com/s/1KXvnojsly5JdbrPJPTQmVw">https://pan.baidu.com/s/1KXvnojsly5JdbrPJPTQmVw</a> 密码：hlak </li><li>Android内部讲课文档：<a href="https://pan.baidu.com/s/1bpnkZCV">https://pan.baidu.com/s/1bpnkZCV</a></li><li>Android技术文档：<a href="https://pan.baidu.com/s/1o78TbUM">https://pan.baidu.com/s/1o78TbUM</a></li><li>Android使用工具：<a href="https://pan.baidu.com/s/1skZRoLZ">https://pan.baidu.com/s/1skZRoLZ</a></li><li>Android框架包清单：<a href="https://pan.baidu.com/s/1skLEly9">https://pan.baidu.com/s/1skLEly9</a></li><li>前端H5开发工具：<a href="https://pan.baidu.com/s/1jH8vplG">https://pan.baidu.com/s/1jH8vplG</a></li><li>前端H5技术文档：<a href="https://pan.baidu.com/s/1mhZv3q4">https://pan.baidu.com/s/1mhZv3q4</a></li><li>前端H5框架包： <a href="https://pan.baidu.com/s/1nvBThmp">https://pan.baidu.com/s/1nvBThmp</a></li><li>前端H5Jar：<a href="https://pan.baidu.com/s/1pKY9yAZ">https://pan.baidu.com/s/1pKY9yAZ</a></li></ul><h1 id="区块链教程"><a href="#区块链教程" class="headerlink" title="区块链教程"></a>区块链教程</h1><p>一、最新尚硅谷 Go语言核心编程课程 <a href="https://pan.baidu.com/s/1QYT1AJmHpuFp7KHcR6Y8gA">https://pan.baidu.com/s/1QYT1AJmHpuFp7KHcR6Y8gA</a> 密码：cybt</p><h1 id="Android教程"><a href="#Android教程" class="headerlink" title="Android教程"></a>Android教程</h1><p>Android核心技术</p><ul><li>一、Android核心基础_15天精讲精练 <a href="https://pan.baidu.com/s/1b86u2E">https://pan.baidu.com/s/1b86u2E</a></li><li>二、Android自定义控件视频 <a href="https://pan.baidu.com/s/1hrOVZd6">https://pan.baidu.com/s/1hrOVZd6</a></li><li>三、Android—JNI视频 <a href="http://pan.baidu.com/s/1kVqBCmr">http://pan.baidu.com/s/1kVqBCmr</a></li><li>四、Android与H5互调 <a href="https://pan.baidu.com/s/1miHaDbM">https://pan.baidu.com/s/1miHaDbM</a></li><li>五、Android常用第三方框架源码分析 <a href="http://pan.baidu.com/s/1o789Vjc">http://pan.baidu.com/s/1o789Vjc</a></li><li>六、尚硅谷Android视频《多渠道打包》 <a href="http://pan.baidu.com/s/1dEVpQyX">http://pan.baidu.com/s/1dEVpQyX</a></li></ul><h2 id="Android项目实战"><a href="#Android项目实战" class="headerlink" title="Android项目实战"></a>Android项目实战</h2><ul><li>一、Android项目实战—手机影音 <a href="http://pan.baidu.com/s/1i5wLMbN">http://pan.baidu.com/s/1i5wLMbN</a></li><li>二、最新Android项目—硅谷新闻 <a href="https://pan.baidu.com/s/1nvASXvF">https://pan.baidu.com/s/1nvASXvF</a></li><li>三、最新Android项目实战—硅谷社交 <a href="https://pan.baidu.com/s/1dFyXZxR">https://pan.baidu.com/s/1dFyXZxR</a></li><li>四、最新Android项目—硅谷商城[新] <a href="http://pan.baidu.com/s/1o8MyptC">http://pan.baidu.com/s/1o8MyptC</a></li><li>五、最新Android项目—硅谷P2P金融 <a href="https://pan.baidu.com/s/1KJbXUd3ymMhmJUPCqT9gzA">https://pan.baidu.com/s/1KJbXUd3ymMhmJUPCqT9gzA</a></li></ul><h2 id="Android前沿技术"><a href="#Android前沿技术" class="headerlink" title="Android前沿技术"></a>Android前沿技术</h2><ul><li>一、Android_软件框架搭建 <a href="https://pan.baidu.com/s/1hsFIYig">https://pan.baidu.com/s/1hsFIYig</a></li><li>二、Android_OKHttp使用方法 <a href="https://pan.baidu.com/s/1c5McVW">https://pan.baidu.com/s/1c5McVW</a></li><li>三、Android_JSON解析 <a href="http://pan.baidu.com/s/1c23eePE">http://pan.baidu.com/s/1c23eePE</a></li><li>四、Android_xUtils3 <a href="https://pan.baidu.com/s/1nvGsExF">https://pan.baidu.com/s/1nvGsExF</a></li><li>五、Android_Afinal <a href="http://pan.baidu.com/s/1c7lXH8">http://pan.baidu.com/s/1c7lXH8</a></li><li>六、Android_Volley <a href="http://pan.baidu.com/s/1jIkBalg">http://pan.baidu.com/s/1jIkBalg</a></li><li>七、Android_ButterKnife <a href="http://pan.baidu.com/s/1pKOgh9x">http://pan.baidu.com/s/1pKOgh9x</a></li><li>八、Android_EventBus <a href="http://pan.baidu.com/s/1qXYTyA4">http://pan.baidu.com/s/1qXYTyA4</a></li><li>九、Android_ImageLoader <a href="http://pan.baidu.com/s/1o7DsPmy">http://pan.baidu.com/s/1o7DsPmy</a></li><li>十、Android_Picasso <a href="http://pan.baidu.com/s/1c1JITo8">http://pan.baidu.com/s/1c1JITo8</a></li><li>十一、Android_Glide <a href="http://pan.baidu.com/s/1hswlhu0">http://pan.baidu.com/s/1hswlhu0</a></li><li>十二、Android_Fresco <a href="http://pan.baidu.com/s/1qXHtwdA">http://pan.baidu.com/s/1qXHtwdA</a></li><li>十三、Android_RecyclerView <a href="http://pan.baidu.com/s/1kVjTLJ5">http://pan.baidu.com/s/1kVjTLJ5</a></li><li>十四、Android_Pulltorefresh <a href="http://pan.baidu.com/s/1c20xVm4">http://pan.baidu.com/s/1c20xVm4</a></li><li>十五、 Android_UniversalVideoView <a href="http://pan.baidu.com/s/1mhEK9EK">http://pan.baidu.com/s/1mhEK9EK</a></li><li>十六、 Android_JieCaoVideoPlayer <a href="https://pan.baidu.com/s/1geZZ1Ov">https://pan.baidu.com/s/1geZZ1Ov</a></li><li>十七、 Android_Banner <a href="https://pan.baidu.com/s/1nv2jpDB">https://pan.baidu.com/s/1nv2jpDB</a></li><li>十八、CountdownView秒杀 <a href="https://pan.baidu.com/s/1nvAWFMT">https://pan.baidu.com/s/1nvAWFMT</a></li><li>十九、OpenDanmaku弹幕 <a href="https://pan.baidu.com/s/1eS2x2Hc">https://pan.baidu.com/s/1eS2x2Hc</a></li><li>二十、TabLayout&amp;ViewPager <a href="https://pan.baidu.com/s/1mhCKJag#list/path=%2F">https://pan.baidu.com/s/1mhCKJag#list/path=%2F</a></li></ul><h1 id="Python教程"><a href="#Python教程" class="headerlink" title="Python教程"></a>Python教程</h1><ul><li>最新尚硅谷Python核心基础视频：<a href="https://pan.baidu.com/s/1LVvNP5NPgE-IxyhW6KgDqA">https://pan.baidu.com/s/1LVvNP5NPgE-IxyhW6KgDqA</a>  密码：b2ma</li><li>最新尚硅谷Python项目之谷粒教育:： <a href="https://pan.baidu.com/s/1GocU4kmLxup3Pf7y4O1nfA">https://pan.baidu.com/s/1GocU4kmLxup3Pf7y4O1nfA</a> 提取码：7ap5</li><li>最新尚硅谷AI人工智能视频： <a href="https://pan.baidu.com/s/16VDApDKAd6P0RKznbPLqrg">https://pan.baidu.com/s/16VDApDKAd6P0RKznbPLqrg</a> 提取码：glin</li><li>Python链接：h链接：链接：<a href="https://pan.baidu.com/s/1scBXSLdiTs9SBixdkykflw">https://pan.baidu.com/s/1scBXSLdiTs9SBixdkykflw</a> 密码：ck51</li><li>Python链接：链接：<a href="https://pan.baidu.com/s/1m4cMqkOYRUFv-2T5Rm6Qmg">https://pan.baidu.com/s/1m4cMqkOYRUFv-2T5Rm6Qmg</a> 密码： 密码：2kpz</li></ul><h1 id="大数据教程"><a href="#大数据教程" class="headerlink" title="大数据教程"></a>大数据教程</h1><ul><li>尚硅谷大数据之Hadoop视频：<a href="https://pan.baidu.com/s/1jMfkd2GV9oBq2gvtiyUBwQ">https://pan.baidu.com/s/1jMfkd2GV9oBq2gvtiyUBwQ</a> 密码：zu8f</li><li>尚硅谷大数据之Hive视频：<a href="https://pan.baidu.com/s/1KOlNIMiJJvKIRHiBV7NQbw">https://pan.baidu.com/s/1KOlNIMiJJvKIRHiBV7NQbw</a> 密码：331u</li><li>尚硅谷大数据之Zookeeper视频：<a href="https://pan.baidu.com/s/1AmXksBIzKOUTd_YKRfsPOw">https://pan.baidu.com/s/1AmXksBIzKOUTd_YKRfsPOw</a> 密码：xjmx</li><li>最新尚硅谷大数据之HadoopHA视频： <a href="https://pan.baidu.com/s/1Ky_2VHNDvGEpeOoRjClYdw">https://pan.baidu.com/s/1Ky_2VHNDvGEpeOoRjClYdw</a> 提取码：lico</li><li>最新尚硅谷大数据之Flume视频:<a href="https://pan.baidu.com/s/1cT_p4j0_V87q8_iAUqVKRg">https://pan.baidu.com/s/1cT_p4j0_V87q8_iAUqVKRg</a> 提取码：8z2e</li><li>最新尚硅谷大数据之Kafka视频：<a href="https://pan.baidu.com/s/1dTo-VkvBerRbMZVzFkSy3w">https://pan.baidu.com/s/1dTo-VkvBerRbMZVzFkSy3w</a> 提取码：znis</li><li>最新尚硅谷大数据之Sqoop视频: <a href="https://pan.baidu.com/s/1nH7rsEfWU1LRCgbiJEuyKg">https://pan.baidu.com/s/1nH7rsEfWU1LRCgbiJEuyKg</a>  提取码：6t2t</li><li>最新尚硅谷大数据之Oozie视频: <a href="https://pan.baidu.com/s/1EgEBjPKtvMW6v5_uPXLMWA">https://pan.baidu.com/s/1EgEBjPKtvMW6v5_uPXLMWA</a> 提取码：2lf2</li><li>最新尚硅谷大数据之HBase视频: <a href="https://pan.baidu.com/s/1nkPH0463uq4n1aVtBTkq-w">https://pan.baidu.com/s/1nkPH0463uq4n1aVtBTkq-w</a>  提取码：d3lv</li><li>大数据链接：链接：<a href="https://pan.baidu.com/s/1eUz4AB0InYRoJddAG-6j6Q">https://pan.baidu.com/s/1eUz4AB0InYRoJddAG-6j6Q</a> 密码： 密码：quo9</li></ul><h1 id="41季公开课教程"><a href="#41季公开课教程" class="headerlink" title="41季公开课教程"></a>41季公开课教程</h1><ul><li>第1季：横扫Java基础核心技术 <a href="https://pan.baidu.com/s/1cGZpyY">https://pan.baidu.com/s/1cGZpyY</a></li><li>第2季：Java基础加强 <a href="https://pan.baidu.com/s/1qXNcgpu">https://pan.baidu.com/s/1qXNcgpu</a></li><li>第3季：数据库关键技术   <a href="https://pan.baidu.com/s/1dEHsT0H">https://pan.baidu.com/s/1dEHsT0H</a></li><li>特别季：光棍节，4晚搞定面向对象  <a href="https://pan.baidu.com/s/1skTfGyp">https://pan.baidu.com/s/1skTfGyp</a></li><li>第4季：Java就业面试攻略（含：简历模板、面试技巧)   <a href="https://pan.baidu.com/s/1hsQWvVQ">https://pan.baidu.com/s/1hsQWvVQ</a></li><li>第5季：JavaWeb书城实战   <a href="https://pan.baidu.com/s/1dFOuFbb">https://pan.baidu.com/s/1dFOuFbb</a></li><li>第6季：Android从入门到实战   <a href="https://pan.baidu.com/s/1pL7LnUN">https://pan.baidu.com/s/1pL7LnUN</a></li><li>第7季：锋利的JavaScript   <a href="https://pan.baidu.com/s/1bKgJxW">https://pan.baidu.com/s/1bKgJxW</a></li><li>第8季：从容面对Java基础笔试&amp;面试   <a href="https://pan.baidu.com/s/1slVxKjN">https://pan.baidu.com/s/1slVxKjN</a></li><li>附加课：最流行的JS框架_jQuery   <a href="https://pan.baidu.com/s/1dEX7Ozv">https://pan.baidu.com/s/1dEX7Ozv</a></li><li>第9季：Android实战_来电拦截专家   <a href="https://pan.baidu.com/s/1cAnHam">https://pan.baidu.com/s/1cAnHam</a></li><li>第10季：Java基础实战_战队组建管理系统   <a href="https://pan.baidu.com/s/1o7TlL2a">https://pan.baidu.com/s/1o7TlL2a</a></li><li>第11季：深入解析Ajax网页无刷新技术与项目实战   <a href="https://pan.baidu.com/s/1hs7Z3cK">https://pan.baidu.com/s/1hs7Z3cK</a></li><li>第12季：30分钟打造Android万能播放器  <a href="https://pan.baidu.com/s/1gfq0FS3">https://pan.baidu.com/s/1gfq0FS3</a></li><li>第13季：Android高薪就业攻略  <a href="https://pan.baidu.com/s/1jIEbd4a">https://pan.baidu.com/s/1jIEbd4a</a></li><li>第14季：客户信息管理系统   <a href="https://pan.baidu.com/s/1c2niZJE">https://pan.baidu.com/s/1c2niZJE</a></li><li>辅导课：Android全套视频-学习指导&amp;答疑   <a href="https://pan.baidu.com/s/1b9X0Sm">https://pan.baidu.com/s/1b9X0Sm</a></li><li>第15季：Android Studio入门及使用技巧   <a href="https://pan.baidu.com/s/1nv63xHZ">https://pan.baidu.com/s/1nv63xHZ</a></li><li>第16季：玩转Android与H5互调   <a href="https://pan.baidu.com/s/1dFo2PNF">https://pan.baidu.com/s/1dFo2PNF</a></li><li>第17季：HTML5实战_天猫商城品牌墙   <a href="https://pan.baidu.com/s/1hr4v8Pm">https://pan.baidu.com/s/1hr4v8Pm</a></li><li>第18季：全栈开发_node服务端开发  <a href="https://pan.baidu.com/s/1hrOEuuK">https://pan.baidu.com/s/1hrOEuuK</a></li><li>第19季：实战：360度全景图片   <a href="https://pan.baidu.com/s/1hsKkPJQ">https://pan.baidu.com/s/1hsKkPJQ</a></li><li>第20季：HTML5特效实战   <a href="https://pan.baidu.com/s/1kVBrpZp">https://pan.baidu.com/s/1kVBrpZp</a></li><li>第21季：3小时玩转微信小程序入门   <a href="https://pan.baidu.com/s/1eUnMTii">https://pan.baidu.com/s/1eUnMTii</a></li><li>第22季：CSS3特效实战   <a href="https://pan.baidu.com/s/1dESOjFr">https://pan.baidu.com/s/1dESOjFr</a></li><li>第23季：轻松搞定毕业设计:论文写作+项目实战   <a href="https://pan.baidu.com/s/1eS2DVjW">https://pan.baidu.com/s/1eS2DVjW</a></li><li>第24季：Java8新特性全剖析   <a href="https://pan.baidu.com/s/1boL0IMr">https://pan.baidu.com/s/1boL0IMr</a></li><li>第25季：BAT前端面试揭秘   <a href="https://pan.baidu.com/s/1i4WdO4t">https://pan.baidu.com/s/1i4WdO4t</a></li><li>第26季：1小时带你走进大数据世界   <a href="https://pan.baidu.com/s/1c4NYTC">https://pan.baidu.com/s/1c4NYTC</a></li><li>第27季：大数据项目实战–仿天猫用户行为分析   <a href="https://pan.baidu.com/s/1dEKGHQL">https://pan.baidu.com/s/1dEKGHQL</a></li><li>第28季：如何做互联网时代的“出彩”Java工程师  <a href="https://pan.baidu.com/s/1pRTDurhOPJS-_-41TSyvOg">https://pan.baidu.com/s/1pRTDurhOPJS-_-41TSyvOg</a></li><li>第29季：下一个风口–Python与人工智能   <a href="https://pan.baidu.com/s/1nuS7Qwp">https://pan.baidu.com/s/1nuS7Qwp</a></li><li>第30季：1小时解密程序员的黑魔法Python  <a href="https://pan.baidu.com/s/1kV9Voyj">https://pan.baidu.com/s/1kV9Voyj</a></li><li>第31季：1小时参悟Java8面向对象  <a href="https://pan.baidu.com/s/1hsAHvbI">https://pan.baidu.com/s/1hsAHvbI</a></li><li>第32季：更好的Java IDE之争：IDEA挑战Eclipse   <a href="https://pan.baidu.com/s/1c2LEPJ6">https://pan.baidu.com/s/1c2LEPJ6</a></li><li>第33季：Python学员作品之《雷电战机》   <a href="https://pan.baidu.com/s/1o7Ha6eA">https://pan.baidu.com/s/1o7Ha6eA</a></li><li>第34季：HTML5实战之Canvas刮刮卡   <a href="https://pan.baidu.com/s/1ge7Lw9l">https://pan.baidu.com/s/1ge7Lw9l</a></li><li>第35季：强大的R语言   <a href="https://pan.baidu.com/s/1gfENmeR">https://pan.baidu.com/s/1gfENmeR</a></li><li>第36季：毕业的三岔口 <a href="https://pan.baidu.com/s/1o8qmSlk">https://pan.baidu.com/s/1o8qmSlk</a></li><li>第37季：模块化打包神器：pack  <a href="http://pan.baidu.com/s/1nvxHvnz">http://pan.baidu.com/s/1nvxHvnz</a></li><li>第38季：快速入门JVM   <a href="http://pan.baidu.com/s/1pKHalAz">http://pan.baidu.com/s/1pKHalAz</a></li><li>第39季：抛开噱头，看大数据与人工智能   <a href="https://pan.baidu.com/s/1c20dj1m">https://pan.baidu.com/s/1c20dj1m</a></li><li>第40季：Java8&amp;9就业面试攻略   <a href="https://pan.baidu.com/s/1nv45pZr">https://pan.baidu.com/s/1nv45pZr</a></li><li>第41季：大话浏览器渲染原理 <a href="https://pan.baidu.com/s/1HJbyPLNDi3aw0dB7vLlWYg">https://pan.baidu.com/s/1HJbyPLNDi3aw0dB7vLlWYg</a></li><li>第42季：Python核心语法实战：学生管理系统  <a href="https://pan.baidu.com/s/14tDNHX6rpsWUlQtFAGUq5w">https://pan.baidu.com/s/14tDNHX6rpsWUlQtFAGUq5w</a></li><li>第43季：移动端重力感应：摇一摇的实现 <a href="https://pan.baidu.com/s/1oGJSWf_RaPdKXP8vMllnCQ">https://pan.baidu.com/s/1oGJSWf_RaPdKXP8vMllnCQ</a></li><li>公开课：Spring Boot实战&#x2F;Spring Cloud  <a href="https://pan.baidu.com/s/1RvuG5-ArHwA7e8DeaheL-A">https://pan.baidu.com/s/1RvuG5-ArHwA7e8DeaheL-A</a></li><li>公开课：大数据架构师课程：高薪实战课程 <a href="https://pan.baidu.com/s/1QvkUkEvtMA29bLBFIZ-hJw">https://pan.baidu.com/s/1QvkUkEvtMA29bLBFIZ-hJw</a></li><li>公开课：大数据项目实战–智慧出行  <a href="https://pan.baidu.com/s/1y-RefkxcEHo7ZjRgL1Jq1A">https://pan.baidu.com/s/1y-RefkxcEHo7ZjRgL1Jq1A</a></li><li>公开课：从比特币到区块链  <a href="https://pan.baidu.com/s/10MDp4MvcjAsz5OQnaY6o0w">https://pan.baidu.com/s/10MDp4MvcjAsz5OQnaY6o0w</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
            <tag> Video </tag>
            
            <tag> Spring </tag>
            
            <tag> Android </tag>
            
            <tag> Python </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql字符集问题：Illegal mix of collations</title>
      <link href="/mysql-Character.html"/>
      <url>/mysql-Character.html</url>
      
        <content type="html"><![CDATA[<h4 id="数据库中查询报错"><a href="#数据库中查询报错" class="headerlink" title="数据库中查询报错:"></a>数据库中查询报错:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) <span class="keyword">for</span> operation <span class="string">&#x27;=&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li><p>更改mysql的my.ini,把client和server的字符集改为utf8</p></li><li><p>更改表以及字段的的字符集为utf8</p></li></ol><span id="more"></span><h4 id="Illegal-mix-of-collations-处理方法"><a href="#Illegal-mix-of-collations-处理方法" class="headerlink" title="Illegal mix of collations 处理方法"></a>Illegal mix of collations 处理方法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> so_publish_rule <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="keyword">CHARACTER SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci;</span><br><span class="line"><span class="keyword">ALTER TABLE</span> so_video_file_deploy <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="keyword">CHARACTER SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci;</span><br></pre></td></tr></table></figure><h4 id="查看Mysql当前使用的字符集：提供以下三种"><a href="#查看Mysql当前使用的字符集：提供以下三种" class="headerlink" title="查看Mysql当前使用的字符集：提供以下三种"></a>查看Mysql当前使用的字符集：提供以下三种</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">from</span> datebase <span class="keyword">like</span> <span class="string">&#x27;%tb%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> colums form tablename;</span><br></pre></td></tr></table></figure><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><p>如果用户想改变表的默认字符集和所有的字符列的字符集到一个新的字符集，使用下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> tbl_name <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="keyword">CHARACTER SET</span> charset_name;</span><br></pre></td></tr></table></figure><h4 id="警告："><a href="#警告：" class="headerlink" title="警告："></a>警告：</h4><p>上述操作是在字符集中转换列值。如果用户在字符集（如 gb2312）中有一个列，但存储的值使用的是其它的一些不兼容的字符集（如 utf8），那么该操作将不会得到用户期望的结果。在这种情况下，用户必须对每一列做如下操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> t1 CHANGE c1 c1 <span class="type">BLOB</span>;</span><br><span class="line"><span class="keyword">ALTER TABLE</span> t1 CHANGE c1 c1 TEXT <span class="keyword">CHARACTER SET</span> utf8;</span><br></pre></td></tr></table></figure><p>这样做的原因是：从 BLOB 列转换或转换到 BLOB 列没有转换发生。</p><p>如果用户指定以二进制进行 CONVERT TO CHARACTER SET，则 CHAR、VARCHAR 和 TEXT 列将转换为它们对应的二进制字符串类型（BINARY，VARBINARY，BLOB）。这意味着这些列将不再有字符集，随后的 CONVERT TO 操作也将不会作用到它们上。</p><p>如果仅仅改变一个表的缺省字符集，可使用下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> tbl_name <span class="keyword">DEFAULT</span> <span class="keyword">CHARACTER SET</span> charset_name;</span><br></pre></td></tr></table></figure><p>DEFAULT是可选的。当向一个表里添加一个新的列时，如果没有指定字符集，则就采用缺省的字符集（例如当ALTER TABLE … ADD column）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> ... <span class="keyword">DEFAULT</span> <span class="keyword">CHARACTER SET</span> </span><br><span class="line"><span class="comment">-- 和 </span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> ... <span class="keyword">CHARACTER SET</span> </span><br><span class="line"><span class="comment">-- 是等价的，修改的仅仅是缺省的表字符集。</span></span><br></pre></td></tr></table></figure><ol><li>修改MySQL的数据库的字符集<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database shop <span class="keyword">default</span> <span class="keyword">character set</span> utf8 <span class="keyword">collate</span> utf8_bin; </span><br></pre></td></tr></table></figure></li><li>修改MySQL的表的字符集<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> producttype <span class="keyword">default</span> <span class="keyword">character set</span> utf8 <span class="keyword">collate</span> utf8_bin </span><br></pre></td></tr></table></figure></li><li>修改MySQL的字段的字符集<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> producttype change name  name  <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">character set</span> utf8 <span class="keyword">collate</span> utf8_bin <span class="keyword">not null</span>; </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  tbl_a a , tbl_b b <span class="keyword">SET</span> a.Id<span class="operator">=</span> b.id <span class="keyword">WHERE</span> <span class="keyword">CONVERT</span>(a.email <span class="keyword">USING</span> utf8) <span class="keyword">COLLATE</span> utf8_unicode_ci  <span class="operator">=</span>  b.email</span><br></pre></td></tr></table></figure></li></ol><h4 id="mysql-concat乱码问题解决"><a href="#mysql-concat乱码问题解决" class="headerlink" title="mysql concat乱码问题解决"></a>mysql concat乱码问题解决</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(str1,str2)</span><br></pre></td></tr></table></figure><p>当concat结果集出现乱码时，大都是由于连接的字段类型不同导致，如concat中的字段参数一个是varchar类型，一个是int类型或doule类型，就会出现乱码。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>利用mysql的字符串转换函数CONVERT将参数格式化为char类型就可以了。<br>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(<span class="string">&#x27;数量:&#x27;</span>,<span class="keyword">CONVERT</span>(int1,<span class="type">char</span>),<span class="keyword">CONVERT</span>(int2,<span class="type">char</span>),<span class="string">&#x27;金额:&#x27;</span>,<span class="keyword">CONVERT</span>(double1,<span class="type">char</span>),<span class="keyword">CONVERT</span>(double2,<span class="type">char</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存详解（JAVA程序员必啃）</title>
      <link href="/java-jvm-workflow.html"/>
      <url>/java-jvm-workflow.html</url>
      
        <content type="html"><![CDATA[<p>Java语言本身是不能操作内存的，它的一切都是交给JVM来管理和控制的，因此Java内存区域的划分也就是JVM的区域划分。Java代码被编译器编译成字节码之后，JVM开辟一片内存空间（运行时数据区），通过类加载器加到运行时数据区来进行存储程序执行期间需要用到的数据和相关信息，在这个数据区中，由以下几部分组成：</p><span id="more"></span><p><img src="https://i.loli.net/2018/10/31/5bd96cab28b33.jpg" alt="java"></p><h2 id="1-虚拟机栈"><a href="#1-虚拟机栈" class="headerlink" title="1. 虚拟机栈"></a>1. 虚拟机栈</h2><p>   虚拟机栈是Java方法执行的内存模型，栈中存放着栈帧，每一个栈帧对应一个被调用的方法，方法调用的过程对应着栈帧在JVM中从入栈到出栈的过程。</p><p>   栈的线程是私有的，执行每一个方法都会相应的创建一个栈帧，放到栈中（入栈），而且是放在栈顶。在方法结束后，栈帧出栈。</p><h3 id="1-1-栈帧"><a href="#1-1-栈帧" class="headerlink" title="1.1 栈帧"></a>1.1 栈帧</h3><p>   用于支持虚拟机进行方法的调用和方法的执行的数据结构，它是虚拟机运行时数据区中的栈空间的栈元素。每个栈帧中包括：</p><h4 id="1-1-1-局部变量表"><a href="#1-1-1-局部变量表" class="headerlink" title="1.1.1 局部变量表"></a>1.1.1 局部变量表</h4><p>   用于存储方法中的局部变量（不包括静态变量和方法形参）。当变量为基本数据类型时，直接存储值，当变量为引用数据类型时，存储指向具体对象的引用。</p><h5 id="1-1-1-1-基本数据类型的存储"><a href="#1-1-1-1-基本数据类型的存储" class="headerlink" title="1.1.1.1 基本数据类型的存储"></a>1.1.1.1 基本数据类型的存储</h5><h6 id="A-基本数据类型的局部变量"><a href="#A-基本数据类型的局部变量" class="headerlink" title="A. 基本数据类型的局部变量"></a>A. 基本数据类型的局部变量</h6><p>   在方法内定义的变量直接存储在栈中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun()&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们写 int a &#x3D; 100; 其实是分为两步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;<span class="comment">//定义变量</span></span><br><span class="line">a = <span class="number">100</span>;<span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><p>首先JVM创建一个变量a；存在局部变量表里面，然后去栈中查找是否存在有字面量为100的的内容，如果有，就直接把a指向这个地址，如果没有，就在栈中开辟一块空间来存储 “100”这个内容，并且把a指向这个地址。因此我们可以知道：<br><strong>我们声明并初始化基本数据类型的局部变量时，变量名以及字面量值都是存储在栈中，而且是真实的内容。</strong></p><p>这样我们就可以推出int c &#x3D; 100；的思路：<br>由于字面量为100的内容已经在栈中存在，所有c是直接指向这个地址的。<br><strong>栈中当前数据在当前线程下是共享的</strong></p><p>总结：<br>   基本数据类型的数据本身是不会改变的，当局部变量重新赋值时，并不是在内存中改变字面量内容，而是重新在栈中寻找已存在的相同的数据，若栈中不存在，就开辟内存来存新数据，并把重新赋值的局部变量的引用指向新数据的地址。</p><h6 id="B-基本数据类型的成员变量"><a href="#B-基本数据类型的成员变量" class="headerlink" title="B. 基本数据类型的成员变量"></a>B. 基本数据类型的成员变量</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>根据 <a href="#2-%E5%A0%86">堆</a> 的概念我们得出：<br><strong>基本数据类型的成员变量名和值都存储于堆中，其生命周期和对象的是一致的。</strong></p><h3 id="1-1-2-操作数栈"><a href="#1-1-2-操作数栈" class="headerlink" title="1.1.2 操作数栈"></a>1.1.2 操作数栈</h3><p>   Java虚拟机中解释执行引擎被称为 “ 基于栈的执行引擎 ” 其中的栈就是指操作数栈。</p><h3 id="1-1-3-方法出口地址"><a href="#1-1-3-方法出口地址" class="headerlink" title="1.1.3 方法出口地址"></a>1.1.3 方法出口地址</h3><p>   储存方法执行完成后的返回地址。</p><h3 id="1-1-4-指向运行时常量池的引用"><a href="#1-1-4-指向运行时常量池的引用" class="headerlink" title="1.1.4 指向运行时常量池的引用"></a>1.1.4 指向运行时常量池的引用</h3><p>   存储程序执行中可能用到的常量的引用。</p><h3 id="1-1-5-一些附加信息"><a href="#1-1-5-一些附加信息" class="headerlink" title="1.1.5 一些附加信息"></a>1.1.5 一些附加信息</h3><h2 id="2-堆"><a href="#2-堆" class="headerlink" title="2. 堆"></a>2. 堆</h2><p>   用来存储对象本身和数组，在JVM中只有一个堆，所以堆是被所有的线程共享的。</p><h2 id="3-方法区"><a href="#3-方法区" class="headerlink" title="3. 方法区"></a>3. 方法区</h2><p>   是所有线程共享的逻辑区域，在JVM中只有一个方法区，用来存储可以被所有的线程共享的内容，它是线程安全的，多个线程同时访问相同的内容时，只能有一个线程装载该内容，其他线程只能等待。</p><h2 id="4-本地方法栈"><a href="#4-本地方法栈" class="headerlink" title="4. 本地方法栈"></a>4. 本地方法栈</h2><p>   本地方法栈跟虚拟机栈的功能基本一致，线程也是私有的，它们的区别是虚拟机栈是为执行Java方法服务的，本地方法栈是为执行本地方法服务的。</p><h2 id="5-程序计数器"><a href="#5-程序计数器" class="headerlink" title="5. 程序计数器"></a>5. 程序计数器</h2><p>   线程也是私有的。记录着当前线程所执行的字节码的行号指示器，在程序运行中，字节码解释器就是通过改变这个计数器的值来选取下一条需要执行的字节码指令， 分支、循环、异常处理、线程恢复、等等基础功能都是需要计数器来完成。</p><p>参考：<a href="https://juejin.im/post/5bce68226fb9a05ce46a0476">这一次，彻底解决Java的值传递和引用传递</a></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程编程</title>
      <link href="/java-multithreaded.html"/>
      <url>/java-multithreaded.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><ul><li><input disabled="" type="checkbox"> Java给多线程编程提供了内置的支持，一个多线程程序包含两个或多个能并发运行的部分</li><li><input disabled="" type="checkbox"> 程序的每一个部分都称为一个线程，并且每个线程定义了一个独立的执行路径</li><li><input disabled="" type="checkbox"> 多线程是多任务的一种特别的形式，但多线程使用了更小的·资源开销</li><li><input disabled="" type="checkbox"> 这里定义和线程相关的另一个术语，进程：一个进程包括由操作系统分配的内存空间</li><li><input disabled="" type="checkbox"> 包含一个或者多个线程，一个线程不能独立的存在，它必须是进程的一部分</li><li><input disabled="" type="checkbox"> 一个进程一直运行，直到所有的非守候线程都结束运行后才能结束。</li><li><input disabled="" type="checkbox"> 多线程能满足程序员编写高效率的程序来达到充分利用CPU的目的。</li></ul><h2 id="1-新建状态"><a href="#1-新建状态" class="headerlink" title="1. 新建状态"></a>1. 新建状态</h2><p>使用new关键字和Thread类或者其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序start（）这个线程</p><h2 id="2-就绪状态"><a href="#2-就绪状态" class="headerlink" title="2. 就绪状态"></a>2. 就绪状态</h2><p>当线程对象调用了start（）方法之后，该线程就进入就绪状态，就绪状态的线程处于就绪列队中，要等待JVM里线程调度器的调度</p><h2 id="3-运行状态"><a href="#3-运行状态" class="headerlink" title="3. 运行状态"></a>3. 运行状态</h2><p>如果就绪状态的线程获取CPU资源，就可以执行run（），此时线程便处于运行状态</p><p>处于运行状态的线程最为复杂，它可以变为阻塞状态，就绪状态和死亡状态</p><h2 id="4-阻塞状态"><a href="#4-阻塞状态" class="headerlink" title="4. 阻塞状态"></a>4. 阻塞状态</h2><p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后</p><p>该线程就会从运行状态进入阻塞状态，在睡眠时间已到或获得设备资源后可以重新进入就绪状态，可以分为三种：</p><p>​① 等待阻塞：运行状态中的线程执行wait（）方法，使线程进入到等待阻塞状态</p><p>​② 同步阻塞：线程在获取synchronized同步锁失败（因为同步锁被其他线程占用）</p><p>​③ 其他阻塞：通过调用线程的sleep（）或者join（）发出了I&#x2F;O请求时，线程就会进入到阻塞状态当sleep（）状态超时，join（）等待线程终止或超时，或者IO处理完毕，线程重新转入就绪状态</p><h2 id="5-死亡状态"><a href="#5-死亡状态" class="headerlink" title="5. 死亡状态"></a>5. 死亡状态</h2><p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态</p><h1 id="2-线程的优先级"><a href="#2-线程的优先级" class="headerlink" title="2. 线程的优先级"></a>2. 线程的优先级</h1><p>每一个java线程都有一个优先级，这样有助于操作系统确定线程的调度顺序</p><p>Java线程的优先级是一个整数，其取值范围是1（Thread.MIN_PRIORITY）到10（Thread.MAX_PRIORITY）。</p><p>默认情况下，每一个线程都会分配一个优先级NORM_PRIORITY（5）</p><p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源，但是线程优先级不能保证线程执行的·顺序，而且非常依赖于平台。</p><h1 id="3-创建一个线程"><a href="#3-创建一个线程" class="headerlink" title="3. 创建一个线程"></a>3. 创建一个线程</h1><p>Java提供了三种·创建线程的方法：</p><p>① 通过实现Runnable接口</p><p>为了实现Runnable。一个类只需要执行一个方法调用run（），声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>你可以重写该方法，重要的是理解的run（）可以调用其他方法，使用其他类，并声明变量，就像主线程一样。在创建一个实现Runnable接口的类之后，你可以在类中实例化一个线程对象Thread定义了几个构造方法，下面的·这个是我们经常使用的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread（Runnable threadOb, String threadName）;</span><br></pre></td></tr></table></figure><p>这里，threadOb是一个实现Runnable接口的类的实例，并且threadName指定新线程的名字。新线程创建之后，你调用它的start（）方法它才会·运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​Void start（）；</span><br></pre></td></tr></table></figure><p>下面是一个创建线程并开始让它执行的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Thread t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String threadName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RunnableDemo(String name)&#123;</span><br><span class="line"></span><br><span class="line">threadName = name;</span><br><span class="line"></span><br><span class="line">System.out.println(“Creating”+ threadName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(“Running”+ threadName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">I</span> <span class="operator">=</span> <span class="number">4</span>; I &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(“Thread:”+ threadName + “,”+ i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 通过继承Thread类本身</p><p>③ 通过Callable和Future创建线程</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期</title>
      <link href="/vue-LifeCycle.html"/>
      <url>/vue-LifeCycle.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件实例化之前调用</span><br><span class="line"></span><br><span class="line">el和data并未初始化</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">created : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件实例化完毕，但页面还未显示</span><br><span class="line"></span><br><span class="line">完成了data数据的初始化，el没有</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeMount : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件挂载前，页面未显示，但虚拟<span class="variable constant_">DOM</span>已经配置</span><br><span class="line"></span><br><span class="line">完成了el和data初始化</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件挂载之后，此方法执行后，页面显示</span><br><span class="line"></span><br><span class="line">完成挂载</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeUpdate : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件更新前，页面未显示，但虚拟<span class="variable constant_">DOM</span>已经配置</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">updated : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件更新，此方法执行后页面显示</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeDestory : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件销毁前</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">destoryed : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">组件销毁</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/05/5bdfa3b7c79b5.png" alt="clipboard.png"><br><img src="https://i.loli.net/2018/11/05/5bdfa3b85850d.png" alt="vue生命周期钩子函数.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VueJS </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端公共库CDN（整理）</title>
      <link href="/js-cdn-repository.html"/>
      <url>/js-cdn-repository.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述（百科）"><a href="#概述（百科）" class="headerlink" title="概述（百科）"></a>概述（百科）</h1><p>CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">内容分发网络</a>。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><span id="more"></span><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置<a href="https://baike.baidu.com/item/%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E5%99%A8/4576219">节点服务器</a>所构成的在现有的互联网基础之上的一层智能<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C/855117">虚拟网络</a>，CDN系统能够实时地根据<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F/7489548">网络流量</a>和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p><h2 id="CDN公共库"><a href="#CDN公共库" class="headerlink" title="CDN公共库"></a>CDN公共库</h2><p>百度完这么多废话，接下来上实际。<br><strong>稳定、快速、免费的前端开源项目 CDN 加速服务</strong></p><ol><li><h2 id="https-www-bootcdn-cn"><a href="#https-www-bootcdn-cn" class="headerlink" title="https://www.bootcdn.cn/"></a><a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></h2></li></ol><p>  <img src="https://i.loli.net/2018/10/25/5bd1374bee939.png" alt="JS_CDN.png"><br>  不过最近这个在更换CDN服务商，下面是他的公告。<br>  <img src="https://i.loli.net/2018/10/25/5bd139d59b238.png" alt="CDN.png"></p><ol start="2"><li><h2 id="https-libs-cdnjs-net"><a href="#https-libs-cdnjs-net" class="headerlink" title="https://libs.cdnjs.net/"></a><a href="https://libs.cdnjs.net/">https://libs.cdnjs.net/</a></h2></li></ol><p>  <img src="https://i.loli.net/2018/10/25/5bd13a19affdc.png" alt="前端公共库.png"></p><ol start="3"><li><h2 id="http-lib-sinaapp-com"><a href="#http-lib-sinaapp-com" class="headerlink" title="http://lib.sinaapp.com/"></a><a href="http://lib.sinaapp.com/">http://lib.sinaapp.com/</a></h2></li></ol><p>  <img src="https://i.loli.net/2018/10/25/5bd13b94ca619.png" alt="新浪CDN.png"></p><ol start="4"><li><h2 id="http-jscdn-upai-com"><a href="#http-jscdn-upai-com" class="headerlink" title="http://jscdn.upai.com/"></a><a href="http://jscdn.upai.com/">http://jscdn.upai.com/</a></h2></li></ol><p>  <img src="https://i.loli.net/2018/10/25/5bd13bc4ef19b.png" alt="又拍云CDN.png"></p><ol start="5"><li><h2 id="http-www-asp-net-ajax-cdn"><a href="#http-www-asp-net-ajax-cdn" class="headerlink" title="http://www.asp.net/ajax/cdn"></a><a href="http://www.asp.net/ajax/cdn">http://www.asp.net/ajax/cdn</a></h2></li></ol><p>  <img src="https://i.loli.net/2018/10/25/5bd13c1ee6552.png" alt="微软CDN.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle函数</title>
      <link href="/oracle-function.html"/>
      <url>/oracle-function.html</url>
      
        <content type="html"><![CDATA[<h3 id="Oracle符号"><a href="#Oracle符号" class="headerlink" title="Oracle符号"></a>Oracle符号</h3><p>​||字符串拼接  例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;def&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;abcdef&#x27;</span></span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> a <span class="keyword">order</span> <span class="keyword">by</span> b)</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="Oracle中DUAL用法"><a href="#Oracle中DUAL用法" class="headerlink" title="Oracle中DUAL用法"></a>Oracle中DUAL用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SYSDATE <span class="keyword">FROM</span> DUAL<span class="operator">/</span><span class="operator">/</span>查询当前系统时间</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span> <span class="keyword">FROM</span> DUAL<span class="operator">/</span><span class="operator">/</span>查询当前用户</span><br></pre></td></tr></table></figure><h3 id="Oracle中NVL用法"><a href="#Oracle中NVL用法" class="headerlink" title="Oracle中NVL用法"></a>Oracle中NVL用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvl(str1,str2)</span><br></pre></td></tr></table></figure><p>​如果str1为null，就返回str2，否则返回str1</p><h3 id="Oracle中NVL2用法"><a href="#Oracle中NVL2用法" class="headerlink" title="Oracle中NVL2用法"></a>Oracle中NVL2用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvl2(str1,str2,str3)</span><br></pre></td></tr></table></figure><p>​如果str1为null，就返回str3，若str1不为null，则返回str2</p><h3 id="Oracle中CASE用法"><a href="#Oracle中CASE用法" class="headerlink" title="Oracle中CASE用法"></a>Oracle中CASE用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u.<span class="operator">*</span>,</span><br><span class="line">(<span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> u.isCredit<span class="operator">=</span><span class="string">&#x27;Y&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;是&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> u.isCredit<span class="operator">=</span><span class="string">&#x27;N&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;否&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">END</span>) <span class="keyword">as</span> isExist <span class="keyword">FROM</span> users u <span class="keyword">WHERE</span> u.id<span class="operator">=</span><span class="number">100026</span></span><br></pre></td></tr></table></figure><p>​注意： 等于   &#x3D;<br>​  不等于  &lt;&gt;<br>​<br>​ </p><h3 id="Oracle中DECODE用法"><a href="#Oracle中DECODE用法" class="headerlink" title="Oracle中DECODE用法"></a>Oracle中DECODE用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECODE(<span class="keyword">value</span>,if1,then1,if2,then2,if3,then3,......,<span class="keyword">else</span>)</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DECODE(u.isCredit,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;否&#x27;</span>) <span class="keyword">AS</span> isExist </span><br><span class="line"><span class="keyword">FROM</span> users u <span class="keyword">WHERE</span> u.id <span class="operator">=</span> <span class="number">100026</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> decode(sign(<span class="number">1</span><span class="number">-2</span>),<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">from</span> dual<span class="operator">/</span><span class="operator">/</span>比较大小（获得小值）</span><br></pre></td></tr></table></figure><h3 id="Oracle中SIGN用法"><a href="#Oracle中SIGN用法" class="headerlink" title="Oracle中SIGN用法"></a>Oracle中SIGN用法</h3><p>​sign函数返回一个数字的正负标志<br>​语法如下：sign( number )<br>​number 要测试标志的数字.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">If number <span class="operator">&lt;</span> <span class="number">0</span>, <span class="keyword">then</span> sign <span class="keyword">returns</span> <span class="number">-1.</span></span><br><span class="line">If number <span class="operator">=</span> <span class="number">0</span>, <span class="keyword">then</span> sign <span class="keyword">returns</span> <span class="number">0.</span></span><br><span class="line">If number <span class="operator">&gt;</span> <span class="number">0</span>, <span class="keyword">then</span> sign <span class="keyword">returns</span> <span class="number">1.</span></span><br><span class="line">sign(<span class="number">-23</span>)<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">sign(<span class="number">-0.001</span>)<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">sign(<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">sign(<span class="number">0.001</span>)<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">sign(<span class="number">23</span>)<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">sig(<span class="number">23.601</span>)<span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>​</p><h3 id="Oracle分页"><a href="#Oracle分页" class="headerlink" title="Oracle分页"></a>Oracle分页</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> A.<span class="operator">*</span>,ROWNUM rn <span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tableName</span><br><span class="line">) A </span><br><span class="line"><span class="keyword">where</span> ROWNUM <span class="operator">&lt;=</span><span class="number">20</span></span><br><span class="line">)<span class="keyword">where</span> rn <span class="operator">&gt;=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">  <span class="keyword">select</span> a.<span class="operator">*</span>,rownum rn <span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> USERS <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span></span><br><span class="line">  )a</span><br><span class="line">)b <span class="keyword">where</span> b.rn <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> b.rn <span class="operator">&lt;=</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="Oracle左联接"><a href="#Oracle左联接" class="headerlink" title="Oracle左联接"></a>Oracle左联接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u.name <span class="keyword">AS</span> UserName </span><br><span class="line"><span class="keyword">FROM</span> application a </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> users u <span class="keyword">ON</span> u.id <span class="operator">=</span> a.followup_user_id</span><br><span class="line"><span class="keyword">WHERE</span> a.application_no <span class="operator">=</span> <span class="string">&#x27;10512248&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Oracle批处理"><a href="#Oracle批处理" class="headerlink" title="Oracle批处理"></a>Oracle批处理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> students </span><br><span class="line">   <span class="keyword">select</span> id,name ,email ,sdate <span class="keyword">from</span> dual <span class="keyword">union</span> </span><br><span class="line">   <span class="keyword">select</span> id,name ,email ,sdate <span class="keyword">from</span> dual <span class="keyword">union</span> </span><br><span class="line">   <span class="keyword">select</span> id,name ,email ,sdate <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的排序算法</title>
      <link href="/java-array-sort.html"/>
      <url>/java-array-sort.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>  排序算法分为内部排序和外部排序，内部排序把数据记录放在内存中进行排序，<br>而外部排序因排序的数据量大，内存不能一次容纳全部的排序记录，所以在排序过程中需要访问外存。</p><span id="more"></span><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复访问要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。<br>访问数列的工作是重复地进行直到没有再需要交换的数据，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端，像水中的气泡从水底浮到水面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortFunction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] fun1 (<span class="type">int</span>[] array)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;array.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;array.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//将值较大的存到临时变量中</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[j];</span><br><span class="line">                    <span class="comment">//把值较小的赋给前一个位置</span></span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//把值较大的赋给后一个位置，实现每次比较后，都把大的值往后移</span></span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] nums = fun1(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4 5 7 9 10 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用命令和基本操作及问题解决</title>
      <link href="/the-nginx-software.html"/>
      <url>/the-nginx-software.html</url>
      
        <content type="html"><![CDATA[<p>nginx常用命令：<br> 启动nginx<br>.&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx<br>停止nginx<br>nginx -s stop<br>重启nginx<br>.&#x2F;sbin&#x2F;nginx -s reload<br>nginx -s reload<br>查看进程<br>ps aux | grep nginx<br>验证配置是否正确: nginx -t<br>查看Nginx的版本号：nginx -V</p><span id="more"></span><p>启动Nginx：start nginx<br>快速停止或关闭Nginx：nginx -s stop<br>正常停止或关闭Nginx：nginx -s quit<br>配置文件修改重装载命令：nginx -s reload</p><p>解决nginx加tomcat的8080端口开放问题<br>server {<br>​        listen       80;<br>​        server_name  localhost;<br>​        #charset koi8-r;<br>​        #access_log  logs&#x2F;host.access.log  main;<br>​        location &#x2F; {<br>​   proxy_pass <a href="http://localhost:8080/">http://localhost:8080</a> ;<br>​           proxy_set_header Host $host:80;<br>​        proxy_set_header X-Real-IP $remote_addr;<br>​        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>​        proxy_set_header Via “nginx”;<br>​        port_in_redirect off;<br>​        }<br>​} </p><p>nginx: [error] CreateFile() “E:\nginx\nginx-1.9.3&#x2F;logs&#x2F;nginx.pid” failed<br>nginx: [error] Open() “E:\nginx\nginx-1.9.3&#x2F;logs&#x2F;nginx.pid” failed<br>解决方法:<br>使用命令创建&#x2F;logs&#x2F;nginx.pid文件:<br>nginx -c conf&#x2F;nginx.conf</p><p>Configuring Locations</p><p>下面的配置将匹配以 &#x2F;some&#x2F;path&#x2F;开头的URIs，例如：&#x2F;some&#x2F;path&#x2F;document.html<br>location &#x2F;some&#x2F;path&#x2F; {<br>…<br>}</p><p>正则表达式能通过 ~ 符号 和 ~* 这两个符号表示，分别指正则表达式区分大小写和不区分大小写，以下例子表示匹配URIs中包含.html 或者.htm 的访问路径：<br>location ~ .html? {<br>…<br>}<br>nginx会匹配最准确的路径，会先匹配相对路径，如果不匹配，再跟正则表达式进行匹配</p><p>以下例子中，第一个路径&#x2F;images&#x2F;的文件目录是&#x2F;data，第二个路径表明nginx作为代理的角色将会把请求转给后端<a href="http://www.example.com的机器上/">www.example.com的机器上</a><br>server {<br>location &#x2F;images&#x2F; {<br>root &#x2F;data;<br>}</p><p>location &#x2F; {<br>proxy_pass <a href="http://www.example.com/">http://www.example.com</a>;<br>}<br>}<br>如果这样配置，那么除了&#x2F;image&#x2F;开头的URIs，其他的URIs将会以代理的方式传到后端机器</p><p>root 指令<br>root指令能指定那个目录作为根目录用于文件的检索，这个指令能用于http,server,location这些块中<br>下面的例子指定了virtual server文件检索的根目录：<br>server {<br>root &#x2F;www&#x2F;data;</p><p>location &#x2F; {<br>}</p><p>location &#x2F;images&#x2F; {<br>}</p><p>location ~ .(mp3|mp4) {<br>root &#x2F;www&#x2F;media;<br>}<br>}<br>当一个URI以&#x2F;image&#x2F;开头，那么将会在 &#x2F;www&#x2F;data&#x2F;images&#x2F;这个目录下进行检索；当URI以 .mp3或.mp4结尾时，nginx将会在&#x2F;www&#x2F;media目录下检索资源</p><p>当一个请求以 &#x2F; 结尾时，nginx会尝试在该目录下找到该请求的索引文件（index file）。默认的索引文件为index.html。<br>例如 如果URI为&#x2F;images&#x2F;some&#x2F;path&#x2F;，那么nginx会尝试查找&#x2F;www&#x2F;data&#x2F;images&#x2F;some&#x2F;path&#x2F;index.html文件，如果这个文件不存在，那么将默认返回404。<br>可以通过 autoindex指令来配置nginx自动生成目录文件列表，而不是返回index.html<br>location &#x2F;images&#x2F; {<br>autoindex on;<br>}</p><p>如果想让nginx查找更多指定类型的索引文件，可以通过Index指令指定，如：<br>location &#x2F; {<br>index index.$geo.html index.htm index.html;<br>}</p><p>try_files 指令<br>try_files指令会在原请求不存在时，重定向到指定的URI，并返回结果。例如：<br>server {<br>root &#x2F;www&#x2F;data;</p><p>location &#x2F;images&#x2F; {<br>try_files $uri &#x2F;images&#x2F;default.gif;<br>}<br>}<br>&#x2F;www&#x2F;data&#x2F;images&#x2F;index.html不存在时，将会返回&#x2F;www&#x2F;data&#x2F;images&#x2F;default.gif文件</p><p>另外一种情况是返回状态码：<br>location &#x2F; {<br>try_files $uri $uri&#x2F; $uri.html &#x3D;404;<br>}<br>location  &#x3D; &#x2F; {</p><h1 id="精确匹配-x2F-，主机名后面不能带任何字符串"><a href="#精确匹配-x2F-，主机名后面不能带任何字符串" class="headerlink" title="精确匹配 &#x2F; ，主机名后面不能带任何字符串"></a>精确匹配 &#x2F; ，主机名后面不能带任何字符串</h1><p>  [ configuration A ]<br>}</p><p>location  &#x2F; {</p><h1 id="因为所有的地址都以-x2F-开头，所以这条规则将匹配到所有请求"><a href="#因为所有的地址都以-x2F-开头，所以这条规则将匹配到所有请求" class="headerlink" title="因为所有的地址都以 &#x2F; 开头，所以这条规则将匹配到所有请求"></a>因为所有的地址都以 &#x2F; 开头，所以这条规则将匹配到所有请求</h1><h1 id="但是正则和最长字符串会优先匹配"><a href="#但是正则和最长字符串会优先匹配" class="headerlink" title="但是正则和最长字符串会优先匹配"></a>但是正则和最长字符串会优先匹配</h1><p>  [ configuration B ]<br>}</p><p>location &#x2F;documents&#x2F; {</p><h1 id="匹配任何以-x2F-documents-x2F-开头的地址，匹配符合以后，还要继续往下搜索"><a href="#匹配任何以-x2F-documents-x2F-开头的地址，匹配符合以后，还要继续往下搜索" class="headerlink" title="匹配任何以 &#x2F;documents&#x2F; 开头的地址，匹配符合以后，还要继续往下搜索"></a>匹配任何以 &#x2F;documents&#x2F; 开头的地址，匹配符合以后，还要继续往下搜索</h1><h1 id="只有后面的正则表达式没有匹配到时，这一条才会采用这一条"><a href="#只有后面的正则表达式没有匹配到时，这一条才会采用这一条" class="headerlink" title="只有后面的正则表达式没有匹配到时，这一条才会采用这一条"></a>只有后面的正则表达式没有匹配到时，这一条才会采用这一条</h1><p>  [ configuration C ]<br>}</p><p>location ~ &#x2F;documents&#x2F;Abc {</p><h1 id="匹配任何以-x2F-documents-x2F-开头的地址，匹配符合以后，还要继续往下搜索-1"><a href="#匹配任何以-x2F-documents-x2F-开头的地址，匹配符合以后，还要继续往下搜索-1" class="headerlink" title="匹配任何以 &#x2F;documents&#x2F; 开头的地址，匹配符合以后，还要继续往下搜索"></a>匹配任何以 &#x2F;documents&#x2F; 开头的地址，匹配符合以后，还要继续往下搜索</h1><h1 id="只有后面的正则表达式没有匹配到时，这一条才会采用这一条-1"><a href="#只有后面的正则表达式没有匹配到时，这一条才会采用这一条-1" class="headerlink" title="只有后面的正则表达式没有匹配到时，这一条才会采用这一条"></a>只有后面的正则表达式没有匹配到时，这一条才会采用这一条</h1><p>  [ configuration CC ]<br>}</p><p>location ^~ &#x2F;images&#x2F; {</p><h1 id="匹配任何以-x2F-images-x2F-开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。"><a href="#匹配任何以-x2F-images-x2F-开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。" class="headerlink" title="匹配任何以 &#x2F;images&#x2F; 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。"></a>匹配任何以 &#x2F;images&#x2F; 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</h1><p>  [ configuration D ]<br>}</p><p>location ~* .(gif|jpg|jpeg)$ {</p><h1 id="匹配所有以-gif-jpg或jpeg-结尾的请求"><a href="#匹配所有以-gif-jpg或jpeg-结尾的请求" class="headerlink" title="匹配所有以 gif,jpg或jpeg 结尾的请求"></a>匹配所有以 gif,jpg或jpeg 结尾的请求</h1><h1 id="然而，所有请求-x2F-images-x2F-下的图片会被-config-D-处理，因为-到达不了这一条正则"><a href="#然而，所有请求-x2F-images-x2F-下的图片会被-config-D-处理，因为-到达不了这一条正则" class="headerlink" title="然而，所有请求 &#x2F;images&#x2F; 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则"></a>然而，所有请求 &#x2F;images&#x2F; 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</h1><p>  [ configuration E ]<br>}</p><p>location &#x2F;images&#x2F; {</p><h1 id="字符匹配到-x2F-images-x2F-，继续往下，会发现-存在"><a href="#字符匹配到-x2F-images-x2F-，继续往下，会发现-存在" class="headerlink" title="字符匹配到 &#x2F;images&#x2F;，继续往下，会发现 ^~ 存在"></a>字符匹配到 &#x2F;images&#x2F;，继续往下，会发现 ^~ 存在</h1><p>  [ configuration F ]<br>}</p><p>location &#x2F;images&#x2F;abc {</p><h1 id="最长字符匹配到-x2F-images-x2F-abc，继续往下，会发现-存在"><a href="#最长字符匹配到-x2F-images-x2F-abc，继续往下，会发现-存在" class="headerlink" title="最长字符匹配到 &#x2F;images&#x2F;abc，继续往下，会发现 ^~ 存在"></a>最长字符匹配到 &#x2F;images&#x2F;abc，继续往下，会发现 ^~ 存在</h1><h1 id="F与G的放置顺序是没有关系的"><a href="#F与G的放置顺序是没有关系的" class="headerlink" title="F与G的放置顺序是没有关系的"></a>F与G的放置顺序是没有关系的</h1><p>  [ configuration G ]<br>}</p><p>location ~ &#x2F;images&#x2F;abc&#x2F; {</p><h1 id="只有去掉-config-D-才有效：先最长匹配-config-G-开头的地址，继续往下搜索，匹配到这一条正则，采用"><a href="#只有去掉-config-D-才有效：先最长匹配-config-G-开头的地址，继续往下搜索，匹配到这一条正则，采用" class="headerlink" title="只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用"></a>只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</h1><pre><code>[ configuration H ] </code></pre><p>}</p><p>location ~* &#x2F;js&#x2F;.*&#x2F;.js</p><p>顺序 no优先级：<br>(location &#x3D;) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location <del>,</del>* 正则顺序) &gt; (location 部分起始路径) &gt; (&#x2F;)<br>按照上面的location写法，以下的匹配示例成立：<br>&#x2F; -&gt; config A<br>精确完全匹配，即使&#x2F;index.html也匹配不了<br>&#x2F;downloads&#x2F;download.html -&gt; config B<br>匹配B以后，往下没有任何匹配，采用B<br>&#x2F;images&#x2F;1.gif -&gt; configuration D<br>匹配到F，往下匹配到D，停止往下<br>&#x2F;images&#x2F;abc&#x2F;def -&gt; config D<br>最长匹配到G，往下匹配D，停止往下<br>你可以看到 任何以&#x2F;images&#x2F;开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序<br>&#x2F;documents&#x2F;document.html -&gt; config C<br>匹配到C，往下没有任何匹配，采用C<br>&#x2F;documents&#x2F;1.jpg -&gt; configuration E<br>匹配到C，往下正则匹配到E<br>&#x2F;documents&#x2F;Abc.jpg -&gt; config CC<br>最长匹配到C，往下正则顺序匹配到CC，不会往下到E</p><p>所以实际使用中，个人觉得至少有三个匹配规则定义，如下：<br>#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。<br>#这里是直接转发给后端应用服务器了，也可以是一个静态首页</p><h1 id="第一个必选规则"><a href="#第一个必选规则" class="headerlink" title="第一个必选规则"></a>第一个必选规则</h1><p>location &#x3D; &#x2F; {<br>​    proxy_pass <a href="http://tomcat:8080/index">http://tomcat:8080/index</a><br>}</p><h1 id="第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项"><a href="#第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项" class="headerlink" title="第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项"></a>第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</h1><h1 id="有两种配置模式，目录匹配或后缀匹配-任选其一或搭配使用"><a href="#有两种配置模式，目录匹配或后缀匹配-任选其一或搭配使用" class="headerlink" title="有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用"></a>有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</h1><p>location ^~ &#x2F;static&#x2F; {<br>​    root &#x2F;webroot&#x2F;static&#x2F;;<br>}<br>location ~* .(gif|jpg|jpeg|png|css|js|ico)$ {<br>​    root &#x2F;webroot&#x2F;res&#x2F;;<br>}<br>#第三个规则就是通用规则，用来转发动态请求到后端应用服务器<br>#非静态文件请求就默认是动态请求，自己根据实际把握<br>#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了<br>location &#x2F; {<br>​    proxy_pass <a href="http://tomcat:8080/">http://tomcat:8080/</a><br>}</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Software </tag>
            
            <tag> centOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 配置文件数据源加密</title>
      <link href="/spring-config-encryption.html"/>
      <url>/spring-config-encryption.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>开发的同学们都知道，例如项目依赖的信息，数据库信息一般是保存在配置文件中，而且都是明文，因此需要进行加密处理，今天在这里介绍下jasypt集成springboot加密的配置</p><h2 id="第一步：pom文件加入依赖"><a href="#第一步：pom文件加入依赖" class="headerlink" title="第一步：pom文件加入依赖"></a>第一步：pom文件加入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="第二步：生成密钥-在windows下命令生成加密密文"><a href="#第二步：生成密钥-在windows下命令生成加密密文" class="headerlink" title="第二步：生成密钥(在windows下命令生成加密密文)"></a>第二步：生成密钥(在windows下命令生成加密密文)</h2><p>找到你的maven仓库路径 &#x3D;&#x3D;&#x3D;&#x3D;G:\maven\repository\org\jasypt\jasypt\1.9.2=&#x3D;&#x3D;&#x3D;，替换下面的路径。</p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明:"></a>参数说明:</h3><ul><li><p>input &#x3D; 数据库链接密码</p></li><li><p>password &#x3D; 加密字段，随意设置你要加密的字符!</p></li><li><p>algorithm &#x3D; 加密算法（默认就行）</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> G:\maven\repository\org\jasypt\jasypt\1.9.2\jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=<span class="string">&quot;admin&quot;</span> password=saltnewfor algorithm=PBEWithMD5AndDES</span><br></pre></td></tr></table></figure><h3 id="执行后有以下输出："><a href="#执行后有以下输出：" class="headerlink" title="执行后有以下输出："></a>执行后有以下输出：</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">----ENVIRONMENT-----------------</span><br><span class="line"></span><br><span class="line">Runtime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.131-b11 </span><br><span class="line"></span><br><span class="line">----ARGUMENTS-------------------</span><br><span class="line"></span><br><span class="line">algorithm: PBEWithMD5AndDES</span><br><span class="line">input: admin</span><br><span class="line">password: saltnewfor</span><br><span class="line"></span><br><span class="line">----OUTPUT----------------------</span><br><span class="line"></span><br><span class="line">UK61bS+W/BskHl0N0ViAQcrPAmZLZZwO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第三步：在application-yml文件中配置"><a href="#第三步：在application-yml文件中配置" class="headerlink" title="第三步：在application.yml文件中配置"></a>第三步：在application.yml文件中配置</h2><p><strong>注意格式要写在  ENC(加密字符)    （）里面为生成的加密字符</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">saltnewfor</span></span><br><span class="line"><span class="attr">spring:</span>    </span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span>  </span><br><span class="line">    <span class="attr">username:</span> <span class="string">ENC(UK61bS+W/BskHl0N0ViAQcrPAmZLZZwO)</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(Z0W0OKw1+Dfi5KY8Q5lqvA==)</span></span><br></pre></td></tr></table></figure><p>重启项目 大功告成啦！</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本语法使用</title>
      <link href="/markdown-user-function.html"/>
      <url>/markdown-user-function.html</url>
      
        <content type="html"><![CDATA[<p>markdown 语法十分简单，非常有利于写作，这里做一个简单介绍。</p><p>#表示标题，##表示2级标题，同理####表示4级标题</p><h1 id="表示标题"><a href="#表示标题" class="headerlink" title="表示标题"></a>表示标题</h1><h2 id="表示2级标题，同理"><a href="#表示2级标题，同理" class="headerlink" title="表示2级标题，同理"></a>表示2级标题，同理</h2><h4 id="表示4级标题"><a href="#表示4级标题" class="headerlink" title="表示4级标题"></a>表示4级标题</h4><span id="more"></span><p>空行表示新的段落，如果不空行的话，markdown 认为是同一段落</p><p><a href="B">A</a> 这样样式表示为链接，A为你想要显示的文字，B为实际的链接</p><p><img src="/B" alt="A"> 这种样式表示图片，A为图片的描述文字，B为图片链接</p><p>*表示无序列表</p><ul><li>A</li><li>B</li><li>C</li></ul><p>1,2,3 表示有序列表<br>1 A<br>2 B<br>3 C</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print();</span><br></pre></td></tr></table></figure><h1 id="创建文章的文件"><a href="#创建文章的文件" class="headerlink" title="创建文章的文件"></a>创建文章的文件</h1><p>发表一篇新文章，你所需要做的就是在 _posts 文件夹中创建一个新的文件。文件名的命名非常重要。<br>Jekyll 要求一篇文章的文件名遵循下面的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">年-月-日-标题.MARKUP</span><br></pre></td></tr></table></figure><p>在这里，年是 4 位数字，月和日都是 2 位数字。MARKUP扩展名代表了这篇文章是用什么格式写的。<br>下面是一些合法的文件名的例子：<br>2011-12-31-new-years-eve-is-awesome.markdown<br>2011-12-31-new-years-eve-is-awesome.md<br>2012-09-12-how-to-write-a-blog.textile</p>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.3防火墙配置</title>
      <link href="/centos-iptables-config.html"/>
      <url>/centos-iptables-config.html</url>
      
        <content type="html"><![CDATA[<p>Centos7.3防火墙配置<br>1、查看firewall服务状态<br>systemctl status firewalld<br>2、查看firewall的状态<br>firewall-cmd –state</p><p>3、开启、重启、关闭、firewalld.service服务</p><span id="more"></span><h1 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h1><p>service firewalld start</p><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>service firewalld restart</p><h1 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h1><p>service firewalld stop<br>4、查看防火墙规则<br>firewall-cmd –list-all<br>5、查询、开放、关闭端口</p><h1 id="查询端口是否开放"><a href="#查询端口是否开放" class="headerlink" title="查询端口是否开放"></a>查询端口是否开放</h1><p>firewall-cmd –query-port&#x3D;8080&#x2F;tcp</p><h1 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h1><p>firewall-cmd –permanent –add-port&#x3D;80&#x2F;tcp</p><h1 id="移除端口"><a href="#移除端口" class="headerlink" title="移除端口"></a>移除端口</h1><p>firewall-cmd –permanent –remove-port&#x3D;8080&#x2F;tcp</p><p>#重启防火墙(修改配置后要重启防火墙)<br>firewall-cmd –reload</p><h1 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h1><p>1、firwall-cmd：是Linux提供的操作firewall的一个工具；<br>2、–permanent：表示设置为持久；<br>3、–add-port：标识添加的端口；</p><p>清园<br>沉没的Atlantis<br>CentOS7安装iptables防火墙<br>CentOS7默认的防火墙不是iptables,而是firewalle.<br>安装iptable iptable-service</p><p>#先检查是否安装了iptables<br>service iptables status<br>#安装iptables<br>yum install -y iptables<br>#升级iptables<br>yum update iptables<br>#安装iptables-services<br>yum install iptables-services</p><p>禁用&#x2F;停止自带的firewalld服务<br>#停止firewalld服务<br>systemctl stop firewalld<br>#禁用firewalld服务<br>systemctl mask firewalld<br>设置现有规则</p><p>#查看iptables现有规则<br>iptables -L -n<br>#先允许所有,不然有可能会杯具<br>iptables -P INPUT ACCEPT<br>#清空所有默认规则<br>iptables -F<br>#清空所有自定义规则<br>iptables -X<br>#所有计数器归0<br>iptables -Z<br>#允许来自于lo接口的数据包(本地访问)<br>iptables -A INPUT -i lo -j ACCEPT<br>#开放22端口<br>iptables -A INPUT -p tcp –dport 22 -j ACCEPT<br>#开放21端口(FTP)<br>iptables -A INPUT -p tcp –dport 21 -j ACCEPT<br>#开放80端口(HTTP)<br>iptables -A INPUT -p tcp –dport 80 -j ACCEPT<br>#开放443端口(HTTPS)<br>iptables -A INPUT -p tcp –dport 443 -j ACCEPT<br>#允许ping<br>iptables -A INPUT -p icmp –icmp-type 8 -j ACCEPT<br>#允许接受本机请求之后的返回数据 RELATED,是为FTP设置的<br>iptables -A INPUT -m state –state  RELATED,ESTABLISHED -j ACCEPT<br>#其他入站一律丢弃<br>iptables -P INPUT DROP<br>#所有出站一律绿灯<br>iptables -P OUTPUT ACCEPT<br>#所有转发一律丢弃<br>iptables -P FORWARD DROP</p><p>其他规则设定</p><p>#如果要添加内网ip信任（接受其所有TCP请求）<br>iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT<br>#过滤所有非以上规则的请求<br>iptables -P INPUT DROP<br>#要封停一个IP，使用下面这条命令：<br>iptables -I INPUT -s <em><strong>.</strong></em>.<em><strong>.</strong></em> -j DROP<br>#要解封一个IP，使用下面这条命令:<br>iptables -D INPUT -s <em><strong>.</strong></em>.<em><strong>.</strong></em> -j DROP</p><p>保存规则设定<br>#保存上述规则<br>service iptables save<br>开启iptables服务 </p><p>#注册iptables服务<br>#相当于以前的chkconfig iptables on<br>systemctl enable iptables.service<br>#开启服务<br>systemctl start iptables.service<br>#查看状态<br>systemctl status iptables.service</p><p>解决vsftpd在iptables开启后,无法使用被动模式的问题<br>1.首先在&#x2F;etc&#x2F;sysconfig&#x2F;iptables-config中修改或者添加以下内容<br>#添加以下内容,注意顺序不能调换<br>IPTABLES_MODULES&#x3D;”ip_conntrack_ftp”<br>IPTABLES_MODULES&#x3D;”ip_nat_ftp”<br>2.重新设置iptables设置<br>iptables -A INPUT -m state –state  RELATED,ESTABLISHED -j ACCEPT</p><p>以下为完整设置脚本</p><p>#!&#x2F;bin&#x2F;sh<br>iptables -P INPUT ACCEPT<br>iptables -F<br>iptables -X<br>iptables -Z<br>iptables -A INPUT -i lo -j ACCEPT<br>iptables -A INPUT -p tcp –dport 22 -j ACCEPT<br>iptables -A INPUT -p tcp –dport 21 -j ACCEPT<br>iptables -A INPUT -p tcp –dport 80 -j ACCEPT<br>iptables -A INPUT -p tcp –dport 443 -j ACCEPT<br>iptables -A INPUT -p icmp –icmp-type 8 -j ACCEPT<br>iptables -A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT<br>iptables -P INPUT DROP<br>iptables -P OUTPUT ACCEPT<br>iptables -P FORWARD DROP<br>service iptables save<br>systemctl restart iptables.service</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
